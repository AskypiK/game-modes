

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>

<manialink version="2" name="{( LayerName )}">

	
	<framemodel id="historyevent">

		<quad id="newyear" posn="0 10.5 2" halign="left" valign="top" sizen="58 0.4" bgcolor="0af" opacity="0.75" hidden="1" />

		<quad posn="0 7.5 1" halign="left" valign="center" sizen="58 6" style="Bgs1" substyle="BgGradTop" opacity="0.5" />

		<quad id="hover" posn="0 7.5 0" halign="left" valign="center" sizen="58 6" scriptevents="1" />
		
		<frame posn="10 5 2">
			<label id="year" posn="-9 2" sizen="9 6" textcolor="0af" textsize="1" halign="left" valign="center2"/>
		
			<quad id="playeremblem" posn="2 2" sizen="5 5" autoscale="0" halign="center" valign="center"/>
			
			<label id="playername" posn="30 2" sizen="25 6" halign="right" textsize="1" valign="center2"/>
			
			<quad id="action" posn="30 2" sizen="5 5" valign="center"/>
			
			<label id="castlename" posn="35 2" sizen="10 6" halign="left" textsize="1" valign="center2"/>
		</frame>
	</framemodel>

	<framemodel id="donation" posn="0 0 -20">
		<quad id="betlight" posn="0 0" sizen="20 20" halign="center" valign="center" style="Bgs1" substyle="Glow" opacity="0" />
		<frame id="scaleframe">
			<quad posn="0 0 1" sizen="0.5 28" bgcolor="FFFA" image="file://Media/Manialinks/ShootMania/Warlords/Textures/Gauge/Gradient.png" modulatecolor="fa0"/>
			<quad posn="0 0 1" sizen="0.5 28" bgcolor="FFFA" image="file://Media/Manialinks/ShootMania/Warlords/Textures/Gauge/Gradient.png" modulatecolor="fa0" rot="-90" halign="right"/>
			<frame posn="7 -8 1">
				<label posn="7.5 3 0" sizen="20 5" text="$sDonate" halign="center" valign="center" style="TextTitle3" textsize="1" textcolor="FA0"/>
				
				<quad id="plusquad" posn="7.5 -5 2" sizen="15 5" halign="center" valign="bottom" image="file://Media/Manialinks/ShootMania/Warlords/Textures/Gauge/HPlus_Test1.png" colorize="fa0" scriptevents="1" />
				<quad id="plusgradbg" posn="7.5 -5 1" sizen="15 5" halign="center" valign="bottom" style="Bgs1" substyle="BgGradBottom" scriptevents="1" />
				
				<label id="infolabel" posn="7.5 -7.5 2" sizen="15 5" halign="center" valign="center" textcolor="fa0" textsize="3" text="XXX" />
				<quad id="infobg" posn="7.5 -7.5 1" sizen="15 5" halign="center" valign="center" bgcolor="000" scriptevents="1" />
				
				<quad id="minusquad" posn="7.5 -10 2" sizen="15 5" halign="center" valign="top" image="file://Media/Manialinks/ShootMania/Warlords/Textures/Gauge/HMinus_Test1.png" colorize="fa0" scriptevents="1" />
				<quad id="minusgradbg" posn="7.5 -10 1" sizen="15 5" halign="center" valign="top" style="Bgs1" substyle="BgGradTop" scriptevents="1" />
			
				<quad id="shadow" posn="-5 5 0" sizen="25 25" style="Bgs1InRace" substyle="BgButtonShadow" />
			</frame>
			
			<quad posn="0 0 0" sizen="28 28" bgcolor="FFFA" style="Bgs1" substyle="BgDialogBlur"/>
			
		</frame>
	</framemodel>

	<framemodel id="player">
		<frame>

			<frameinstance id="donation" modelid="donation" posn="58.5 4 5" hidden="1" />
			
			<frame id="emblemcontainer" posn="5 5 3">
				<quad id="emblem" posn="0 0 1" sizen="8 8" halign="center" valign="center" style="Emblems" substyle="#0" opacity="0.95" />
				<quad id="emblemlight" posn="0 0 0" sizen="8 8" scale="1.5" halign="center" valign="center" style="Bgs1InRace" substyle="Glow" opacity="0.95" />
			</frame>

			<frame id="text" posn="16 0 2">
				<label id="name" posn="0 7" sizen="40 5" halign="left" style="TextTitle3" text="player" />
				<quad id="goldimg" posn="37 2.5" sizen="6 5.25" image="file://Media/Manialinks/ShootMania/Warlords/Textures/Info/Gold.png"  />
				<label id="gold" posn="38 -2" sizen="20" halign="right" valign="bottom" textsize="1.5" textcolor="fa0" text="0" />
				<frame id="castlescountcontainer" posn="0 -1">
					<label id="castlescount" posn="0 1" sizen="47 2" halign="left" style="TextTitle3" text="x castles" textsize="0.5" />
				</frame>
				<frame id="vassalcontainer" posn="0 1" hidden="1">
					<label id="vassal" posn="0 2.5" sizen="40 2" halign="left" style="TextTitle3" text="vassal of " textsize="0.5" />
					<quad id="btn-discard" posn="39 8 20" sizen="8 8" style="Icons128x128_1" substyle="Quit" opacity="0.8" scriptevents="1"/>
				</frame>
			</frame>

			<frame posn="0 4 0">
				<quad id="state" posn="0 0 3" sizen="16 10" halign="left" valign="center" style="UiSMSpectatorScoreBig" substyle="HandleRight" bgcolor="181f21" />
				<label id="focustext" posn="58.5 5.5 11" sizen="58.5 1" halign="right" style="TextTitle3" textsize="0.5" textcolor="fa0" text="" hidden="0" />
				<quad id="focuslight" posn="0 4 10" sizen="58.5 1" style="Bgs1" substyle="BgWindow4" modulatecolor="fa0" hidden="1" />
				<quad id="highlight" posn="30 -1.5 1" sizen="55 9" halign="center" valign="center" opacity="1" scriptevents="1"  style="Bgs1" substyle="BgWindow4" hidden="1"/>
				<quad id="playerbg" posn="0 -2.17" sizen="59 14" halign="left" valign="center" style="UiSMSpectatorScoreBig" substyle="PlayerSlot" scriptevents="1" />
			</frame>
		</frame>
	</framemodel>

	<frame id="content" posn="0 0 -55" >

		<frame id="top" posn="160 90" z-index="-11">
			<frame posn="-40 -2">
				<label id="objective" posn="0" halign="right" style="TextTitle3" text="Objective : be the first to own x planets" textsize="1" textcolor="37d0fa" />
				<label id="limityear" posn="0 -4" halign="right" style="TextTitle3" text="Limit year: xxxx" textsize="1" textcolor="37d0fa" />
			</frame>

			<frame posn="-16 -4" halign="right" valign="top" rot="10">
				<label id="yearlabel" posn="0 0 1" halign="center" style="TextTitle3" text="Year" textsize="4" />
				<label id="currentyear" posn="0 -6 1" halign="center" style="TextTitle3" text="????" textsize="10" />
				<label id="lastyear" posn="0 -6" halign="center" style="TextTitle3" text="????" textsize="10" />
			</frame>
			
			<quad id="toplight" posn="0 0 0" sizen="240 40" halign="center" valign="center" style="Bgs1" substyle="Glow" />
		</frame>

		<frame id="leftbar" posn="-160 -51" scale="0.9" z-index="-11"> 
		
			<frame posn="0 130" id="blitzcontainer" z-index="-11">
				<label id="blitztitle" posn="1 10 1" sizen="56 5" halign="left" valign="top" style="TextTitle3" text="Capital Storm" textsize="2"/>
				<quad id="blitzgoldimg" posn="38 8.5 1" sizen="8 7" bgcolor="FFFA" image="file://Media/Manialinks/ShootMania/Warlords/Textures/Info/Gold.png"/>
				<label id="blitzvalue" posn="52 5 1" sizen="12.7 5" halign="center" valign="center" text="6000" textsize="2" textcolor="FA0"/>
				<gauge id="blitzgauge" posn="-1 1 1" sizen="40.6 8" halign="left" valign="bottom" drawbg="0" ratio="1" color="FA0"/>
				<quad id="blitzbg" posn="-4 0 0" sizen="32 7" scale="2" halign="left" valign="bottom" style="EnergyBar" substyle="EnergyBar_0.25" opacity="0.9"/>
			</frame>

			<frame id="historycontainer" posn="-4 66 1" z-index="-11">

				<frame id="historyevents" posn="4 -2 1">
					<frameinstance modelid="historyevent" posn="0 0" />
					<frameinstance modelid="historyevent" posn="0 6" />
					<frameinstance modelid="historyevent" posn="0 12" />
					<frameinstance modelid="historyevent" posn="0 18" />
					<frameinstance modelid="historyevent" posn="0 24" />
					<frameinstance modelid="historyevent" posn="0 30" />
					<frameinstance modelid="historyevent" posn="0 36" />
					<frameinstance modelid="historyevent" posn="0 42" />
					<frameinstance modelid="historyevent" posn="0 48" />
					<frameinstance modelid="historyevent" posn="0 54" />
				</frame>

				<quad id="historybg" posn="0 0" sizen="32 32" halign="left" valign="bottom" style="EnergyBar" substyle="EnergyBar_0.25" opacity="0.9" scale="2" />

			</frame>

			<frame id="playerlist" posn="2.5 3.5 1" z-index="-11">

				<frame id="players" posn="-3 2 1">

					<frameinstance posn="0 51" z-index="0" modelid="player" />
					<frameinstance posn="0 40" z-index="1" modelid="player" hidden="1" />
					<frameinstance posn="0 29" z-index="2" modelid="player" hidden="1" />
					<frameinstance posn="0 18" z-index="3" modelid="player" hidden="1" />
					<frameinstance posn="0 07" z-index="4" modelid="player" hidden="1" />
					<frameinstance posn="0 -4" z-index="5" modelid="player" hidden="1" />

				</frame>

			</frame>

		</frame>


		<frame id="bottombar" posn="0 0 -5">

			<frame posn="0 -90">
				
				<frame id="localplayerinfocontainer" posn="0 7.5 1">
					
					<frame posn="-60">
						<quad id="localplayeremblem" posn="0" sizen="12 12" halign="center" valign="center" style="Emblems" substyle="#0" />
						
						<frame posn="6">
							<label id="localplayer" posn="0 3.5" sizen="32" text="Player login here" halign="left" valign="center2" style="TextTitle3" />
							<label id="RulesTips" posn="36 6" z-index="0" sizen="50 12" text="" autonewline="1" textsize="0.3" style="TextTitle3" textcolor="fff" maxline="6"/>
							<quad id="RulesTipsBG" posn="34 7" z-index="0" sizen="54 14" bgcolor="0007"/>
							<!--
							<frame posn="0 -2">
								<frame id="castle" posn="0 0">
									<quad id="castlehalo" posn="0 0 1" sizen="6.1 6.1" halign="left" valign="center" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/LightProj.png" colorize="eee" />
									<quad id="castleimage" posn="3 0 0" sizen="6 6" halign="center" valign="center" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/Castle6.png" colorize="eee" />
								</frame>

								<label id="localplayercastles" posn="8 0" text="X/Y" halign="left" valign="center2" style="TextTitle3" textcolor="456" textsize="4" />
							</frame>
							-->
						</frame>

					</frame>

					<frame posn="64">

						<frame posn="0 3">
							<label id="goldvalue" posn="-110 -5" halign="left" valign="center2" text="" textcolor="fa0" textsize="3"  sizen="24 5"/>
							<quad posn="-120 0 0" sizen="9 9" bgcolor="FFFA" image="file://Media/Manialinks/ShootMania/Warlords/Textures/Info/Gold.png"/>
						</frame>
						<frame id="ready"posn="-5 0" hidden="1">
							<label id="btn-ready" posn="-20 1 1" sizen="32 5" text="END TURN" halign="left" style="TextButtonBig" valign="center2" textsize="1"/>
							<quad id="readyicon" posn="5 1 1" sizen="6 6" bgcolor="FFFA" style="Icons128x128_1" substyle="BackFocusable" valign="center" halign="left" rot="180" />
							<quad id="btn-readyBG" posn="-26 1 0" sizen="34 19" image="file://Media/Manialinks/ShootMania/Warlords/Textures/Info/NextTurnButton.png" valign="center" halign="left" scriptevents="1" />
						</frame>
					</frame>


				</frame>

				<quad id="panel" posn="0 0 0" sizen="158.6 15.4" halign="center" valign="bottom" bgcolor="f00" image="{( PanelImageUrl )}" />

			</frame>

		</frame>

	</frame>

	<script><!--

		#Include "MathLib" as ML
		#Include "TextLib" as TL
		#Include "AnimLib" as AL

		// ---------------------------------- //

		#Const C_CastlesCountRefreshPeriod			1000
		#Const C_AnimBetLightDuration				500
		#Const C_SummaryFadeDuration				1000
		#Const C_NewObjectiveFadeDuration			500
		#Const C_InfoGoldAnimationDuration			1000
		#Const C_SummaryGoldAnimationDuration		1000
		#Const C_DonationOpenCloseDuration			500
		#Const C_ReadyVisibilityAnimationDuration	500
		#Const C_TopFrameAnimationDuration			2000
		#Const C_ObjectiveAnimationDuration			1000
		#Const C_ReadyAnimationDuration				500
		#Const C_DonationTimeOut					3000

		#Const C_GoldAnimationShift					3000

		#Const C_PhaseSetup							-1
		#Const C_PhaseDomination					0
		#Const C_PhaseSuddenDeath					1

		#Const C_GoldStep							50

		#Const C_BlitzGold							{( BlitzGold )}
		#Const C_AntiVassalRevolt					{( AntiVassalRevolt )}
		
		#Const C_HistoryYearColor					"$0af"

		#Const C_EmblemBaseUrl						"{( EmblemBaseUrl )}"
		#Const C_HistoryEventsActionsBaseUrl		"{( HistoryEventsActionsBaseUrl )}"
		
		#Const C_RuleTips_NoAction					"Select a planet to take it, attack it, or increase its defenses."
		#Const C_RuleTips_Assault					"Assault: make sure your bet overcomes the defenses on the planet."
		#Const C_RuleTips_Battle					"Capital assault: a battle will be launched unless another player also tries to attack a capital this turn."
		#Const C_RuleTips_Take						"Taking a planet is free. Invest gold only if you think that another player could also claim the planet."
		#Const C_RuleTips_Defenses					"Add defenses to your planets to prevent other players from taking them."
		#Const C_RuleTips_Donate					"Donate gold to allies to help them defend themselves or conquer unreachable planets."
		#Const C_RuleTips_Unreachable				"You cannot act on planets that are not connected to any of your planets."
		#Const C_RuleTips_PlayerCapital				"This is your capital. If another warlord takes it, you will become Vassal of this player."
		#Const C_RuleTips_OpponentCapital			"This is the capital of an opponent. Take it to become Lord of this player and take control over their empire."
		#Const C_RuleTips_YourMaster				"This player is your lord. If they win, you will get a higher ranking at the end of the game."
		#Const C_RuleTips_YourVassal				"This player is your vassal. You can take all of their planets whenever you want, but they will not help you anymore."
		#Const C_RuleTips_DiscardVassal				"Click to take all the planets of your vassal. You will have more planets but your vassal will not help you anymore."
		#Const C_RuleTips_EndTurn					"Click to end this year. Click again to change your action before the timer ends."
		

		// ---------------------------------- //
		/**
		 * Gets the frame which contains all player frame instances.
		 *
		 * @return The player frame instances parent frame.
		 */
		CMlFrame GetPlayerFrameInstancesParentFrame() {
			return (Page.GetFirstChild("players") as CMlFrame);
		}
		
		// ---------------------------------- //
		/**
		 * Gets all player frame instances.
		 *
		 * @return All player frame instances.
		 */
		CMlFrame[] GetPlayerFrameInstances() {
			declare CMlFrame[] Instances;
			declare CMlFrame ParentFrame = GetPlayerFrameInstancesParentFrame();
			foreach (Control in ParentFrame.Controls) {
				if(!(Control is CMlFrame)) continue;
				Instances.add((Control as CMlFrame));
			}
			return Instances;
		}

		// ---------------------------------- //
		/**
		 * Get a player frame instance.
		 *
		 * @param _Id The id of the player frame instance.
		 * @return The corresponding player frame instance.
		 */
		CMlFrame GetPlayerFrameInstance(Integer _Id) {
			return GetPlayerFrameInstances()[_Id];
		}

		// ---------------------------------- //
		/**
		 * Hides all player frame instances.
		 */
		Void HideAllPlayerFrameInstances() {
			foreach (FrameInstance in GetPlayerFrameInstances()) {
				FrameInstance.Hide();
			}
		}

		// ---------------------------------- //
		/**
		 * Gets the label containing a player name in a player frame instance.
		 *
		 * @param _PlayerFrameInstance The player frame instance to get the label from.
		 * @return The player name label.
		 */
		CMlLabel PFI_GetPlayerLoginLabel(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("name") as CMlLabel);
		}

		// ---------------------------------- //
		/**
		 * Gets the label containing the number of possessed castles in a player frame instance.
		 *
		 * @param _PlayerFrameInstance The player frame instance to get the label from.
		 * @return The player castles label.
		 */
		CMlLabel PFI_GetPlayerCastlesCountLabel(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("castlescount") as CMlLabel);
		}

		// ---------------------------------- //
		/**
		 * Gets the quad displaying the action state in a player frame instance.
		 *
		 * @param _PlayerFrameInstance The player frame instance to get the quad from.
		 * @return The action state quad
		 */
		CMlQuad PFI_GetPlayerActionStateQuad(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("state") as CMlQuad);
		}

		// ---------------------------------- //
		/**
		 * Gets the quad containing a player emblem in a player frame instance.
		 *
		 * @param _PlayerFrameInstance The player frame instance to get the quad from.
		 * @return The emblem quad.
		 */
		CMlQuad PFI_GetPlayerEmblemQuad(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("emblem") as CMlQuad);
		}

		// ---------------------------------- //
		/**
		 * Gets the frame containing the vassal label in a player frame instance.
		 *
		 * @param _PlayerFrameInstance The player frame instance to get the frame from.
		 * @return The vassal frame.
		 */
		CMlFrame PFI_GetVassalFrame(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("vassalcontainer") as CMlFrame);
		}

		// ---------------------------------- //
		/**
		 * Gets the label containing the master name in a player frame instance.
		 *
		 * @param _PlayerFrameInstance The player frame instance to get the label from.
		 * @return The vassal label.
		 */
		CMlLabel PFI_GetVassalLabel(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("vassal") as CMlLabel);
		}

		// ---------------------------------- //
		/**
		 * Gets the label containing the gold amount possessed by the player.
		 *
		 * @param _PlayerFrameInstance The player frame to get the label from.
		 * @return The gold label.
		 */
		CMlLabel PFI_GetGoldLabel(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("gold") as CMlLabel);
		}

		// ---------------------------------- //
		/**
		 * Gets the focus light quad in a player frame instance.
		 *
		 * @param _PlayerFrameInstance The player frame instance to get the quad from.
		 * @return The focus light quad.
		 */
		CMlQuad PFI_GetFocusLightQuad(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("focuslight") as CMlQuad);
		}

		// ---------------------------------- //
		/**
		 * Gets the focus text label in a player frame instance.
		 *
		 * @param _PlayerFrameInstance The player frame instance to get the label from.
		 * @return The focus text label.
		 */
		CMlLabel PFI_GetFocusTextQuad(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("focustext") as CMlLabel);
		}

		// ---------------------------------- //
		/**
		 * Gets the bg quad in a player frame instance.
		 *
		 * @param _PlayerFrameInstance The player frame instance to get the quad from.
		 * @return The bg quad.
		 */
		CMlQuad PFI_GetBgQuad(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("playerbg") as CMlQuad);
		}

		// ---------------------------------- //
		/**
		 * Gets the frame instance containing quads to set the amount of gold to donate in a player frame instance.
		 *
		 * @param _PlayerFrameInstance The player frame instance to get the frame instance from.
		 * @return The vassal frame.
		 */
		CMlFrame PFI_GetDonationFrameInstance(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("donation") as CMlFrame);
		}

		// ---------------------------------- //
		/**
		 * Gets the highlight quad in a player frame instance.
		 *
		 * @param _PlayerFrameInstance The player frame instance to get the quad from.
		 * @return The highlight quad.
		 */
		CMlQuad PFI_GetHighlightQuad(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("highlight") as CMlQuad);
		}

		// ---------------------------------- //
		/**
		 * Gets the discard quad in a player frame instance.
		 *
		 * @param _PlayerFrameInstance The player frame instance to get the quad from.
		 * @return The discard quad.
		 */
		CMlQuad PFI_GetBtnDiscard(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("btn-discard") as CMlQuad);
		}

		// ---------------------------------- //
		/**
		 * Changes the player name label value.
		 *
		 * @param _PlayerFrameInstance The concerned player frame instance.
		 * @param _PlayerName The player name to display.
		 */
		Void PFI_SetPlayerName(CMlFrame _PlayerFrameInstance, Text _PlayerName) {
			PFI_GetPlayerLoginLabel(_PlayerFrameInstance).SetText(_PlayerName);
		}

		// ---------------------------------- //
		/**
		 * Changes the castle count label value.
		 *
		 * @param _PlayerFrameInstance The concerned player frame instance
		 * @param _CastlesCount The number of castles to display.
		 */
		Void PFI_SetCastlesCount(CMlFrame _PlayerFrameInstance, Integer _CastlesCount) {
			if (_CastlesCount > 1) {
				//L16N [Players info] The number of planets owned by a player. This text is displayed under a player name. "planets" must be plural. %1 is the number of planets.
				PFI_GetPlayerCastlesCountLabel(_PlayerFrameInstance).SetText(TL::Compose(_("%1 planets"), TL::ToText(_CastlesCount)));
			} else {
				//L16N [Players info] The number of planets owned by a player. This text is displayed under a player name. "planet" must be singular. %1 is the number of planets.
				PFI_GetPlayerCastlesCountLabel(_PlayerFrameInstance).SetText(TL::Compose(_("%1 planet"), TL::ToText(_CastlesCount)));
			}
		}

		// ---------------------------------- //
		/**
		 * Changes the color of the action state quad.
		 *
		 * @param _PlayerFrameInstance The concerned player frame instance.
		 * @param _ReadyState True if the player is ready, False otherwise.
		 * @param _IsVassal True if the player is vassal.
		 */
		Void PFI_SetPlayerActionState(CMlFrame _PlayerFrameInstance, Boolean _ReadyState, Boolean _IsVassal) {
			declare Vec3 Color = <1., 0.1, 0.>;
			if (_ReadyState) Color = <0.1, 1., 0.>;
			if (_IsVassal) Color = <Color.X / 2., Color.Y / 2., Color.Z / 2.>;
			PFI_GetPlayerActionStateQuad(_PlayerFrameInstance).ModulateColor = Color;
		}

		// ---------------------------------- //
		/**
		 * Changes the emblem quad image url.
		 *
		 * @param _PlayerFrameInstance The concerned player frame instance.
		 * @param _EmblemUrl The emblem quad image url.
		 */
		Void PFI_SetEmblemUrl(CMlFrame _PlayerFrameInstance, Text _EmblemUrl) {
			PFI_GetPlayerEmblemQuad(_PlayerFrameInstance).ImageUrl = _EmblemUrl;
		}

		// ---------------------------------- //
		/**
		 * Changes the visibility of the vassal frame.
		 *
		 * @param _PlayerFrameInstance The concerned player frame instance.
		 * @param _Visibility The visibility to apply.
		 */
		Void PFI_ToggleVassalVisibility(CMlFrame _PlayerFrameInstance, Boolean _Visibility) {
			PFI_GetVassalFrame(_PlayerFrameInstance).Visible = _Visibility;
		}

		// ---------------------------------- //
		/**
		 * Changes the player's master name label value.
		 *
		 * @param _PlayerFrameInstance The concerned player frame instance.
		 * @param _MasterName The name to display as master.
		 */
		Void PFI_SetVassalMasterName(CMlFrame _PlayerFrameInstance, Text _MasterName) {
			//L16N [Players info] This text is visible under a player name if he is a vassal. %1 is the master's name.
			PFI_GetVassalLabel(_PlayerFrameInstance).SetText(TL::Compose(_("Vassal of $<%1$>"), _MasterName));
		}

		Text GetGoldLayout(Integer _GoldAmount) {
			return "$s" ^ _GoldAmount;
		}
		
		// ---------------------------------- //
		/**
		 * Changes the player's amoiunt of gold.
		 *
		 * @param _PlayerFrameInstance The concerned player frame instance.
		 * @param _GoldAmount The amount of gold to display for the player.
		 */
		Void PFI_SetGold(CMlFrame _PlayerFrameInstance, Integer _GoldAmount) {
			PFI_GetGoldLabel(_PlayerFrameInstance).SetText(GetGoldLayout(_GoldAmount));
		}

		CMlQuad DFI_GetBetLight(CMlFrame _DonationFrameInstance) {
			return (_DonationFrameInstance.GetFirstChild("betlight") as CMlQuad);
		}

		CMlFrame DFI_GetScaleFrame(CMlFrame _DonationFrameInstance) {
			return (_DonationFrameInstance.GetFirstChild("scaleframe") as CMlFrame);
		}

		CMlLabel DFI_GetInfoLabel(CMlFrame _DonationFrameInstance) {
			return (_DonationFrameInstance.GetFirstChild("infolabel") as CMlLabel);
		}

		CMlQuad DFI_GetPlusQuad(CMlFrame _DonationFrameInstance) {
			return (_DonationFrameInstance.GetFirstChild("plusquad") as CMlQuad);
		}

		CMlQuad DFI_GetMinusQuad(CMlFrame _DonationFrameInstance) {
			return (_DonationFrameInstance.GetFirstChild("minusquad") as CMlQuad);
		}

		CMlFrame GetPlayerFrameInstanceFromBg(CMlControl _Bg) {
			foreach (PlayerFrameInstance in GetPlayerFrameInstances()) {
				if (PFI_GetBgQuad(PlayerFrameInstance) == _Bg) return PlayerFrameInstance;
			}
			return Null;
		}

		CMlFrame GetPlayerFrameInstanceFromDiscardQuad(CMlControl _BtnDiscard) {
			foreach (PlayerFrameInstance in GetPlayerFrameInstances()) {
				if (PFI_GetBtnDiscard(PlayerFrameInstance) == _BtnDiscard) return PlayerFrameInstance;
			}
			return Null;
		}

		Integer GetPlayerId(CMlFrame _PlayerFrameInstance) {
			declare Integer PlayerId for _PlayerFrameInstance;
			return PlayerId;
		}

		Integer GetPlayerIdFromBg(CMlControl _Bg) {
			declare CMlFrame PlayerFrameInstance = GetPlayerFrameInstanceFromBg(_Bg);
			return GetPlayerId(PlayerFrameInstance);
		}

		CMlFrame GetBlitzFrame() {
			return (Page.GetFirstChild("blitzcontainer") as CMlFrame);
		}

		CMlLabel GetBlitzValueLabel() {
			return (Page.GetFirstChild("blitzvalue") as CMlLabel);
		}

		CMlGauge GetBlitzGauge() {
			return (Page.GetFirstChild("blitzgauge") as CMlGauge);
		}

		CMlFrame GetHistoryEventFrameInstancesParentFrame() {
			return (Page.GetFirstChild("historyevents") as CMlFrame);
		}

		CMlFrame[] GetHistoryEventFrameInstances() {
			declare CMlFrame[] HistoryEventFrameInstances;
			foreach (Control in GetHistoryEventFrameInstancesParentFrame().Controls) {
				if (!(Control is CMlFrame)) continue;
				HistoryEventFrameInstances.add((Control as CMlFrame));
			}
			return HistoryEventFrameInstances;
		}

		CMlFrame GetHistoryEventFrameInstance(Integer _Index) {
			return GetHistoryEventFrameInstances()[_Index];
		}

		CMlLabel HEFI_GetYearLabel(CMlFrame _HistoryEventFrameInstance) {
			return (_HistoryEventFrameInstance.GetFirstChild("year") as CMlLabel);
		}

		CMlQuad HEFI_GetEmblemQuad(CMlFrame _HistoryEventFrameInstance) {
			return (_HistoryEventFrameInstance.GetFirstChild("playeremblem") as CMlQuad);
		}

		CMlLabel HEFI_GetPlayerLabel(CMlFrame _HistoryEventFrameInstance) {
			return (_HistoryEventFrameInstance.GetFirstChild("playername") as CMlLabel);
		}

		CMlQuad HEFI_GetActionQuad(CMlFrame _HistoryEventFrameInstance) {
			return (_HistoryEventFrameInstance.GetFirstChild("action") as CMlQuad);
		}

		CMlLabel HEFI_GetCastleLabel(CMlFrame _HistoryEventFrameInstance) {
			return (_HistoryEventFrameInstance.GetFirstChild("castlename") as CMlLabel);
		}

		CMlQuad HEFI_GetHoverQuad(CMlFrame _HistoryEventFrameInstance) {
			return (_HistoryEventFrameInstance.GetFirstChild("hover") as CMlQuad);
		}

		CMlQuad HEFI_GetNewYearQuad(CMlFrame _HistoryEventFrameInstance) {
			return (_HistoryEventFrameInstance.GetFirstChild("newyear") as CMlQuad);
		}

		CMlFrame GetHistoryEventFrameInstanceFromHoverQuad(CMlControl _HoverQuad) {
			foreach (HistoryEventFrameInstance in GetHistoryEventFrameInstances()) {
				if (HEFI_GetHoverQuad(HistoryEventFrameInstance) == _HoverQuad) return HistoryEventFrameInstance;
			}
			return Null;
		}

		// ---------------------------------- //
		/**
		 * 
		 *
		 * @param 
		 * @return 
		 */
		CMlFrame GetTopFrame() {
			return (Page.GetFirstChild("top") as CMlFrame);
		}

		// ---------------------------------- //
		/**
		 * 
		 *
		 * @param 
		 * @return 
		 */
		CMlQuad GetTopLightQuad() {
			return (Page.GetFirstChild("toplight") as CMlQuad);
		}

		// ---------------------------------- //
		/**
		 * Gets the label containing the current year.
		 *
		 * @return The current year label.
		 */
		CMlLabel GetCurrentYearLabel() {
			return (Page.GetFirstChild("currentyear") as CMlLabel);
		}

		// ---------------------------------- //
		/**
		 * Gets the label containing the last year.
		 *
		 * @return The last year label.
		 */
		CMlLabel GetLastYearLabel() {
			return (Page.GetFirstChild("lastyear") as CMlLabel);
		}

		// ---------------------------------- //
		/**
		 * Gets the label containing the limit year.
		 *
		 * @return The limit year label.
		 */
		CMlLabel GetLimitYearLabel() {
			return (Page.GetFirstChild("limityear") as CMlLabel);
		}

		// ---------------------------------- //
		/**
		 * Gets the label containing the objective.
		 *
		 * @return The objective label.
		 */
		CMlLabel GetObjectiveLabel() {
			return (Page.GetFirstChild("objective") as CMlLabel);
		}

		// ---------------------------------- //
		/**
		 * Gets the label containing the local player's gold.
		 *
		 * @return The gold label.
		 */
		CMlLabel GetGoldValueLabel() {
			return (Page.GetFirstChild("goldvalue") as CMlLabel);
		}

		CMlFrame GetReadyFrame() {
			return (Page.GetFirstChild("ready") as CMlFrame);
		}

		CMlLabel GetBtnReady() {
			return (Page.GetFirstChild("btn-ready") as CMlLabel);
		}

		CMlQuad GetReadyArrow() {
			return (Page.GetFirstChild("readyicon") as CMlQuad);
		}		
		
		CMlLabel GetReadyLabel() {
			return (Page.GetFirstChild("btn-ready") as CMlLabel);
		}

		// ---------------------------------- //
		/**
		 * @deprecated
		 */
		CMlLabel GetTurnPlayerCastlesLabel() {
			return (Page.GetFirstChild("localplayercastles") as CMlLabel);
		}

		CMlLabel GetHistoryLabel() {
			return (Page.GetFirstChild("history") as CMlLabel);
		}
		
		CMlLabel GetRulesTipsLabel() {
			return (Page.GetFirstChild("RulesTips") as CMlLabel);
		}

		// ---------------------------------- //
		/**
		 * Changes the current year label value.
		 *
		 * @param _CurrentYear The value to display.
		 */
		Void SetCurrentYear(Integer _CurrentYear) {
			declare Text TextYear = TL::ToText(_CurrentYear);

			GetCurrentYearLabel().SetText(TextYear);
		}

		// ---------------------------------- //
		/**
		 * Changes the limit year label value.
		 *
		 * @param _LimitYear The year value to display.
		 */
		Void SetLimitYear(Integer _LimitYear) {
			//L16N [Rules] This text is displayed on the top right corner. %1 is the limit year.
			declare Text TextContent = TL::Compose(_("Limit year: %1"), TL::ToText(_LimitYear));
			GetLimitYearLabel().SetText(TextContent);
		}

		// ---------------------------------- //
		/**
		 * Changes the objective label value.
		 *
		 * @param _TextContent The text to display.
		 */
		Void SetObjective(Text _TextContent) {
			GetObjectiveLabel().SetText(_TextContent);
			declare Integer Cli_UI_L_NewObjectiveTimestamp for UI;
			Cli_UI_L_NewObjectiveTimestamp = Now;
		}

		// ---------------------------------- //
		/**
		 * Changes the local player gold label value.
		 *
		 * @param _GoldAmount The gold amount to display.
		 */
		Void SetInfoGoldLabelValue(Integer _GoldAmount) {
			declare Text TextContent =  GetGoldLayout(_GoldAmount);
			GetGoldValueLabel().SetText(TextContent);
		}

		// ---------------------------------- //
		/**
		 * Changes both gold labels values.
		 *
		 * @param _GoldAmount The gold amount to display.
		 */
		Void SetGoldLabelsValue(Integer _GoldAmount) {
			SetInfoGoldLabelValue(_GoldAmount);
		}

		// ---------------------------------- //
		/**
		 * Gets the local player's bet gold amount.
		 *
		 * @return The gold amount.
		 */
		Integer GetBet() {
			declare netwrite Integer Cli_Player_P_Bet for UI;
			return Cli_Player_P_Bet;
		}

		// ---------------------------------- //
		/**
		 * Count all the placed gold.
		 *
		 * @param _CastleId The concerned castle.
		 * @param _Amount The amount of gold to substract.
		 */
		Integer World_CountCastlesGoldAdditions() {
			declare netwrite Integer[Integer]	Cli_World_P_CastleDefenseGoldAddition		for UI;
			declare Integer GoldAmountPlacedOnCastles;

			foreach (CastleId => GoldAmount in Cli_World_P_CastleDefenseGoldAddition) {
				GoldAmountPlacedOnCastles += GoldAmount;
			}

			return GoldAmountPlacedOnCastles;
		}

		// ---------------------------------- //
		/**
		 * Get the local player's id.
		 *
		 * @return The local player's id.
		 */
		Integer GetInputPlayerId() {
			declare netread Text[Integer] Srv_Player_G_Players for Teams[0];

			if (!Srv_Player_G_Players.exists(LocalUser.Login)) {
				// Do not spam log please; log("the input player isn't initialized");
				return -1;
			}

			return Srv_Player_G_Players.keyof(LocalUser.Login);
		}

		// ---------------------------------- //
		/**
		 * Gets the amount of gold possessed by the given player.
		 *
		 * @param _PlayerId The player to get the amount of gold from.
		 * @return The amount of gold.
		 */
		Integer GetPlayerGold(Integer _PlayerId) {
			declare netread Integer[Integer] Srv_Player_G_PlayersGold for Teams[0];
			if (!Srv_Player_G_PlayersGold.existskey(_PlayerId)) return -1;
			return Srv_Player_G_PlayersGold[_PlayerId];
		}

		// ---------------------------------- //
		/**
		 * Gets the local player's gold amount.
		 *
		 * @return The gold amount.
		 */
		Integer GetInputPlayerGold() {
			return GetPlayerGold(GetInputPlayerId());
		}

		Void DumpDonationOnPlayer(Integer _PlayerId) {
			declare netwrite Integer[Integer] Cli_Player_P_GoldDonations for UI;
			Cli_Player_P_GoldDonations[_PlayerId] = 0;
		}

		Void DumpDonationOnAllPlayers() {
			declare netread Text[Integer] Srv_Player_G_Players for Teams[0];
			for (PlayerId, 0, Srv_Player_G_Players.count - 1) {
				DumpDonationOnPlayer(PlayerId);
			}
		}

		Integer GetGoldDonationOnPlayer(Integer _PlayerId) {
			declare netwrite Integer[Integer] Cli_Player_P_GoldDonations for UI;
			if (Cli_Player_P_GoldDonations.existskey(_PlayerId)) return Cli_Player_P_GoldDonations[_PlayerId];
			return 0;
		}

		Integer GetTotalGoldDonation() {
			declare netread Text[Integer] Srv_Player_G_Players for Teams[0];
			declare Integer GoldSum;
			for (PlayerId, 0, Srv_Player_G_Players.count - 1) {
				GoldSum += GetGoldDonationOnPlayer(PlayerId);
			}
			return GoldSum;
		}

		Void AddGoldDonationOnPlayer(Integer _PlayerId, Integer _GoldAmount) {
			declare netwrite Integer[Integer] Cli_Player_P_GoldDonations for UI;

			declare Integer AvailableGoldAmount = GetPlayerGold(GetInputPlayerId()) - GetTotalGoldDonation() - World_CountCastlesGoldAdditions() - GetBet();
			AvailableGoldAmount -= AvailableGoldAmount % C_GoldStep;

			if (AvailableGoldAmount <= 0) return;
			
			declare Amount = _GoldAmount;
			if (Amount > AvailableGoldAmount) Amount = AvailableGoldAmount;

			if (Cli_Player_P_GoldDonations.existskey(_PlayerId)) {
				Cli_Player_P_GoldDonations[_PlayerId] += Amount;
			} else {
				Cli_Player_P_GoldDonations[_PlayerId] = Amount;
			}
		}

		Void SubGoldDonationOnPlayer(Integer _PlayerId, Integer _GoldAmount) {
			declare netwrite Integer[Integer] Cli_Player_P_GoldDonations for UI;
			if (Cli_Player_P_GoldDonations.existskey(_PlayerId)) {
				Cli_Player_P_GoldDonations[_PlayerId] -= _GoldAmount;
				if (Cli_Player_P_GoldDonations[_PlayerId] < 0) Cli_Player_P_GoldDonations[_PlayerId] = 0;
			}
		}

		Void Plus() {
			declare Integer Cli_UI_L_CurrentDonationPlayerId			for UI;
			declare Integer Cli_UI_L_LastDonationPlusClickTimestamp		for UI;
			declare Integer Cli_UI_L_LastDonationValueChangeTimestamp	for UI;
			declare Integer Cli_UI_L_RefreshTakeQuads					for UI;

			AddGoldDonationOnPlayer(Cli_UI_L_CurrentDonationPlayerId, C_GoldStep);
			Cli_UI_L_LastDonationPlusClickTimestamp		= Now;
			Cli_UI_L_LastDonationValueChangeTimestamp	= Now;

			Audio.PlaySoundEvent(CAudioManager::ELibSound::ScoreIncrease, 0, 0.);
			Cli_UI_L_RefreshTakeQuads = Now;
		}

		Void Minus() {
			declare Integer Cli_UI_L_CurrentDonationPlayerId			for UI;
			declare Integer Cli_UI_L_LastDonationMinusClickTimestamp	for UI;
			declare Integer Cli_UI_L_LastDonationValueChangeTimestamp	for UI;
			declare Integer Cli_UI_L_RefreshTakeQuads					for UI;

			SubGoldDonationOnPlayer(Cli_UI_L_CurrentDonationPlayerId, C_GoldStep);
			Cli_UI_L_LastDonationMinusClickTimestamp	= Now;
			Cli_UI_L_LastDonationValueChangeTimestamp	= Now;

			Audio.PlaySoundEvent(CAudioManager::ELibSound::ScoreIncrease, 0, 0.);
			Cli_UI_L_RefreshTakeQuads = Now;
		}

		// ---------------------------------- //
		/**
		 * Gets the name of a player.
		 *
		 * @param _PlayerId The id used to find the player.
		 * @return The player name.
		 */
		Text GetPlayerLogin(Integer _PlayerId) {
			declare netread Text[Integer] Srv_Player_G_Players for Teams[0];
			if (Srv_Player_G_Players.existskey(_PlayerId)) return Srv_Player_G_Players[_PlayerId];
			return "";
		}

		Boolean AreCastlesLinked(Integer _Castle1Id, Integer _Castle2Id) {
			declare netread Int3[] Srv_World_G_Links for Teams[0];

			foreach (Link in Srv_World_G_Links) {
				
				if ((Link.X == _Castle1Id && Link.Y == _Castle2Id) || (Link.X == _Castle2Id && Link.Y == _Castle1Id)) {
					return True;
				}

			}

			return False;
		}

		Integer[] GetPlayerCastles(Integer _PlayerId) {
			declare Integer[] PlayerCastles;
			declare netread Int3[Integer] Srv_World_G_CastleAttributes for Teams[0];
			foreach (CastleId => CastleAttr in Srv_World_G_CastleAttributes) {
				if (CastleAttr.X == _PlayerId) PlayerCastles.add(CastleId);
			}
			return PlayerCastles;
		}

		Boolean IsCastleAccessible(Integer _AimedCastleId, Integer _PlayerId) {
			foreach (CastleId in GetPlayerCastles(_PlayerId)) {
				if (AreCastlesLinked(_AimedCastleId, CastleId)) return True;
			}
			return False;
		}

		// ---------------------------------- //
		/**
		 * Checks if a castle is a capital
		 *
		 * @param _CastleId The castle id to check.
		 * @return True if the castle is a capital, False otherwise.
		 */
		Boolean IsCastleCapital(Integer _CastleId) {
			declare netread Int3[Integer] Srv_World_G_CastleAttributes for Teams[0];
			if (Srv_World_G_CastleAttributes.existskey(_CastleId)) return (Srv_World_G_CastleAttributes[_CastleId].Z == 1);
			return False;
		}

		Int3 GetAction() {
			declare netwrite Int3 Cli_Action_P_Action for UI;
			return Cli_Action_P_Action;
		}

		Boolean HasBlitzed() {
			declare Integer ActionCastleId = GetAction().Z;
			return ActionCastleId != -1 && IsCastleCapital(ActionCastleId) && !IsCastleAccessible(ActionCastleId, GetInputPlayerId());
		}

		// ---------------------------------- //
		/**
		 * Gets the gold value to display.
		 *
		 * @return The gold value to display.
		 */
		Integer GetGoldValueToDisplay() {

			declare netwrite Integer[Integer] Cli_World_P_CastleDefenseGoldAddition for UI;
			declare Integer CastlesGoldAdditions;

			foreach (CastleId => GoldAmount in Cli_World_P_CastleDefenseGoldAddition) {
				CastlesGoldAdditions += GoldAmount; // Substracts what the player has put on his castles.
			} // here

			declare Integer BlitzGold;
			if (HasBlitzed()) BlitzGold = C_BlitzGold;

			declare Integer GoldAmount = GetInputPlayerGold() - GetTotalGoldDonation() - CastlesGoldAdditions - GetBet() - BlitzGold;
			return GoldAmount;
		}

		// ---------------------------------- //
		/**
		 * Gets the gold value to display.
		 *
		 * @return The gold value to display.
		 */
		Integer GetGoldValueToDisplayForBlitz() {

			declare netwrite Integer[Integer] Cli_World_P_CastleDefenseGoldAddition for UI;
			declare Integer CastlesGoldAdditions;

			foreach (CastleId => GoldAmount in Cli_World_P_CastleDefenseGoldAddition) {
				CastlesGoldAdditions += GoldAmount; // Substracts what the player has put on his castles.
			} // here

			declare Integer GoldAmount = GetInputPlayerGold() - GetTotalGoldDonation() - CastlesGoldAdditions;
			return GoldAmount;
		}

		// ---------------------------------- //
		/**
		 * Gets the remaining gold usable for a bet.
		 *
		 * @return The gold amount.
		 */
		Integer GetAvailableGoldForBet() {
			declare Integer BlitzGold;
			declare Integer ActionCastleId = GetAction().Z;

			if (HasBlitzed() && ActionCastleId > -1 && IsCastleCapital(ActionCastleId)) {
				BlitzGold = C_BlitzGold;
			}
			return GetInputPlayerGold() - World_CountCastlesGoldAdditions() - GetTotalGoldDonation() - BlitzGold;
		}

		// ---------------------------------- //
		/**
		 * Count a player's castles.
		 *
		 * @param _PlayerId The concerned player's id.
		 * @return The number of castles possessed by the given player.
		 */
		Integer CountPlayerCastles(Integer _PlayerId) {
			declare Integer Count = 0;
			declare netread Int3[Integer] Srv_World_G_CastleAttributes for Teams[0];

			foreach (CastleAttr in Srv_World_G_CastleAttributes) {
				declare Integer CastleOwnerId = CastleAttr.X;
				if (_PlayerId == CastleOwnerId) Count += 1;
			}

			return Count;
		}

		// ---------------------------------- //
		/**
		 * Checks if a player is vassal.
		 *
		 * @param _PlayerId The player's id to check.
		 * @return True if the player is vassal, False otherwise.
		 */
		Boolean IsPlayerVassal(Integer _PlayerId) {
			declare netread Integer[Integer] Srv_Player_G_Vassals for Teams[0];
			return Srv_Player_G_Vassals.existskey(_PlayerId);
		}

		// ---------------------------------- //
		/**
		 * Gets a vassal player's master.
		 *
		 * @param _PlayerId The player's id to get the master from.
		 * @return The master player's id.
		 */
		Integer GetPlayerMasterId(Integer _PlayerId) {
			declare netread Integer[Integer] Srv_Player_G_Vassals for Teams[0];
			return Srv_Player_G_Vassals[_PlayerId];
		}

		// ---------------------------------- //
		/**
		 * Gets the color of a player.
		 *
		 * @param _PlayerId The player's id to get the color from.
		 * @return The player color.
		 */
		Vec3 GetPlayerColor(Integer _PlayerId) {
			declare Vec3 Color;
			switch (_PlayerId + 1) {
				case 1: Color = <0., 0.75, 1.>;
				case 2:	Color = <1., 0.75, 0.25>;
				case 3:	Color = <1., 0.25, 0.25>;
				case 4:	Color = <1., 0.25, 1.>;
				case 5:	Color = <0.25, 1., 0.25>;
				case 6:	Color = <0.5, 1., 1.>;
			}
			return Color;
		}

		// ---------------------------------- //
		/**
		 * Gets a player's emblem URL.
		 *
		 * @param _OwnerId The player's id to get the emblem URL from.
		 * @return The emblem URL.
		 */
		Text GetEmblemUrl(Integer _OwnerId) {
			return C_EmblemBaseUrl ^ _OwnerId + 1 ^ ".dds";
		}

		// ---------------------------------- //
		/**
		 * Get the server's player logins.
		 *
		 * @return The players.
		 */
		Text[Integer] GetPlayers() {
			declare netread Text[Integer] Srv_Player_G_Players for Teams[0];
			return Srv_Player_G_Players;
		}

		Void AskToGiveTo(Integer _PlayerId) {
			declare Integer Cli_UI_L_CurrentDonationPlayerId	for UI;
			declare Integer Cli_UI_L_CurrentDonationTimestamp	for UI;
			Cli_UI_L_CurrentDonationPlayerId = _PlayerId;
			Cli_UI_L_CurrentDonationTimestamp = Now;
			
			declare CMlFrame PlayerFrameInstance = GetPlayerFrameInstance(_PlayerId);
			declare CMlFrame DonationFrameInstance = PFI_GetDonationFrameInstance(PlayerFrameInstance);
			DonationFrameInstance.Show();
		}

		CPlayer GetPlayer(Integer _PlayerId) {
			declare Text PlayerLogin = GetPlayerLogin(_PlayerId);
			foreach (Player in Players) {
				if (Player.User.Login == PlayerLogin) return Player;
			}
			return Null;
		}

		Text GetPlayerName(Integer _PlayerId) {
			declare Text PlayerLogin = GetPlayerLogin(_PlayerId);
			foreach (Player in Players) {
				if (Player.User.Login == PlayerLogin) return Player.User.Name;
			}
			return PlayerLogin;
		}

		Text GetListedNames(Integer[] _PlayerIds) {
			declare Text ListedNames;
			
			foreach (Index => PlayerId in _PlayerIds) {
				if (Index > 0) ListedNames ^= ", ";
				ListedNames ^= "$<" ^ GetPlayerName(PlayerId) ^ "$>";
			}
			
			return ListedNames;
		}

		Text GetCastleName(Integer _CastleId) {
			declare netread Text[] Srv_World_G_Castles for Teams[0];
			return Srv_World_G_Castles[_CastleId];
		}

		Void HistoryRefresh() {
			declare CMlFrame[] HistoryEventFrameInstances = GetHistoryEventFrameInstances();

			declare Integer[]	Cli_UI_L_HistoryEventsYear			as HEYear			for UI;
			declare Integer[]	Cli_UI_L_HistoryEventsType			as HEType			for UI;
			declare Integer[][]	Cli_UI_L_HistoryEventsPlayerIds		as HEPlayerIds		for UI;
			declare Integer[]	Cli_UI_L_HistoryEventsCastleId		as HECastleId		for UI;
			declare Integer[]	Cli_UI_L_HistoryEventsGoldAmount	as HEGoldAmount		for UI;

			for (Index, 1, HistoryEventFrameInstances.count) {

				declare CMlFrame	CurrentHistoryFrameInstance	= HistoryEventFrameInstances[Index - 1];
				declare CMlLabel	CurrentYearLabel	= HEFI_GetYearLabel(CurrentHistoryFrameInstance);
				declare CMlQuad		CurrentEmblemQuad	= HEFI_GetEmblemQuad(CurrentHistoryFrameInstance);
				declare CMlLabel	CurrentPlayerLabel	= HEFI_GetPlayerLabel(CurrentHistoryFrameInstance);
				declare CMlQuad		CurrentActionQuad	= HEFI_GetActionQuad(CurrentHistoryFrameInstance);
				declare CMlLabel	CurrentCastleLabel	= HEFI_GetCastleLabel(CurrentHistoryFrameInstance);
				declare CMlQuad		CurrentNewYearQuad	= HEFI_GetNewYearQuad(CurrentHistoryFrameInstance);

				declare Integer[]	PlayerIds	as CurrentPlayerIds	for CurrentHistoryFrameInstance;
				declare Integer		CastleId	as CurrentCastleId	for CurrentHistoryFrameInstance;

				declare Text YearLabelValue;
				declare Text EmblemImageUrl;
				declare Text PlayerLabelValue;
				declare Text ActionImageUrl;
				declare Text CastleLabelValue;
				declare Boolean IsNewYearQuadVisible;
				if (HEType.count - Index >= 0) {
					// If there is an event on this position.
					if (HEType[HEType.count - Index] == 2) {
						PlayerLabelValue		= _("Welcome to Warlords!");
						CurrentCastleId			= -1;
						CastleLabelValue		= "";
					} else {
						if (HEPlayerIds[HEPlayerIds.count - Index].count == 1) {
							EmblemImageUrl		= GetEmblemUrl(HEPlayerIds[HEPlayerIds.count - Index][0]);
						}
						PlayerLabelValue		= GetListedNames(HEPlayerIds[HEPlayerIds.count - Index]);
						ActionImageUrl			= C_HistoryEventsActionsBaseUrl ^ HEType[HEType.count - Index] ^ ".png";
						CurrentCastleId			= HECastleId[HECastleId.count - Index];
						CastleLabelValue		= GetCastleName(HECastleId[HECastleId.count - Index]);
					}

					YearLabelValue				= "Y " ^ C_HistoryYearColor ^ HEYear[HEYear.count - Index];
					CurrentPlayerIds			= HEPlayerIds[HEPlayerIds.count - Index];

					IsNewYearQuadVisible		= (HEYear.count - Index - 1 >= 0 && HEYear[HEYear.count - Index - 1] != HEYear[HEYear.count - Index]);

				} else {
					CurrentPlayerIds.clear();
				}
				
				CurrentYearLabel.Value		= YearLabelValue;
				CurrentEmblemQuad.ImageUrl	= EmblemImageUrl;
				CurrentPlayerLabel.Value	= PlayerLabelValue;
				CurrentActionQuad.ImageUrl	= ActionImageUrl;
				CurrentCastleLabel.Value	= CastleLabelValue;
				CurrentNewYearQuad.Visible	= IsNewYearQuadVisible;
			}
		}

		Void HistoryAppend(Integer _Year, Integer _Type, Integer[] _PlayerIds, Integer _CastleId, Integer _GoldAmount) {

			declare Integer[]	Cli_UI_L_HistoryEventsYear			for UI;
			declare Integer[]	Cli_UI_L_HistoryEventsType			for UI;
			declare Integer[][]	Cli_UI_L_HistoryEventsPlayerIds		for UI;
			declare Integer[]	Cli_UI_L_HistoryEventsCastleId		for UI;
			declare Integer[]	Cli_UI_L_HistoryEventsGoldAmount	for UI;
			
			Cli_UI_L_HistoryEventsYear.add(_Year);
			Cli_UI_L_HistoryEventsType.add(_Type);
			Cli_UI_L_HistoryEventsPlayerIds.add(_PlayerIds);
			Cli_UI_L_HistoryEventsCastleId.add(_CastleId);
			Cli_UI_L_HistoryEventsGoldAmount.add(_GoldAmount);
		}

		Void HistoryReset() {
			declare Integer[]	Cli_UI_L_HistoryEventsYear			for UI;
			declare Integer[]	Cli_UI_L_HistoryEventsType			for UI;
			declare Integer[][]	Cli_UI_L_HistoryEventsPlayerIds		for UI;
			declare Integer[]	Cli_UI_L_HistoryEventsCastleId		for UI;
			declare Integer[]	Cli_UI_L_HistoryEventsGoldAmount	for UI;

			Cli_UI_L_HistoryEventsYear.clear();
			Cli_UI_L_HistoryEventsType.clear();
			Cli_UI_L_HistoryEventsPlayerIds.clear();
			Cli_UI_L_HistoryEventsCastleId.clear();
			Cli_UI_L_HistoryEventsGoldAmount.clear();
		}

		Void HighlightHistoryEvent(Integer[] _PlayerIds, Integer _CastleId) {
			declare Integer[]	Cli_UI_L_HistoryEventHighlightPlayerIds	for UI;
			declare Integer		Cli_UI_L_HistoryEventHighlightCastleId	for UI;

			Cli_UI_L_HistoryEventHighlightPlayerIds	= _PlayerIds;
			Cli_UI_L_HistoryEventHighlightCastleId	= _CastleId;
		}

		Void StopHighlightHistoryEvent() {
			declare Integer[]	Cli_UI_L_HistoryEventHighlightPlayerIds	for UI;
			declare Integer		Cli_UI_L_HistoryEventHighlightCastleId	for UI;

			Cli_UI_L_HistoryEventHighlightPlayerIds.clear();
			Cli_UI_L_HistoryEventHighlightCastleId	= -1;
		}

		// ---------------------------------- //
		/**
		 * Checks if there are players initialized.
		 *
		 * @return True if players are initialized, False otherwise.
		 */
		Boolean ArePlayersInitialized() {
			return (GetPlayers().count > 0);
		}

		Void DiscardVassal(Integer _VassalId) {
			declare netwrite Integer Cli_Player_P_Discard for UI;
			Cli_Player_P_Discard = _VassalId;
		}

		Void ResetDiscardedVassal() {
			DiscardVassal(-1);
		}

		Boolean IsSpec() {
			return (GetInputPlayerId() == -1);
		}
		
		Boolean BlitzAllowed() {
			return C_BlitzGold >= 0;
		}

		// ---------------------------------- //
		/**
		 * Function that must be called on the script's start.
		 */
		Void Init() {

			while (InputPlayer == Null) { yield; }
			while (InputPlayer.User == Null) { yield; }
			while (!ArePlayersInitialized()) { yield; }

			declare Boolean IsSpec = IsSpec();

			GetReadyFrame().Hide();

			GetBlitzFrame().Visible = !IsSpec && BlitzAllowed();
			GetBlitzValueLabel().SetText(GetGoldLayout(C_BlitzGold));

			declare Integer Cli_UI_L_CurrentDonationPlayerId	for UI;
			Cli_UI_L_CurrentDonationPlayerId = -1;

			declare Integer Cli_UI_L_LastGamePhase for UI;
			Cli_UI_L_LastGamePhase = -2;

			declare netread Integer	Srv_Game_G_HistoryEventTimestamp		for Teams[0];
			declare Integer			Cli_Game_L_LastHistoryEventTimestamp	for UI;
			Cli_Game_L_LastHistoryEventTimestamp = Srv_Game_G_HistoryEventTimestamp;
			// HistoryReset(); // EG: nop, sinon on perd l'historique en revenant de la bataille. Tant pis.
			
			foreach (HistoryEventFrameInstance in GetHistoryEventFrameInstances()) {
				declare Integer CastleId for HistoryEventFrameInstance;
				CastleId = -1;
			}
						
			StopHighlightHistoryEvent();

			DumpDonationOnAllPlayers();

			declare CMlQuad Emblem <=> (Page.GetFirstChild("localplayeremblem") as CMlQuad);
			Emblem.ImageUrl = GetEmblemUrl(GetInputPlayerId());

			declare CMlLabel LocalPlayerLabel <=> (Page.GetFirstChild("localplayer") as CMlLabel);
			LocalPlayerLabel.SetText(InputPlayer.User.Name);

			ResetDiscardedVassal();
			HistoryRefresh();

			declare Text[Integer] InitializedPlayers;
			while (InitializedPlayers.count == 0) {
				yield;
				InitializedPlayers = GetPlayers();
			}

			foreach (Id => PlayerLogin in InitializedPlayers) {

				declare Text PlayerName = PlayerLogin;

				foreach (Player in Players) {
					if (Player.User.Login == PlayerLogin) {
						PlayerName = Player.User.Name;
						break;
					}
				}

				declare CMlFrame FrameInstance = GetPlayerFrameInstance(Id);
				PFI_SetPlayerName(FrameInstance, PlayerName);
				PFI_SetCastlesCount(FrameInstance, CountPlayerCastles(Id));
				PFI_SetEmblemUrl(FrameInstance, GetEmblemUrl(Id));
				FrameInstance.Show();
			}

			if (!IsSpec) {
				SetGoldLabelsValue(GetInputPlayerGold());
			}

			declare Integer Cli_UI_L_LastYear				for UI;
			Cli_UI_L_LastYear = -1;


			declare netread Integer Srv_Game_G_MaxYearsCount	for Teams[0];
			declare netread Integer Srv_World_G_StartYear		for Teams[0];

			SetLimitYear(Srv_World_G_StartYear + Srv_Game_G_MaxYearsCount);
		}

		Integer GetGamePhase() {
			declare netread Integer Srv_Game_G_Phase for Teams[0];
			return Srv_Game_G_Phase;
		}

		Void SetReady(Boolean _ReadyState) {
			declare netwrite Boolean	Cli_Player_P_Ready				for UI;
			declare Integer				Cli_UI_L_ReadyChangeTimestamp	for UI;
			Cli_Player_P_Ready = _ReadyState;
			Cli_UI_L_ReadyChangeTimestamp = Now;
		}

		Boolean IsReady() {
			declare netwrite Boolean Cli_Player_P_Ready for UI;
			return Cli_Player_P_Ready;
		}

		Void HideGauge() {
			declare Integer Cli_UI_L_CurrentDonationPlayerId for UI;
			declare Integer Cli_UI_L_HideGaugeTimestamp for UI;
			if (Cli_UI_L_HideGaugeTimestamp != -1) return;
			Cli_UI_L_CurrentDonationPlayerId = -1;
			Cli_UI_L_HideGaugeTimestamp = Now;
		}

		// ---------------------------------- //
		/**
		 * Function that must be called on each loop start.
		 */
		Void LoopStart() {

			declare Boolean IsSpec = IsSpec();

			// ---------------------------------- //
			// Objective.

			declare netread Integer	Srv_Game_G_CastleNumberRequiredToWin	for Teams[0];
			declare Integer	Cli_UI_L_LastGamePhase							for UI;
			declare Integer	Cli_UI_L_LastGamePhaseTimestamp					for UI;
			
			declare Integer GamePhase = GetGamePhase();

			if (Cli_UI_L_LastGamePhase != GamePhase) {
				Cli_UI_L_LastGamePhase = GamePhase;
				Cli_UI_L_LastGamePhaseTimestamp = Now;
				
				declare Text Objective;
				switch (GamePhase) {
					case C_PhaseSetup: {
						//L16N [Info] The text displayed in the upper right corner, to inform the player of the current rules.
						Objective =_("Objective: Select a start point for your capital.");
					}
					case C_PhaseDomination: {
						//L16N [Info] The text displayed in the upper right corner, to inform the player of the current rules. %1 is a number of planets.
						Objective = TL::Compose(_("Objective: Be the first to own %1 planets"), TL::ToText(Srv_Game_G_CastleNumberRequiredToWin));
					}
					case C_PhaseSuddenDeath: {
						//L16N [Info] The text displayed in the upper right corner, to inform the player of the current rules.
						Objective = _("Objective: Own more planets than other players");
					}
				}

				SetObjective(Objective);
			}


			// ---------------------------------- //
			// Players refresh.

			declare Integer Cli_UI_L_PlayersUIRefreshTimestamp for UI;

			if (Now - Cli_UI_L_PlayersUIRefreshTimestamp > C_CastlesCountRefreshPeriod) {

				declare netread Boolean[Integer] Srv_UI_G_PlayersReadyStates for Teams[0];

				foreach (PlayerId => Player in GetPlayers()) {
					declare CMlFrame FrameInstance = GetPlayerFrameInstance(PlayerId);
					declare Integer PlayerId as PFI_PlayerId for FrameInstance;
					PFI_PlayerId = PlayerId;

					PFI_SetCastlesCount(FrameInstance, CountPlayerCastles(PlayerId));

					declare Boolean IsVassal = IsPlayerVassal(PlayerId);
					
					if (IsVassal) {
						declare Integer MasterId = GetPlayerMasterId(PlayerId);
						PFI_ToggleVassalVisibility(FrameInstance, True);
						declare Text MasterLogin = GetPlayerLogin(MasterId);
						declare Text MasterName = MasterLogin;
						foreach (Player in Players) {
							if (Player.Login != MasterLogin) continue;
							MasterName = Player.Name;
						}
						PFI_SetVassalMasterName(FrameInstance, MasterName);
						
						declare CMlQuad BtnDiscard = PFI_GetBtnDiscard(FrameInstance);
						// Disable discard button
						//BtnDiscard.Visible = CountPlayerCastles(PlayerId) > 0 && (MasterLogin == InputPlayer.User.Login);
						BtnDiscard.Visible = False;
					}

					if (Srv_UI_G_PlayersReadyStates.existskey(PlayerId))	PFI_SetPlayerActionState(FrameInstance, Srv_UI_G_PlayersReadyStates[PlayerId], IsVassal);
					else											PFI_SetPlayerActionState(FrameInstance, False, IsVassal);
				}

				Cli_UI_L_PlayersUIRefreshTimestamp = Now;

			}

			// ---------------------------------- //
			// Year change.

			declare netread Integer	Srv_World_G_CurrentYear			for Teams[0];
			declare Integer			Cli_UI_L_LastYear				for UI;
			declare Integer			Cli_UI_L_LastYearTimestamp		for UI;
			
			if (Cli_UI_L_LastYear != Srv_World_G_CurrentYear) {
				GetLastYearLabel().SetText(TL::ToText(Cli_UI_L_LastYear));
				Cli_UI_L_LastYear = Srv_World_G_CurrentYear;
				SetCurrentYear(Cli_UI_L_LastYear);
				SetReady(False);
				GetRulesTipsLabel().SetText("");
				
				declare Integer 		Cli_UI_L_LastActionForRulesTip	for UI;
				Cli_UI_L_LastActionForRulesTip = -1;
				
				Cli_UI_L_LastYearTimestamp = Now;
			}

			// ---------------------------------- //
			// Summary.

			declare netread Boolean Srv_UI_G_Summary	for Teams[0];
			declare Boolean Cli_UI_L_SummaryStatus		for UI;

			if (Cli_UI_L_SummaryStatus != Srv_UI_G_Summary) {
				declare Integer Cli_UI_L_SummaryTimestamp	for UI;
				Cli_UI_L_SummaryTimestamp = Now;

				Cli_UI_L_SummaryStatus = Srv_UI_G_Summary;
			}

			// ---------------------------------- //
			// Gold.

			if (!IsSpec) {
				declare Integer Cli_UI_L_LoopStartLastInfoGoldValueToDisplay	for UI;
				declare Integer Cli_UI_L_LoopStartLastSummaryGoldValueToDisplay	for UI;

				declare Integer Cli_UI_L_InfoGoldAnimationStartTimestamp		for UI;
				declare Integer Cli_UI_L_SummaryGoldAnimationStartTimestamp		for UI;

				declare Integer PlayerGold = GetGoldValueToDisplay();

				if (Cli_UI_L_LoopStartLastInfoGoldValueToDisplay != PlayerGold) {
					Cli_UI_L_InfoGoldAnimationStartTimestamp		= Now;

					Cli_UI_L_LoopStartLastInfoGoldValueToDisplay	= PlayerGold;
				}

				if (Cli_UI_L_LoopStartLastSummaryGoldValueToDisplay != PlayerGold) {
					Cli_UI_L_SummaryGoldAnimationStartTimestamp	= Now;

					Cli_UI_L_LoopStartLastSummaryGoldValueToDisplay	= PlayerGold;
				}
			}

			// ---------------------------------- //
			// Donations.

			declare Integer			Cli_UI_L_CurrentDonationTimestamp			for UI;
			declare Integer			Cli_UI_L_LastDonationValueChangeTimestamp	for UI;
			declare Integer			Cli_UI_L_CurrentDonationPlayerId			for UI;
			declare Integer			Cli_UI_L_HideGaugeTimestamp					for UI;
			declare netread Boolean	Srv_Action_P_CanSendActions					for InputPlayer;
			declare Boolean			Srv_Action_P_LastCanSendActions				for This;
			declare Integer			Srv_Action_P_LastCanSendActionsTimestamp	for This;

			declare Integer LastClick = ML::Max(Cli_UI_L_CurrentDonationTimestamp, Cli_UI_L_LastDonationValueChangeTimestamp);

			if (Now - LastClick > C_DonationOpenCloseDuration + C_DonationTimeOut) {
				Cli_UI_L_CurrentDonationPlayerId = -1;
			}

			if (Cli_UI_L_CurrentDonationPlayerId != -1 && !IsReady()) {

				Cli_UI_L_HideGaugeTimestamp = -1;

				declare Integer Cli_UI_L_LastDonationPlusClickTimestamp		for UI;
				declare Integer Cli_UI_L_LastDonationMinusClickTimestamp	for UI;

				declare CMlFrame	PlayerFrameInstance		= GetPlayerFrameInstance(Cli_UI_L_CurrentDonationPlayerId);
				declare CMlFrame	DonationFrameInstance	= PFI_GetDonationFrameInstance(PlayerFrameInstance);
				declare CMlQuad		PlusQuad				= DFI_GetPlusQuad(DonationFrameInstance);
				declare CMlQuad		MinusQuad				= DFI_GetMinusQuad(DonationFrameInstance);

				if (MouseLeftButton) {
					if (Cli_UI_L_LastDonationPlusClickTimestamp != -1 && Now - Cli_UI_L_LastDonationPlusClickTimestamp > 100) {
						// X
						if (PlusQuad.AbsolutePosition.X - PlusQuad.Size.X / 2. <= MouseX && MouseX <= PlusQuad.AbsolutePosition.X + PlusQuad.Size.X / 2.) {
							// Y
							if (PlusQuad.AbsolutePosition.Y <= MouseY && MouseY <= PlusQuad.AbsolutePosition.Y + PlusQuad.Size.Y) {
								Plus();
							}
						}
					}

					if (Cli_UI_L_LastDonationMinusClickTimestamp != -1 && Now - Cli_UI_L_LastDonationMinusClickTimestamp > 100) {
						// X
						if (MinusQuad.AbsolutePosition.X - MinusQuad.Size.X / 2. <= MouseX && MouseX <= MinusQuad.AbsolutePosition.X + MinusQuad.Size.X / 2.) {
							// Y
							if (MinusQuad.AbsolutePosition.Y - MinusQuad.Size.Y <= MouseY && MouseY <= MinusQuad.AbsolutePosition.Y) {
								Minus();
							}
						}
					}
				} else {
					Cli_UI_L_LastDonationPlusClickTimestamp = -1;
					Cli_UI_L_LastDonationMinusClickTimestamp = -1;
				}
			} else {
				HideGauge();
			}


			if (Srv_Action_P_LastCanSendActions != Srv_Action_P_CanSendActions) {
				Srv_Action_P_LastCanSendActions = Srv_Action_P_CanSendActions;
				Srv_Action_P_LastCanSendActionsTimestamp = Now;

				if (Srv_Action_P_LastCanSendActions) Cli_UI_L_HideGaugeTimestamp = Now;
			}


			// ---------------------------------- //
			// Donations reset.

			declare netread Integer	Srv_Player_G_DonationsResetTimestamp for Teams[0];
			declare Integer			Cli_UI_L_LastDonationsResetTimestamp for UI;

			if (Cli_UI_L_LastDonationsResetTimestamp != Srv_Player_G_DonationsResetTimestamp) {
				Cli_UI_L_LastDonationsResetTimestamp = Srv_Player_G_DonationsResetTimestamp;
				DumpDonationOnAllPlayers();
			}

			// ---------------------------------- //
			// History.

			declare netread Integer	Srv_Game_G_NewGameTimestamp		for Teams[0];
			declare Integer			Cli_UI_L_LastNewGameTimestamp	for UI;
			if (Cli_UI_L_LastNewGameTimestamp != Srv_Game_G_NewGameTimestamp) {
				Cli_UI_L_LastNewGameTimestamp = Srv_Game_G_NewGameTimestamp;
				HistoryReset();
				HistoryRefresh();
			}

			declare netread Integer	Srv_Game_G_HistoryEventTimestamp		for Teams[0];
			declare Integer			Cli_Game_L_LastHistoryEventTimestamp	for UI;

			if (Cli_Game_L_LastHistoryEventTimestamp != Srv_Game_G_HistoryEventTimestamp) {
				Cli_Game_L_LastHistoryEventTimestamp = Srv_Game_G_HistoryEventTimestamp;

				declare netread Integer		Srv_Game_G_HistoryEventYear			for Teams[0];
				declare netread Integer		Srv_Game_G_HistoryEventType			for Teams[0];
				declare netread Integer[]	Srv_Game_G_HistoryEventPlayerIds	for Teams[0];
				declare netread Integer		Srv_Game_G_HistoryEventCastleId		for Teams[0];
				declare netread Integer		Srv_Game_G_HistoryEventGoldAmount	for Teams[0];

				HistoryAppend(Srv_Game_G_HistoryEventYear, Srv_Game_G_HistoryEventType, Srv_Game_G_HistoryEventPlayerIds, Srv_Game_G_HistoryEventCastleId, Srv_Game_G_HistoryEventGoldAmount);
				HistoryRefresh();
			}

			// ---------------------------------- //
			// Ready visibility.

			declare netread Boolean Srv_UI_G_ReadyVisibility		for Teams[0];
			declare Boolean Cli_UI_L_LastReadyVisibility			for UI;
			declare Integer Cli_UI_L_LastReadyVisibilityTimestamp	for UI;

			if (Cli_UI_L_LastReadyVisibility != Srv_UI_G_ReadyVisibility) {
				Cli_UI_L_LastReadyVisibility = Srv_UI_G_ReadyVisibility;
				Cli_UI_L_LastReadyVisibilityTimestamp = Now;
			}

			// ---------------------------------- //
			// Vassal discard reset.

			declare netread Integer Srv_UI_P_ResetVassalDiscardTimestamp	for UI;
			declare Integer Cli_UI_L_LastVassalDiscardTimestamp		for UI;

			if (Cli_UI_L_LastVassalDiscardTimestamp != Srv_UI_P_ResetVassalDiscardTimestamp) {
				Cli_UI_L_LastVassalDiscardTimestamp = Srv_UI_P_ResetVassalDiscardTimestamp;
				ResetDiscardedVassal();
			}

			// Blitz gold.

			declare CMlGauge BlitzGauge = GetBlitzGauge();
			declare Real BlitzRatio = 1.;
			if (C_BlitzGold > 0) BlitzRatio = GetGoldValueToDisplayForBlitz() / ML::ToReal(C_BlitzGold);
			BlitzRatio = ML::Clamp(BlitzRatio, 0., 1.);
			BlitzGauge.Ratio = BlitzRatio;

			declare Integer Cli_UI_L_LastActionForRulesTip	for UI;
			switch(Cli_UI_L_LastActionForRulesTip) {
				case 0:GetRulesTipsLabel().SetText(C_RuleTips_NoAction);
				case 1:GetRulesTipsLabel().SetText(C_RuleTips_Assault);
				case 2:GetRulesTipsLabel().SetText(C_RuleTips_Battle);
				case 3:GetRulesTipsLabel().SetText(C_RuleTips_Take);
				case 4:GetRulesTipsLabel().SetText(C_RuleTips_Defenses);
				case 5:GetRulesTipsLabel().SetText(C_RuleTips_Unreachable);
				case 6:GetRulesTipsLabel().SetText(C_RuleTips_Donate);
				case 7:GetRulesTipsLabel().SetText(C_RuleTips_PlayerCapital);
				case 8:GetRulesTipsLabel().SetText(C_RuleTips_OpponentCapital);
				case 9:GetRulesTipsLabel().SetText(C_RuleTips_YourMaster);
				case 10:GetRulesTipsLabel().SetText(C_RuleTips_YourVassal);
				case 11:GetRulesTipsLabel().SetText(C_RuleTips_DiscardVassal);
				case 12:GetRulesTipsLabel().SetText(C_RuleTips_EndTurn);
			}
			
			// LOOP START END

		}

		// ---------------------------------- //
		/**
		 * Function that must be called on each loop to animate the UI.
		 */
		Void Animate() {

			declare Boolean IsSpec = IsSpec();

			// ---------------------------------- //

			if (!IsSpec) {
				declare Integer	Cli_UI_L_AnimationLastInfoGoldValueToDisplay	for UI;
				declare Integer	Cli_UI_L_InfoGoldAnimationStartTimestamp		for UI;
				declare Boolean	Cli_UI_L_DelayGold								for UI;

				if (Cli_UI_L_DelayGold) {
					if (Now - Cli_UI_L_InfoGoldAnimationStartTimestamp - C_GoldAnimationShift < C_InfoGoldAnimationDuration) {
						declare Integer PassedTime = Now - Cli_UI_L_InfoGoldAnimationStartTimestamp - C_GoldAnimationShift;
						declare Real StartValue = ML::ToReal(Cli_UI_L_AnimationLastInfoGoldValueToDisplay);
						declare Real ChangeValue = ML::ToReal(GetGoldValueToDisplay() - Cli_UI_L_AnimationLastInfoGoldValueToDisplay);

						declare Real TransitionValue = AL::EaseLinear(PassedTime, StartValue, ChangeValue, C_InfoGoldAnimationDuration);
						SetInfoGoldLabelValue(ML::NearestInteger(TransitionValue));
					} else {
						Cli_UI_L_AnimationLastInfoGoldValueToDisplay = GetGoldValueToDisplay();
						SetInfoGoldLabelValue(Cli_UI_L_AnimationLastInfoGoldValueToDisplay);
					}
				} else {
					if (Now - Cli_UI_L_InfoGoldAnimationStartTimestamp < C_InfoGoldAnimationDuration) {
						declare Integer PassedTime = Now - Cli_UI_L_InfoGoldAnimationStartTimestamp;
						declare Real StartValue = ML::ToReal(Cli_UI_L_AnimationLastInfoGoldValueToDisplay);
						declare Real ChangeValue = ML::ToReal(GetGoldValueToDisplay() - Cli_UI_L_AnimationLastInfoGoldValueToDisplay);

						declare Real TransitionValue = AL::EaseLinear(PassedTime, StartValue, ChangeValue, C_InfoGoldAnimationDuration);
						SetInfoGoldLabelValue(ML::NearestInteger(TransitionValue));
					} else {
						Cli_UI_L_AnimationLastInfoGoldValueToDisplay = GetGoldValueToDisplay();
						SetInfoGoldLabelValue(Cli_UI_L_AnimationLastInfoGoldValueToDisplay);
					}
				}
				
				declare Integer Cli_UI_L_AnimationLastSummaryGoldValueToDisplay	for UI;
				declare Integer Cli_UI_L_SummaryGoldAnimationStartTimestamp		for UI;

				if (Now - Cli_UI_L_SummaryGoldAnimationStartTimestamp < C_SummaryGoldAnimationDuration) {
					declare Integer PassedTime = Now - Cli_UI_L_SummaryGoldAnimationStartTimestamp;
					declare Real StartValue = ML::ToReal(Cli_UI_L_AnimationLastSummaryGoldValueToDisplay);
					declare Real ChangeValue = ML::ToReal(GetGoldValueToDisplay() - Cli_UI_L_AnimationLastSummaryGoldValueToDisplay);

					declare Real TransitionValue = AL::EaseLinear(PassedTime, StartValue, ChangeValue, C_SummaryGoldAnimationDuration);
				} else {
					Cli_UI_L_AnimationLastSummaryGoldValueToDisplay = GetGoldValueToDisplay();
				}
			}

			// ---------------------------------- //

			if (!IsSpec) {
				declare Integer	Cli_UI_L_CurrentDonationPlayerId			for UI;
				declare Integer	Cli_UI_L_LastDonationPlayerId				for UI;
				declare Integer	Cli_UI_L_CurrentDonationTimestamp			for UI;
				declare Integer	Cli_UI_L_LastDonationValueChangeTimestamp	for UI;
				declare Integer	Cli_UI_L_HidingTimestamp					for UI;
				declare Integer	Cli_UI_L_HideGaugeTimestamp					for UI;

				if (GetGamePhase() != C_PhaseSetup && Cli_UI_L_CurrentDonationPlayerId > -1) {

					Cli_UI_L_HidingTimestamp = -1;

					if (Cli_UI_L_LastDonationPlayerId != Cli_UI_L_CurrentDonationPlayerId) {
						if (Cli_UI_L_LastDonationPlayerId != -1) PFI_GetDonationFrameInstance(GetPlayerFrameInstance(Cli_UI_L_LastDonationPlayerId)).Hide();
						Cli_UI_L_LastDonationPlayerId = Cli_UI_L_CurrentDonationPlayerId;
					}

					declare CMlFrame	PlayerFrameInstance		= GetPlayerFrameInstance(Cli_UI_L_CurrentDonationPlayerId);
					declare CMlFrame	DonationFrameInstance	= PFI_GetDonationFrameInstance(PlayerFrameInstance);
					declare CMlFrame	ScaleFrame				= DFI_GetScaleFrame(DonationFrameInstance);
					declare CMlQuad		BetLight				= DFI_GetBetLight(DonationFrameInstance);

					DonationFrameInstance.Show();

					if (Cli_UI_L_HideGaugeTimestamp == -1) {
						// Can donate.
						BetLight.Show();
						ScaleFrame.RelativeScale	= AL::EaseOutExp(Now - Cli_UI_L_CurrentDonationTimestamp, 0., 1., C_DonationOpenCloseDuration);
						// ScaleFrame.RelativeRotation	= AL::EaseOutExp(Now - Cli_UI_L_CurrentDonationTimestamp, -45., 45., C_DonationOpenCloseDuration);

						BetLight.RelativeScale		= AL::EaseLinear(Now - Cli_UI_L_CurrentDonationTimestamp, 1., -1., C_DonationOpenCloseDuration);
						BetLight.Opacity			= AL::EaseLinear(Now - Cli_UI_L_CurrentDonationTimestamp, 1., -1., C_DonationOpenCloseDuration);

						declare Integer GoldDonation = GetGoldDonationOnPlayer(Cli_UI_L_CurrentDonationPlayerId);

						declare CMlLabel InfoLabel = DFI_GetInfoLabel(DonationFrameInstance);

						InfoLabel.SetText(GetGoldLayout(GoldDonation));
						
						declare Integer Cli_UI_L_LastDonationPlusClickTimestamp		for UI;
						declare Integer Cli_UI_L_LastDonationMinusClickTimestamp	for UI;

						declare Vec3 NormalColor	= <1., 0.667, 0.>;
						declare Vec3 HighlightColor	= <1., 0.97, 0.5>;
						declare Vec3 TextColor;
						TextColor = NormalColor - (NormalColor - HighlightColor) * AL::EaseLinear(Now - Cli_UI_L_LastDonationValueChangeTimestamp, 1., -1., 200);

						InfoLabel.TextColor = TextColor;

						declare CMlQuad PlusQuad = DFI_GetPlusQuad(DonationFrameInstance);
						declare CMlQuad MinusQuad = DFI_GetMinusQuad(DonationFrameInstance);
			
						PlusQuad.RelativeScale	= AL::EaseOutExp(Now - Cli_UI_L_LastDonationPlusClickTimestamp, 0.9, 0.1, C_DonationOpenCloseDuration);
						MinusQuad.RelativeScale	= AL::EaseOutExp(Now - Cli_UI_L_LastDonationMinusClickTimestamp, 0.9, 0.1, C_DonationOpenCloseDuration);
						InfoLabel.RelativeScale	= AL::EaseOutExp(Now - Cli_UI_L_LastDonationValueChangeTimestamp, 1.1, -0.1, C_DonationOpenCloseDuration);
						
						// declare Integer Cli_UI_L_LastActionForRulesTip		for UI;
						// Cli_UI_L_LastActionForRulesTip = 6; // Donate
					} else {
						// Can't donate.
						BetLight.Hide();
						ScaleFrame.RelativeScale	= AL::EaseOutExp(Now - Cli_UI_L_HideGaugeTimestamp, 1., -1., C_DonationOpenCloseDuration);
						// ScaleFrame.RelativeRotation	= AL::EaseOutExp(Now - Cli_UI_L_HideGaugeTimestamp, 0., 45., C_DonationOpenCloseDuration);
					}


				} else {
					// No player id.

					if (Cli_UI_L_HidingTimestamp == -1) {
						Cli_UI_L_HidingTimestamp = Now;
					}

					if (Cli_UI_L_LastDonationPlayerId > -1) {

						declare CMlFrame PlayerFrameInstance	= GetPlayerFrameInstance(Cli_UI_L_LastDonationPlayerId);
						declare CMlFrame DonationFrameInstance	= PFI_GetDonationFrameInstance(PlayerFrameInstance);
						declare CMlFrame ScaleFrame	= DFI_GetScaleFrame(DonationFrameInstance);

						ScaleFrame.RelativeScale	= AL::EaseOutExp(Now - Cli_UI_L_HidingTimestamp, 1., -1., C_DonationOpenCloseDuration);
						// ScaleFrame.RelativeRotation	= AL::EaseOutExp(Now - Cli_UI_L_HidingTimestamp, 0., 45., C_DonationOpenCloseDuration);
					}

				}
			}

			// ---------------------------------- //

			declare Integer[]			Cli_UI_L_HistoryEventHighlightPlayerIds	for UI;
			declare netread Integer[]	Srv_UI_G_HighlightPlayerIds				for Teams[0];

			foreach (PlayerId => Player in GetPlayers()) {
				
				declare CMlFrame	PlayerFrameInstance	= GetPlayerFrameInstance(PlayerId);
				declare CMlLabel	PlayerGoldLabel		= PFI_GetGoldLabel(PlayerFrameInstance);
				declare CMlQuad		PlayerHighlightQuad	= PFI_GetHighlightQuad(PlayerFrameInstance);

				declare Vec3 TextColor = <1., 0.667, 0.>;
				declare Real RelativeScale = 1.;

				declare Integer Donation = GetGoldDonationOnPlayer(PlayerId);
				declare Text GoldText;

				if (Donation > 0) {
					declare Real Factor = (ML::Sin(Now / 100.) + 1) / 2.;
					declare Vec3 HighlightColor	= <1., 0.97, 0.5>;
					
					TextColor		= TextColor - (TextColor - HighlightColor) * Factor;
					// RelativeScale	= 1 + 0.2 * Factor;
					GoldText		= TL::Compose("%1 + %2", GetGoldLayout(GetPlayerGold(PlayerId)), GetGoldLayout(Donation));
				} else {
					GoldText		= TL::Compose("%1", GetGoldLayout(GetPlayerGold(PlayerId)));
				}

				if (Cli_UI_L_HistoryEventHighlightPlayerIds.exists(PlayerId) || Srv_UI_G_HighlightPlayerIds.exists(PlayerId)) {
					PlayerHighlightQuad.Show();
					PlayerHighlightQuad.Opacity = (ML::Sin(Now / 100.) + 1) / 2.;
				} else {
					PlayerHighlightQuad.Hide();
				}

				PlayerGoldLabel.TextColor = TextColor;
				PlayerGoldLabel.RelativeScale = RelativeScale;
				PlayerGoldLabel.SetText(GoldText);
			}

			// ---------------------------------- //

			foreach (HistoryEventFrameInstance in GetHistoryEventFrameInstances()) {
				declare CMlQuad		HoverQuad	= HEFI_GetHoverQuad(HistoryEventFrameInstance);
				declare CMlLabel	YearLabel	= HEFI_GetYearLabel(HistoryEventFrameInstance);

				declare Integer MouseHoverIn	for HoverQuad;
				declare Integer MouseHoverOut	for HoverQuad;

				declare Real Val;

				if (MouseHoverIn > MouseHoverOut) {
					Val = AL::EaseLinear(Now - MouseHoverIn, 0., 1., 100);
				} else {
					Val = AL::EaseLinear(Now - MouseHoverOut, 1., -1., 100);
				}

				if (YearLabel.Value == "") {
					HoverQuad.BgColor = <0., 0.25, 0.5>;
				} else {
					HoverQuad.BgColor = <0., 0.5, 1.>;
				}

				HoverQuad.Opacity = Val;
			}

			// ---------------------------------- //

			if (!IsSpec) {
				declare Boolean	Cli_UI_L_LastReadyVisibility			for UI;
				declare Integer	Cli_UI_L_LastReadyVisibilityTimestamp	for UI;

				declare CMlFrame ReadyFrame = GetReadyFrame();

				if (Cli_UI_L_LastReadyVisibility) {
					ReadyFrame.Show();
					ReadyFrame.RelativeScale = AL::EaseOutExp(Now - Cli_UI_L_LastReadyVisibilityTimestamp, 0., 1., C_ReadyVisibilityAnimationDuration);

				} else {

					if (Now - Cli_UI_L_LastReadyVisibilityTimestamp > C_ReadyVisibilityAnimationDuration) {
						ReadyFrame.Hide();
					} else {
						ReadyFrame.Show();
						ReadyFrame.RelativeScale = AL::EaseOutExp(Now - Cli_UI_L_LastReadyVisibilityTimestamp, 1., -1., C_ReadyVisibilityAnimationDuration);
					}

				}
			}

			// ---------------------------------- //

			declare Integer Cli_UI_L_LastYearTimestamp for UI;

			declare CMlFrame	TopFrame			= GetTopFrame();
			declare CMlQuad		TopLightQuad		= GetTopLightQuad();
			declare CMlLabel	CurrentYearLabel	= GetCurrentYearLabel();
			declare CMlLabel	LastYearLabel		= GetLastYearLabel();

			if (Now - Cli_UI_L_LastYearTimestamp < C_TopFrameAnimationDuration / 2) {

				TopLightQuad.Opacity				= 0.;
				
				LastYearLabel.RelativeScale			= AL::EaseInQuad(Now - Cli_UI_L_LastYearTimestamp, 1., -0.2, C_TopFrameAnimationDuration / 2);
				LastYearLabel.RelativePosition.Y	= AL::EaseInQuad(Now - Cli_UI_L_LastYearTimestamp, -6., -6., C_TopFrameAnimationDuration / 2);
				LastYearLabel.Opacity				= AL::EaseInQuad(Now - Cli_UI_L_LastYearTimestamp, 1., -1., C_TopFrameAnimationDuration / 2);

				CurrentYearLabel.Opacity			= 0.;

			} else if (Now - Cli_UI_L_LastYearTimestamp - C_TopFrameAnimationDuration / 2 < C_TopFrameAnimationDuration / 2) {

				TopLightQuad.Opacity				= AL::EaseOutExp(Now - Cli_UI_L_LastYearTimestamp - C_TopFrameAnimationDuration / 2, 1., -1., C_TopFrameAnimationDuration / 2);

				LastYearLabel.Opacity				= 0.;

				CurrentYearLabel.RelativeScale		= AL::EaseOutExp(Now - Cli_UI_L_LastYearTimestamp - C_TopFrameAnimationDuration / 2, 1.2, -0.2, C_TopFrameAnimationDuration / 2);
				CurrentYearLabel.RelativePosition.Y	= AL::EaseOutExp(Now - Cli_UI_L_LastYearTimestamp - C_TopFrameAnimationDuration / 2, -4., -2., C_TopFrameAnimationDuration / 2);
				CurrentYearLabel.Opacity			= AL::EaseOutExp(Now - Cli_UI_L_LastYearTimestamp - C_TopFrameAnimationDuration / 2, 0., 1., C_TopFrameAnimationDuration / 2);

			} else {
				TopLightQuad.Opacity				= 0.;

				LastYearLabel.RelativeScale			= 1.;
				LastYearLabel.Opacity				= 0.;

				CurrentYearLabel.RelativeScale		= 1.;
				CurrentYearLabel.Opacity			= 1.;
			}

			// ---------------------------------- //

			declare Integer	Cli_UI_L_LastGamePhaseTimestamp					for UI;

			declare CMlLabel ObjectiveLabel = GetObjectiveLabel();

			if (Now - Cli_UI_L_LastGamePhaseTimestamp < C_ObjectiveAnimationDuration) {
				ObjectiveLabel.RelativeScale = AL::EaseOutBack(Now - Cli_UI_L_LastGamePhaseTimestamp, 1.2, -0.2, C_ObjectiveAnimationDuration);
			} else {
				ObjectiveLabel.RelativeScale = 1.;
			}

			// ---------------------------------- //

			if (!IsSpec) {
				declare CMlQuad ReadyArrow = GetReadyArrow();
				declare CMlLabel ReadyLabel = GetReadyLabel();
				
				declare Vec3 Color = <1., 0., 0.>;
				declare Text ReadyText = _("End Turn");
				
				if (IsReady()) {
					Color = <0., 1., 0.>;
					ReadyText = "";
				}
				
				ReadyArrow.ModulateColor = Color;
				ReadyLabel.SetText(ReadyText);
			}

			// ---------------------------------- //

			if (!IsSpec) {
				declare Integer C_UI_L_LastReadyClickTimestamp for UI;
				GetReadyFrame().RelativeScale = AL::EaseOutExp(Now - C_UI_L_LastReadyClickTimestamp, 1.1, -0.1, C_ReadyAnimationDuration);
			}

			// ---------------------------------- //

			foreach (Event in PendingEvents) {
				switch (Event.Type) {
					case CMlEvent::Type::MouseOver: {
						switch (Event.ControlId) {
							case "hover": {
								declare CMlQuad HoverQuad = (Event.Control as CMlQuad);
								declare CMlFrame HistoryEventFrameInstance = GetHistoryEventFrameInstanceFromHoverQuad(HoverQuad);
								declare Integer MouseHoverIn for HoverQuad;
								declare Integer[]	PlayerIds	for HistoryEventFrameInstance;
								declare Integer		CastleId	for HistoryEventFrameInstance;
								MouseHoverIn = Now;

								HighlightHistoryEvent(PlayerIds, CastleId);
							}

							case "playerbg": {
								if (IsSpec || GetGamePhase() == C_PhaseSetup || IsReady()) continue;

								declare CMlFrame PlayerFrameInstance	= GetPlayerFrameInstanceFromBg(Event.Control);
								declare Integer InputPlayerId			= GetInputPlayerId();
								declare Integer FocusedPlayerId			= GetPlayerIdFromBg(Event.Control);
								
								if (GetPlayerIdFromBg(Event.Control) != InputPlayerId) {
									if (C_AntiVassalRevolt) {
										if (!IsPlayerVassal(InputPlayerId) || (IsPlayerVassal(InputPlayerId) && GetPlayerMasterId(InputPlayerId) == FocusedPlayerId)) {
											// log(Now^"> Show Here for "^InputPlayerId);
											PFI_GetFocusLightQuad(PlayerFrameInstance).Show();
											// PFI_GetFocusTextQuad(PlayerFrameInstance).Show();
											PFI_GetFocusTextQuad(PlayerFrameInstance).SetText(TL::Compose("$s%1", _("donate")));
											Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 0, 10.);
											
											declare Integer Cli_UI_L_LastActionForRulesTip		for UI;
											Cli_UI_L_LastActionForRulesTip = 6; // Donate
										} 
										
										if(IsPlayerVassal(InputPlayerId) && GetPlayerMasterId(InputPlayerId) == FocusedPlayerId) {
											declare Integer Cli_UI_L_LastActionForRulesTip		for UI;
											Cli_UI_L_LastActionForRulesTip = 9; // This player is your master
										} else if(IsPlayerVassal(FocusedPlayerId) && GetPlayerMasterId(FocusedPlayerId) == InputPlayerId) {
											declare Integer Cli_UI_L_LastActionForRulesTip		for UI;
											Cli_UI_L_LastActionForRulesTip = 10; // This player is your vassal
										}										
									} else {
										// log(Now^"> Show there for "^InputPlayerId);
										PFI_GetFocusLightQuad(PlayerFrameInstance).Show();
										// PFI_GetFocusTextQuad(PlayerFrameInstance).Show();
										PFI_GetFocusTextQuad(PlayerFrameInstance).SetText(TL::Compose("$s%1", _("donate")));
										Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 0, 10.);
										
										declare Integer Cli_UI_L_LastActionForRulesTip		for UI;
										Cli_UI_L_LastActionForRulesTip = 6; // Donate
									}
								}
							}

							case "plusquad": {
								if (IsSpec) continue;

								declare CMlQuad PlusQuad = (Event.Control as CMlQuad);
								PlusQuad.Colorize = <1., 0.97, 0.5>;
								Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 0, 20.);
							}

							case "minusquad": {
								if (IsSpec) continue;

								declare CMlQuad MinusQuad = (Event.Control as CMlQuad);
								MinusQuad.Colorize = <1., 0.97, 0.5>;
								Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 0, 20.);
							}

							case "btn-discard": {
								if (IsSpec) continue;

								declare CMlQuad BtnDiscard = (Event.Control as CMlQuad);
								BtnDiscard.Opacity = 1.;
							}
						}
					}
					case CMlEvent::Type::MouseOut: {
						switch (Event.ControlId) {
							case "hover": {
								declare CMlQuad HoverQuad = (Event.Control as CMlQuad);
								declare Integer MouseHoverOut for HoverQuad;
								MouseHoverOut = Now;
								StopHighlightHistoryEvent();
							}
							case "playerbg": {
								if (IsSpec) continue;

								declare CMlFrame PlayerFrameInstance = GetPlayerFrameInstanceFromBg(Event.Control);
								PFI_GetFocusLightQuad(PlayerFrameInstance).Hide();
								PFI_GetFocusTextQuad(PlayerFrameInstance).SetText("");
							}
							case "plusquad": {
								if (IsSpec) continue;

								declare CMlQuad PlusQuad = (Event.Control as CMlQuad);
								PlusQuad.Colorize = <1., 0.667, 0.>;
							}
							case "minusquad": {
								if (IsSpec) continue;

								declare CMlQuad MinusQuad = (Event.Control as CMlQuad);
								MinusQuad.Colorize = <1., 0.667, 0.>;
							}

							case "btn-discard": {
								if (IsSpec) continue;

								declare CMlQuad BtnDiscard = (Event.Control as CMlQuad);
								BtnDiscard.Opacity = 0.8;
							}
						}
					}
				}
			}

			// ANIMATE END
		}

		// ---------------------------------- //
		/**
		 * Main script. 
		 */
		main() {

			Init();
			
			declare Integer LocalPlayerId = GetInputPlayerId();

			declare CMlLabel	TurnPlayerCastles	= GetTurnPlayerCastlesLabel();

			declare Boolean IsSpec;	
			
			declare Button_Ready <=> (Page.GetFirstChild("ready") as CMlFrame);
			declare PrevCountdownEndTime = -1;
			declare NextEndTurnBlink = -1;
			declare UseAnim = False;

			while (True) {
				
				if (UseAnim) {
					if (PrevCountdownEndTime != UI.CountdownEndTime) {
						PrevCountdownEndTime = UI.CountdownEndTime;
						NextEndTurnBlink = Now + 30000;
					}

					if (NextEndTurnBlink > 0 && Now >= NextEndTurnBlink) {
						NextEndTurnBlink = Now + 30000;
						AnimMgr.Add(Button_Ready, "<frame scale=\"1.1\" />", 250, CAnimManager::EAnimManagerEasing::QuartOut);
						AnimMgr.AddChain(Button_Ready, "<frame scale=\"1\" />", 300, CAnimManager::EAnimManagerEasing::QuartOut);
						AnimMgr.AddChain(Button_Ready, "<frame scale=\"1.1\" />", 250, CAnimManager::EAnimManagerEasing::QuartOut);
						AnimMgr.AddChain(Button_Ready, "<frame scale=\"1\" />", 300, CAnimManager::EAnimManagerEasing::QuartOut);
					}
				}

				LoopStart();

				IsSpec = IsSpec();

				foreach (Event in PendingEvents) {
					if (Event.Type == CMlEvent::Type::MouseOver) {
						if(Event.ControlId == "btn-readyBG") {
							GetBtnReady().TextColor = <0.0, 0.5, 1.>;
							declare Integer 		Cli_UI_L_LastActionForRulesTip	for UI;
							Cli_UI_L_LastActionForRulesTip = 12;
						}
						if(Event.ControlId == "btn-discard") {
							declare Integer 		Cli_UI_L_LastActionForRulesTip	for UI;
							Cli_UI_L_LastActionForRulesTip = 11;
						}
					}
					if (Event.Type == CMlEvent::Type::MouseOut) {
						if(Event.ControlId == "btn-readyBG") GetBtnReady().TextColor = <1., 1., 1.>;
					}
					if (Event.Type == CMlEvent::Type::MouseClick) {
						switch (Event.ControlId) {
							case "playerbg": {
								// To give money to others.
								if (IsSpec || GetGamePhase() == C_PhaseSetup || IsReady()) continue;

								declare Integer InputPlayerId			= GetInputPlayerId();
								declare Integer FocusedPlayerId			= GetPlayerIdFromBg(Event.Control);

								declare Integer AimedPlayerId = GetPlayerIdFromBg(Event.Control);
								
								if (GetPlayerIdFromBg(Event.Control) != InputPlayerId) {
									if (C_AntiVassalRevolt) {
										if (!IsPlayerVassal(InputPlayerId) || (IsPlayerVassal(InputPlayerId) && GetPlayerMasterId(InputPlayerId) == FocusedPlayerId)) {
											Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 0, 0.);
											AskToGiveTo(AimedPlayerId);
										}

									} else {
										Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 0, 0.);
										AskToGiveTo(AimedPlayerId);
									}
								}
							}

							case "plusquad": {
								if (IsSpec) continue;

								Plus();
							}

							case "minusquad": {
								if (IsSpec) continue;

								Minus();
							}

							case "btn-readyBG": {
								if (IsSpec) continue;

								Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 0, 0.);
								declare Integer C_UI_L_LastReadyClickTimestamp for UI;
								C_UI_L_LastReadyClickTimestamp = Now;
								SetReady(!IsReady());
							}

							case "btn-discard": {
								if (IsSpec) continue;

								Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 0, 0.);
								declare CMlFrame PlayerFrameInstance = GetPlayerFrameInstanceFromDiscardQuad(Event.Control);
								DiscardVassal(GetPlayerId(PlayerFrameInstance));
							}
						}
					}
				}

				Animate();
				yield;
			}

		}

	--></script>
</manialink>

