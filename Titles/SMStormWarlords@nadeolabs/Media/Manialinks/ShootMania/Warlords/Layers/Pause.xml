<manialink version="2" name="{( LayerName )}">
	<frame posn="0 0 -40">
		<frame id="pauserequestui" posn="-125 75 13" hidden="1">
			<frame id="pauserequestuicontent" posn="0 12 3">
				<label id="title" posn="0 0 0" sizen="50 5" text="Pause request" valign="center" halign="center" style="TextTitle3" />
				<label id="playerslabel" posn="0 -8 0" sizen="50 5" text="%1 player(s) want to pause the game, %2 remaining." valign="center" halign="center" textsize="2" autonewline="1" />
				<gauge id="playersgauge" posn="0 -16 0" sizen="50 8" valign="center" halign="center" color="0AF" drawbg="0" />
				<label id="keyhint" posn="0 -24 0" sizen="50 5" text="Press 'P' To pause" valign="center" halign="center" style="TextTitle3" textsize="1" />
			</frame>
			<quad id="metalbar" posn="0 -16 2" sizen="50 2" style="Bgs1" substyle="BgMetalBar"  valign="center" halign="center"/>
			<quad id="bluebg" posn="0 0 1" sizen="50 30" style="Bgs1" substyle="BgCardProperty" halign="center" valign="center" opacity="0.9" />
			<quad id="shadow" posn="0 0 0" sizen="60 44" valign="center" halign="center" style="Bgs1" substyle="BgButtonShadow"/>
		</frame>

		<frame id="pauseui" posn="0 0 1" hidden="1">
			<frame id="pauseuicontent" posn="0 40 5">
				<label id="title" posn="0 5 6" sizen="80 5" text="Pause" halign="center" valign="center2" style="TextTitle3"  textsize="10"/>
				<quad id="title-glow2" posn="0 5 5" sizen="80 10" bgcolor="FFFA" style="Bgs1" substyle="Glow" halign="center" valign="center"/>
				<quad id="title-glow1" posn="0 5 4" sizen="80 10" bgcolor="FFFA" style="Bgs1" substyle="Glow" halign="center" valign="center"/>

				<label id="desc" posn="0 -2 3" sizen="80 5" text="Vote for the next action" halign="center" valign="center2" style="TextTitle3" textsize="1" />

				<frame posn="0 -20">
					<label id="btn-resume" posn="0 0 2" sizen="80 5" text="Resume" valign="center" halign="center" style="CardButtonMediumL" scriptevents="1" />
					<label id="resume-sub" posn="0 -4 2" sizen="80 5" text="1 of 3 players" valign="center" halign="center" style="TextTitle3" textsize="0.8" />
					<quad id="resume-glow" posn="0 0 1" sizen="80 20" style="Bgs1" substyle="Glow" halign="center" valign="center" hidden="1" />
					<quad id="neutral-glow" posn="0 0 0" sizen="80 15" style="Bgs1" substyle="Glow" halign="center" valign="center"/>
				</frame>

				<frame posn="0 -40">
					<label id="btn-save" posn="0 0 2" sizen="80 5" text="Save & quit" valign="center" halign="center" style="CardButtonMediumL" scriptevents="1" />
					<label id="save-sub" posn="0 -4 2" sizen="80 5" text="0 of 3 players" valign="center" halign="center" style="TextTitle3" textsize="0.8" />
					<quad id="save-glow" posn="0 0 1" sizen="80 20" style="Bgs1" substyle="Glow" halign="center" valign="center" hidden="1" />
					<quad id="neutral-glow" posn="0 0 0" sizen="80 15" style="Bgs1" substyle="Glow" halign="center" valign="center"/>
				</frame>

				<frame posn="0 -60">
					<label id="btn-quit" posn="0 0 2" sizen="80 5" text="Quit" valign="center" halign="center" style="CardButtonMediumL" scriptevents="1" />
					<label id="quit-sub" posn="0 -4 2" sizen="80 5" text="0 in 3 players" valign="center" halign="center" style="TextTitle3" textsize="0.8" />
					<quad id="quit-glow" posn="0 0 1" sizen="80 20" style="Bgs1" substyle="Glow" halign="center" valign="center" hidden="1" />
					<quad id="neutral-glow" posn="0 0 0" sizen="80 15" style="Bgs1" substyle="Glow" halign="center" valign="center"/>
				</frame>

			</frame>

			<label id="fdj" posn="0 -46 4" sizen="80 5" text="$w#FerdjoukhEmpire" halign="center" valign="center2" textsize="0.5" textcolor="bbd8" style="TextTitle3" />

			<quad id="bluebar" posn="0 45 3" sizen="86 8" valign="center" halign="center" style="Bgs1" substyle="BgGlow2"/>
			<quad id="metalbar" posn="0 -46 3" sizen="80 2" style="Bgs1" substyle="BgMetalBar" valign="center" halign="center"/>
			<quad id="bluebg" posn="0 0 2" sizen="80 90" valign="center" halign="center" style="Bgs1" substyle="BgCardProperty" opacity="0.9" />
			<quad id="shadow" posn="0 -0.5 1" sizen="50.5 57" style="Bgs1" substyle="BgButtonShadow" valign="center" halign="center" scale="2" opacity="0.5"/>

			<quad id="bgblur" posn="0 0 0" sizen="320 180" style="Bgs1" substyle="BgDialogBlur" valign="center" halign="center" scriptevents="1" />
		</frame>

		<frame id="pauseglobalui" posn="0 -85">
			<label id="btn-pause" halign="center" valign="center" text="Pause" style="CardButtonMediumS" scriptevents="1" />
		</frame>
	</frame>

	<script><!--
	
		#Include "TextLib"			as TL
		#Include "MathLib"			as ML
		#Include "AnimLib"			as AL

		// ---------------------------------- //

		#Const C_Proportion			0.5
		#Const C_FadeTime			200

		// ---------------------------------- //

		declare Integer				G_LastPauseUIVisibilityChangeTimestamp;
		declare Integer				G_LastPauseRequestUIVisibilityChangeTimestamp;
		declare Integer[CMlLabel]	G_LastLabelChangeTimestamp;

		declare Boolean				G_PauseState;
		declare Boolean				G_PauseRequestState;

		// ---------------------------------- //
		/**
		 * Plays a focus sound.
		 *
		 * @param _State True for focus, False for unfocus.
		 */
		Void PlaySelectSound(Boolean _State) {
			declare Integer Variant = 0;
			if (_State) Variant = 1;
			
			Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, Variant, 10.);
		}

		// ---------------------------------- //
		/**
		 * Returns the pause menu CMlFrame.
		 *
		 * @return The frame containing the pause menu.
		 */
		CMlFrame GetPauseUI() {
			return (Page.GetFirstChild("pauseui") as CMlFrame);
		}

		// ---------------------------------- //
		/**
		 * Turns visible / invisible the pause main CMlFrame.
		 *
		 * @param _Visibility True to display, False otherwise.
		 */
		Void TogglePauseUIVisibility(Boolean _Visibility) {
			if (G_PauseState == _Visibility) return;
			G_LastPauseUIVisibilityChangeTimestamp = Now;
			G_PauseState = _Visibility;
		}

		// ---------------------------------- //
		/**
		 * Gets the frame containing the pause button.
		 *
		 * @return The frame containing the pause button.
		 */
		CMlFrame GetPauseButtonFrame() {
			return (Page.GetFirstChild("pauseglobalui") as CMlFrame);
		}

		// ---------------------------------- //
		/**
		 * Checks if the client asked a pause.
		 *
		 * @return True if the local player asked a pause.
		 */
		Boolean IsPauseAsked() {
			declare netwrite	Boolean			Cli_Pause_P_WantsToPause		for UI;
			return Cli_Pause_P_WantsToPause;
		}

		// ---------------------------------- //
		/**
		 * Tells the server the client's opinion about a pause.
		 *
		 * @param _Wants True if the local player requests a pause, False otherwise.
		 */
		Void AskPause(Boolean _WantsToPause) {
			declare netwrite	Boolean			Cli_Pause_P_WantsToPause		for UI;
			Cli_Pause_P_WantsToPause = _WantsToPause;
		}

		// ---------------------------------- //
		/**
		 * Sends to the server the given pause menu choice.
		 *
		 * @param _Choice The local player's pause menu choice.
		 */
		Void SetSelectedPauseChoice(Text _Choice) {
			declare netwrite	Text			Cli_Pause_P_SelectedChoice	for UI;
			if (Cli_Pause_P_SelectedChoice != _Choice) {
				Cli_Pause_P_SelectedChoice = _Choice;
			} else {
				Cli_Pause_P_SelectedChoice = "";
			}
		}

		// ---------------------------------- //
		/**
		 * Gets the frame containing the information about a pause request.
		 *
		 * @return The pause request CMlFrame.
		 */
		CMlFrame GetPauseRequestUI() {
			return (Page.GetFirstChild("pauserequestui") as CMlFrame);
		}

		// ---------------------------------- //
		/**
		 * Computes all labels before a pause request UI display.
		 *
		 * @param _ProPlayersCount The number of players that want a pause.
		 * @param _TotalPlayersCount The total number of players.
		 * @param _ClientPressed True if the local player wants a pause.
		 */
		Void SetPauseRequestUIValues(Integer _ProPlayersCount, Integer _TotalPlayersCount, Boolean _ClientPressed) {
			declare CMlFrame PauseRequestUI = GetPauseRequestUI();
			declare CMlGauge Gauge			<=> (PauseRequestUI.GetFirstChild("playersgauge")	as CMlGauge);
			declare CMlLabel Label			<=> (PauseRequestUI.GetFirstChild("playerslabel")	as CMlLabel);
			declare CMlLabel KeyHintLabel	<=> (PauseRequestUI.GetFirstChild("keyhint")		as CMlLabel);

			declare Integer RemainingPlayersCount = ML::NearestInteger(_TotalPlayersCount * C_Proportion) - _ProPlayersCount;
			if (RemainingPlayersCount < 0) RemainingPlayersCount = 0;

			declare Real Ratio = _ProPlayersCount / ML::ToReal(_TotalPlayersCount);
			
			Gauge.SetRatio(Ratio);

			declare Text PluralAddition = "";
			declare Text VerbAddition = "";
			if (_ProPlayersCount > 1) PluralAddition = "s";
			if (_ProPlayersCount == 1) VerbAddition = "s";

			declare Text PauseRequestText;
			if (RemainingPlayersCount > 0) {
				PauseRequestText = TL::Compose(
					"%1 player%2 want%3 to pause the game, %4 remaining.",
					TL::ToText(_ProPlayersCount),
					PluralAddition,
					VerbAddition,
					TL::ToText(RemainingPlayersCount)
				);
			} else {
				PauseRequestText = TL::Compose(
					"%1 player%2 want%3 to pause the game, game will be paused.",
					TL::ToText(_ProPlayersCount),
					PluralAddition,
					VerbAddition
				);
			}
			Label.SetText(PauseRequestText);

			declare Text KeyHintText = "Press 'P' to ";
			if (_ClientPressed) {
				KeyHintText ^= "cancel";
			} else {
				KeyHintText ^= "pause";
			}

			KeyHintLabel.SetText(KeyHintText);
		}

		// ---------------------------------- //
		/**
		 * Shows / Hides the pause request UI.
		 *
		 * @param _Visibility True to show the pause
		 */
		Void TogglePauseRequestUIVisibility(Boolean _Visibility) {
			if (G_PauseRequestState == _Visibility) return;
			G_LastPauseRequestUIVisibilityChangeTimestamp = Now;
			G_PauseRequestState = _Visibility;
		}

		// ---------------------------------- //
		/**
		 * Gets the pause opinions.
		 *
		 * @return The pause requests opinions.
		 */
		Boolean[Text] GetPauseOpinions() {
			declare netread		Boolean[Text]	Srv_Pause_G_PauseOpinions		for Teams[0];
			return Srv_Pause_G_PauseOpinions;
		}

		// ---------------------------------- //
		/**
		 * Checks if any opinion is chosen.
		 *
		 * @param _PauseOpinions A pause opinions array.
		 * @return True if there is at least one opinion in favor of a pause.
		 */
		Boolean IsAnyTrue(Boolean[Text] _PauseOpinions) {
			foreach (Bool in _PauseOpinions) {
				if (Bool) return True;
			}
			return False;
		}

		// ---------------------------------- //
		/**
		 * Counts all pro opinions.
		 *
		 * @param _PauseOpinions A pause opinions array.
		 * @return The number of opinions in favor of a pause.
		 */
		Integer CountAllTrues(Boolean[Text] _PauseOpinions) {
			declare Integer Count = 0;
			foreach (Bool in _PauseOpinions) {
				if (Bool) Count += 1;
			}
			return Count;
		}

		// ---------------------------------- //
		/**
		 * Applies recursively the given opacity.
		 *
		 * @param _Parent The parent frame to start with.
		 * @param _Opacity The opacity to apply.
		 */
		Void ApplyOpacityToChildren(CMlFrame _Parent, Real _Opacity) {
			foreach (Control in _Parent.Controls) {
				switchtype (Control) {
					case CMlFrame: {
						ApplyOpacityToChildren((Control as CMlFrame), _Opacity);
					}
					case CMlLabel: {
						(Control as CMlLabel).Opacity = _Opacity;
					}
					case CMlQuad: {
						(Control as CMlQuad).Opacity = _Opacity;
					}
				}
			}
		}

		// ---------------------------------- //
		/**
		 * Gets the opinions concerning the pause menu actions.
		 *
		 * @return The opinions concerning the pause actions.
		 */
		Text[Text] GetPauseActionsOpinions() {
			declare netread Text[Text] Srv_Pause_G_ActionOpinions for Teams[0];
			return Srv_Pause_G_ActionOpinions;
		}

		// ---------------------------------- //
		/**
		 * Gets the button visibility that must be applied.
		 *
		 * @return The asked button visibility.
		 */
		Boolean GetAskedButtonVisibility() {
			declare netread Boolean Srv_UI_G_PauseButtonVisibility for Teams[0];
			return Srv_UI_G_PauseButtonVisibility;
		}

		// ---------------------------------- //
		/**
		 * Function that must be called on each loop start.
		 */
		Void LoopStart() {
			GetPauseButtonFrame().Visible = GetAskedButtonVisibility();
			if (!GetAskedButtonVisibility()) {
				AskPause(False);
			}
		}

		// ---------------------------------- //
		/**
		 * Does all animations.
		 */
		Void Animate() {
			declare CMlFrame PauseUI = GetPauseUI();
			declare CMlFrame PauseRequestUI = GetPauseRequestUI();

			if (Now < G_LastPauseUIVisibilityChangeTimestamp + C_FadeTime) {
				declare Real Opacity;
				declare Real Scale;
				if (G_PauseState) {
					PauseUI.Show();
					Opacity = AL::EaseInOutSine(Now - G_LastPauseUIVisibilityChangeTimestamp, 0., 1., C_FadeTime);
					Scale = AL::EaseInOutSine(Now - G_LastPauseUIVisibilityChangeTimestamp, 1.1, -0.1, C_FadeTime);
				} else {
					Opacity = AL::EaseInOutSine(Now - G_LastPauseUIVisibilityChangeTimestamp, 1., -1., C_FadeTime);
					Scale = AL::EaseInOutSine(Now - G_LastPauseUIVisibilityChangeTimestamp, 1., 0.1, C_FadeTime);
				}
				ApplyOpacityToChildren(PauseUI, Opacity);
				PauseUI.RelativeScale = Scale;

			} else if (!G_PauseState) {
				PauseUI.Hide();
			}

			if (Now < G_LastPauseRequestUIVisibilityChangeTimestamp + C_FadeTime) {
				declare Real Opacity;
				declare Real PosY;
				if (G_PauseRequestState) {
					PauseRequestUI.Show();
					Opacity = AL::EaseInOutSine(Now - G_LastPauseRequestUIVisibilityChangeTimestamp, 0., 1., C_FadeTime);
					PosY = AL::EaseInOutSine(Now - G_LastPauseRequestUIVisibilityChangeTimestamp, 100., -25., C_FadeTime);
				} else {
					Opacity = AL::EaseInOutSine(Now - G_LastPauseRequestUIVisibilityChangeTimestamp, 1., -1., C_FadeTime);
					PosY = AL::EaseInOutSine(Now - G_LastPauseRequestUIVisibilityChangeTimestamp, 75., 25., C_FadeTime);
				}
				ApplyOpacityToChildren(PauseRequestUI, Opacity);
				PauseRequestUI.RelativePosition.Y = PosY;

			} else if (!G_PauseRequestState) {
				PauseRequestUI.Hide();
			}

			declare CMlLabel	ResumeLabel				<=> (Page.GetFirstChild("resume-sub")	as CMlLabel);
			declare CMlLabel	SaveLabel				<=> (Page.GetFirstChild("save-sub")		as CMlLabel);
			declare CMlLabel	QuitLabel				<=> (Page.GetFirstChild("quit-sub")		as CMlLabel);

			declare CMlQuad		ResumeAdditionalGlow	<=> (Page.GetFirstChild("resume-glow")	as CMlQuad);
			declare CMlQuad		SaveAdditionalGlow		<=> (Page.GetFirstChild("save-glow")	as CMlQuad);
			declare CMlQuad		QuitAdditionalGlow		<=> (Page.GetFirstChild("quit-glow")	as CMlQuad);

			if (G_LastLabelChangeTimestamp.existskey(ResumeLabel) && Now < G_LastLabelChangeTimestamp[ResumeLabel] + C_FadeTime) {
				ResumeAdditionalGlow.Show();
				ResumeAdditionalGlow.Opacity = AL::EaseInOutQuad(Now - G_LastLabelChangeTimestamp[ResumeLabel], 1., -1., C_FadeTime);
			} else {
				ResumeAdditionalGlow.Hide();
			}

			if (G_LastLabelChangeTimestamp.existskey(SaveLabel) && Now < G_LastLabelChangeTimestamp[SaveLabel] + C_FadeTime) {
				SaveAdditionalGlow.Show();
				SaveAdditionalGlow.Opacity = AL::EaseInOutQuad(Now - G_LastLabelChangeTimestamp[SaveLabel], 1., -1., C_FadeTime);
			} else {
				SaveAdditionalGlow.Hide();
			}

			if (G_LastLabelChangeTimestamp.existskey(QuitLabel) && Now < G_LastLabelChangeTimestamp[QuitLabel] + C_FadeTime) {
				QuitAdditionalGlow.Show();
				QuitAdditionalGlow.Opacity = AL::EaseInOutQuad(Now - G_LastLabelChangeTimestamp[QuitLabel], 1., -1., C_FadeTime);
			} else {
				QuitAdditionalGlow.Hide();
			}


			declare netwrite Boolean Cli_Pause_P_WantsToPause for UI;
			declare CMlLabel BtnPause <=> (Page.GetFirstChild("btn-pause") as CMlLabel);

			declare Text BtnPauseText = "Pause";
			if (Cli_Pause_P_WantsToPause) {
				BtnPauseText = "Cancel";
			}
			BtnPause.SetText(BtnPauseText);

		}

		// ---------------------------------- //
		/**
		 * Notifies that a label changed.
		 */
		Void NotifyLabelChange(CMlLabel _ChangedLabel) {
			G_LastLabelChangeTimestamp[_ChangedLabel] = Now;
		}
		
		// ---------------------------------- //
		/**
		 * Count the initialized players.
		 *
		 * @return The number of players.
		 */
		Integer CountPlayers() {
			declare netread Text[Integer] Srv_Player_G_Players for Teams[0];
			return Srv_Player_G_Players.count;
		}

		// ---------------------------------- //
		/**
		 * Updates the labels under the action buttons.
		 */
		Void UpdateActionsLabels() {
			
			declare netread Text[Text]		Srv_Pause_G_ActionOpinions						for Teams[0];

			declare			CMlLabel		ResumeLabel	<=> (Page.GetFirstChild("resume-sub")	as CMlLabel);
			declare			CMlLabel		SaveLabel	<=> (Page.GetFirstChild("save-sub")		as CMlLabel);
			declare			CMlLabel		QuitLabel	<=> (Page.GetFirstChild("quit-sub")		as CMlLabel);

			declare			Integer			PlayersCount		= CountPlayers();

			declare			Integer			ResumeOpinionsCount	= 0;
			declare			Integer			SaveOpinionsCount	= 0;
			declare			Integer			QuitOpinionsCount	= 0;

			foreach (Opinion in Srv_Pause_G_ActionOpinions) {
				switch (Opinion) {
					case "btn-resume": {
						ResumeOpinionsCount += 1;
					}
					case "btn-save": {
						SaveOpinionsCount += 1;
					}
					case "btn-quit": {
						QuitOpinionsCount += 1;
					}
				}
			}

			declare ResumeText = TL::Compose("%1 in %2 players", TL::ToText(ResumeOpinionsCount), TL::ToText(PlayersCount));
			if (ResumeLabel.Value != ResumeText) {
				ResumeLabel.SetText(ResumeText);
				NotifyLabelChange(ResumeLabel);
			}

			declare SaveText = TL::Compose("%1 in %2 players", TL::ToText(SaveOpinionsCount), TL::ToText(PlayersCount));
			if (SaveLabel.Value != SaveText) {
				SaveLabel.SetText(SaveText);
				NotifyLabelChange(SaveLabel);
			}

			declare QuitText = TL::Compose("%1 in %2 players", TL::ToText(QuitOpinionsCount), TL::ToText(PlayersCount));
			if (QuitLabel.Value != QuitText) {
				QuitLabel.SetText(QuitText);
				NotifyLabelChange(QuitLabel);
			}


		}

		// ---------------------------------- //
		/**
		 * Checks if the game is paused.
		 *
		 * @return True if the game is paused, False otherwise.
		 */
		Boolean IsPaused() {
			declare netread Boolean Srv_Pause_G_IsPaused for Teams[0];
			return Srv_Pause_G_IsPaused;
		}

		// ---------------------------------- //
		/**
		 * Pause loop.
		 */
		Void PauseLoop() {

			TogglePauseUIVisibility(True);
			SetSelectedPauseChoice("");

			while (IsPaused()) {
				yield;
				LoopStart();
				Animate();

				UpdateActionsLabels();

				foreach (Event in PendingEvents) {
					switch (Event.Type) {
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId != "btn-resume" && Event.ControlId != "btn-save" && Event.ControlId != "btn-quit") continue;

							SetSelectedPauseChoice(Event.ControlId);
						}
					}
				}

			}

			TogglePauseUIVisibility(False);
			SetSelectedPauseChoice("");

		}

		// ---------------------------------- //
		/**
		 * Get the server's player logins.
		 *
		 * @return The players.
		 */
		Text[Integer] GetPlayers() {
			declare netread Text[Integer] Srv_Player_G_Players for Teams[0];
			return Srv_Player_G_Players;
		}

		// ---------------------------------- //
		/**
		 * Checks if there are players initialized.
		 *
		 * @return True if players are initialized, False otherwise.
		 */
		Boolean ArePlayersInitialized() {
			return (GetPlayers().count > 0);
		}

		Void Init() {
			while (InputPlayer == Null) { yield; }
			while (InputPlayer.User == Null) { yield; }
			while (!ArePlayersInitialized()) { yield; }
			
			SetSelectedPauseChoice(""); // Init pause choice
			TogglePauseRequestUIVisibility(False);
			TogglePauseUIVisibility(False);
			AskPause(False);
		}

		// ---------------------------------- //
		/**
		 * Main script.
		 */
		main() {

			Init();

			declare Boolean LastLoopTurnIsPause = False;

			declare CMlLabel BtnPause <=> (Page.GetFirstChild("btn-pause") as CMlLabel);

			while (True) {
				yield;
				LoopStart();
				Animate();

				if (LastLoopTurnIsPause) continue; // To avoid showing once again a past pause
				
				if (IsPaused()) {
					TogglePauseRequestUIVisibility(False); // Hides the pause request UI before entering the pause loop.
					PauseLoop();
					AskPause(False);
					continue;
				}

				declare Boolean[Text] PauseOpinions = GetPauseOpinions();
				if (IsAnyTrue(PauseOpinions)) {
					SetPauseRequestUIValues(CountAllTrues(PauseOpinions), CountPlayers(), IsPauseAsked());
					TogglePauseRequestUIVisibility(True);
				} else {
					TogglePauseRequestUIVisibility(False);
				}

				foreach (Event in PendingEvents) {
					switch (Event.Type) {
						case CMlEvent::Type::KeyPress: {
							if (Event.KeyName == "P" && GetAskedButtonVisibility()) {
								declare Text TextToPut;

								if (!IsPauseAsked()) {
									TextToPut = "Cancel the pause";
									AskPause(True);
									Audio.PlaySoundEvent(CAudioManager::ELibSound::ShowMenu, 0, 0.);
								} else {
									TextToPut = "Ask a pause";
									AskPause(False);
									Audio.PlaySoundEvent(CAudioManager::ELibSound::HideMenu, 0, 0.);
								}

								BtnPause.Value = TextToPut;
							}
						}
						case CMlEvent::Type::MouseClick: {
							if (Event.Control == BtnPause) {
								declare Text TextToPut;

								if (!IsPauseAsked()) {
									AskPause(True);
									Audio.PlaySoundEvent(CAudioManager::ELibSound::ShowMenu, 0, 0.);
								} else {
									AskPause(False);
									Audio.PlaySoundEvent(CAudioManager::ELibSound::HideMenu, 0, 0.);
								}
							}
						}
					}
				}

				LastLoopTurnIsPause = False;

			}

		}

	--></script>

</manialink>