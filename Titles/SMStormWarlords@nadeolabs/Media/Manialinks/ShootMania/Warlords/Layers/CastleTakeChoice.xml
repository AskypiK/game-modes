<manialink version="2" name="{( LayerName )}">
	<frame id="scale" posn="0 0 -15" scale="0.5">

		<label id="title" posn="0 30 5" sizen="260 10" text="What will you do?" valign="center2" halign="center" style="TextTitle3" textsize="10" />
		<quad id="topglow2" posn="0 30 4" sizen="130 20" bgcolor="FFFA" valign="center" halign="center" style="Bgs1" substyle="Glow" />
		<quad id="topglow1" posn="0 30 3" sizen="260 20" bgcolor="FFFA" valign="center" halign="center" style="Bgs1" substyle="Glow" />

		<label id="desc" posn="0 16 2" sizen="212 5" text="Do you want to take the planet or to let it to others?" valign="center" halign="center" textsize="4" />

		<frame id="takecontainer" posn="-44 -8 2">
			<quad id="take-arrow" posn="32 -10 7" sizen="20 20" style="UIConstructionBullet_Buttons" substyle="Trail" autoscale="0" rot="90" halign="center" valign="center" styleselected="1" />
			<label id="title" posn="0 0 6" sizen="64 16" text="$sTake it" halign="center" valign="center" style="TextTitle3" textsize="5" />
			<quad id="contour" posn="0 0 4" sizen="64 20" halign="center" valign="center" style="Bgs1" substyle="BgColorContour" scale="1.015" />
			<quad id="gradbg" posn="0 0 3" sizen="64 20" halign="center" valign="center" style="Bgs1" substyle="BgGradBottom" />
			<quad id="colorbg" posn="0 0 2" sizen="64 20" halign="center" valign="center" bgcolor="0F0" data-opacity="0.5" />
			<quad id="take-btn" posn="0 0 1" sizen="64 20" halign="center" valign="center" style="BgsButtons" substyle="BgButtonSmall2" scriptevents="1" />
			<quad id="take-glow" posn="0 0 0" sizen="20.5 9.5" halign="center" valign="center" style="Bgs1InRace" substyle="BgButtonGlow" scale="4" colorize="0F0" data-opacity="0.25" />
		</frame>

		<frame id="letcontainer" posn="44 -8 2">
			<quad id="let-arrow" posn="32 -10 7" sizen="20 20" style="UIConstructionBullet_Buttons" substyle="Trail" autoscale="0" rot="90" halign="center" valign="center" styleselected="1" />
			<label id="title" posn="0 0 6" sizen="64 16" text="$sLet it" halign="center" valign="center" style="TextTitle3" textsize="5" />
			<quad id="contour" posn="0 0 4" sizen="64 20" halign="center" valign="center" style="Bgs1" substyle="BgColorContour" scale="1.015" />
			<quad id="gradbg" posn="0 0 3" sizen="64 20" halign="center" valign="center" style="Bgs1" substyle="BgGradBottom" />
			<quad id="colorbg" posn="0 0 2" sizen="64 20" halign="center" valign="center" bgcolor="F00" data-opacity="0.5" />
			<quad id="let-btn" posn="0 0 1" sizen="64 20" halign="center" valign="center" substyle="BgButtonSmall2" style="BgsButtons" scriptevents="1" />
			<quad id="let-glow" posn="0 0 0" sizen="20.5 9.5" halign="center" valign="center" style="Bgs1InRace" substyle="BgButtonGlow" scale="4" colorize="F00" data-opacity="0.25" />
		</frame>

		<quad id="glowbar" posn="0 30 2" sizen="206 8" style="Bgs1InRace" substyle="BgGlow2" halign="center" valign="center" />
		<quad id="metalbar" posn="0 -31 2" sizen="200 2" style="Bgs1InRace" substyle="BgMetalBar" halign="center" valign="center" />

		<quad id="bluebg" posn="0 0 1" sizen="200 61" valign="center" halign="center" style="Bgs1" substyle="BgCardProperty" />

		<quad id="shadow" posn="0 -0.5 0" sizen="210.25 73.5" valign="center" halign="center" style="Bgs1" substyle="BgButtonShadow" />
	</frame>

	<script><!--

		#Include "TextLib"		as TL
		#Include "AnimLib"		as AL

		#Const C_OpenCloseDuration	{( OpenCloseDuration )}

		CMlFrame GetScaleFrame() {
			return (Page.GetFirstChild("scale") as CMlFrame);
		}

		CMlQuad GetBtnTake() {
			return (Page.GetFirstChild("take-btn") as CMlQuad);
		}

		CMlQuad GetBtnLet() {
			return (Page.GetFirstChild("let-btn") as CMlQuad);
		}

		CMlQuad GetTakeArrow() {
			return (Page.GetFirstChild("take-arrow") as CMlQuad);
		}

		CMlQuad GetLetArrow() {
			return (Page.GetFirstChild("let-arrow") as CMlQuad);
		}
	
		// ---------------------------------- //
		/**
		 * Applies opacity recursively.
		 *
		 * @param _Opacity The opacity to apply.
		 * @param _Control The parent control to start with.
		 */
		Void ApplyOpacity(Real _Opacity, CMlControl _Control) {
			switchtype (_Control) {
				case CMlQuad: {
					declare CMlQuad QuadControl = (_Control as CMlQuad);
					if (QuadControl.DataAttributeExists("opacity")) {
						declare Real Opacity = TL::ToReal(QuadControl.DataAttributeGet("opacity"));
						QuadControl.Opacity = Opacity;
					} else {
						QuadControl.Opacity = _Opacity;
					}
				}
				case CMlLabel: {
					declare CMlLabel LabelControl = (_Control as CMlLabel);
					if (LabelControl.DataAttributeExists("opacity")) {
						declare Real Opacity = TL::ToReal(LabelControl.DataAttributeGet("opacity"));
						LabelControl.Opacity = Opacity;
					} else {
						LabelControl.Opacity = _Opacity;
					}
				}
				case CMlFrame: {
					declare CMlFrame FrameControl = (_Control as CMlFrame);
					foreach (Child in FrameControl.Controls) {
						ApplyOpacity(_Opacity, Child);
					}
				}
			}
		}

		// ---------------------------------- //
		/**
		 * Sends the local player's choice.
		 *
		 * @param _Choice The local player's choice.
		 */
		Void SetChoice(Text _Choice) {
			declare netwrite Text Cli_UI_P_Choice for UI;
			Cli_UI_P_Choice = _Choice;
		}

		// ---------------------------------- //
		/**
		 * Gets the local player's choice.
		 *
		 * @return The local player's choice.
		 */
		Text GetChoice() {
			declare netwrite Text Cli_UI_P_Choice for UI;
			return Cli_UI_P_Choice;
		}

		Void Init() {
			while (InputPlayer == Null) { yield; }
			while (InputPlayer.User == Null) { yield; }

			SetChoice("take");

			declare Integer ScriptStart for This;
			ScriptStart = Now;
		}

		Void LoopStart() {

		}

		Void Animate() {
			declare Integer	ScriptStart for This;
			declare Text	Choice = GetChoice();

			declare Integer LastBtnClickTimestamp for This;

			declare CMlFrame ScaleFrame = GetScaleFrame();
			declare CMlQuad TakeArrow = GetTakeArrow();
			declare CMlQuad LetArrow = GetLetArrow();

			ScaleFrame.RelativeScale = AL::EaseOutExp(Now - ScriptStart, 0.6, -0.1, C_OpenCloseDuration);
			ApplyOpacity(AL::EaseOutExp(Now - ScriptStart, 0., 1., C_OpenCloseDuration), ScaleFrame);

			switch (Choice) {
				case "take": {
					TakeArrow.Show();
					LetArrow.Hide();
				}
				case "let": {
					TakeArrow.Hide();
					LetArrow.Show();
				}
			}

			if (TakeArrow.Visible) {
				TakeArrow.RelativeScale = AL::EaseOutExp(Now - LastBtnClickTimestamp, 1.2, -0.2, C_OpenCloseDuration);
				TakeArrow.RelativePosition.X = AL::EaseOutExp(Now - LastBtnClickTimestamp, 36., -4., C_OpenCloseDuration);
				TakeArrow.RelativePosition.Y = AL::EaseOutExp(Now - LastBtnClickTimestamp, -14., 4., C_OpenCloseDuration);
			} else if (LetArrow.Visible) {
				LetArrow.RelativeScale = AL::EaseOutExp(Now - LastBtnClickTimestamp, 1.2, -0.2, C_OpenCloseDuration);
				LetArrow.RelativePosition.X = AL::EaseOutExp(Now - LastBtnClickTimestamp, 36., -4., C_OpenCloseDuration);
				LetArrow.RelativePosition.Y = AL::EaseOutExp(Now - LastBtnClickTimestamp, -14., 4., C_OpenCloseDuration);
			}
		}

		main() {

			Init();
			
			declare CMlQuad BtnTake = GetBtnTake();
			declare CMlQuad BtnLet = GetBtnLet();

			declare netread Boolean Srv_UI_G_CastleTakeChoiceVisibility for Teams[0];

			declare Integer LastBtnClickTimestamp for This;

			while (True) {
	
				LoopStart();

				foreach (Event in PendingEvents) {
					switch (Event.Type) {
						case CMlEvent::Type::MouseClick: {
							switch (Event.Control) {
								case BtnTake: {
									SetChoice("take");
									LastBtnClickTimestamp = Now;
								}
								case BtnLet: {
									SetChoice("let");
									LastBtnClickTimestamp = Now;
								}
							}
						}
					}
				}

				Animate();
				yield;

				// If the server wants to hide this interface, breaking this loop.
				if (!Srv_UI_G_CastleTakeChoiceVisibility) break;

			}

			declare Integer EndTimestamp = Now;
			declare CMlFrame ScaleFrame = GetScaleFrame();

			// Loops to hide this interface.
			while (Now - EndTimestamp < C_OpenCloseDuration) {
				yield;
				// ANIMATION

				ScaleFrame.RelativeScale = AL::EaseOutExp(Now - EndTimestamp, 0.5, 0.1, C_OpenCloseDuration);
				ApplyOpacity(AL::EaseOutExp(Now - EndTimestamp, 1., -1., C_OpenCloseDuration), ScaleFrame);
			}

			ScaleFrame.Hide();
		
			yield;

		}

	--></script>
</manialink>