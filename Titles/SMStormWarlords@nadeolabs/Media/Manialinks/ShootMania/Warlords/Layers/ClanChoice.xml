<manialink version="2" name="{( LayerName )}">
	<frame id="scale" posn="0 0 -15" scale="0.5">

		<label id="title" posn="0 30 5" sizen="130 10" text="Who will you join?" valign="center2" halign="center" style="TextTitle3" textsize="10"/>
		<quad id="topglow2" posn="0 30 4" sizen="130 20" bgcolor="FFFA" valign="center" halign="center" style="Bgs1" substyle="Glow"/>
		<quad id="topglow1" posn="0 30 3" sizen="130 20" bgcolor="FFFA" valign="center" halign="center" style="Bgs1" substyle="Glow"/>

		<label id="desc" posn="0 16 2" sizen="212 5" text="Choose the one you will help during the following battle." valign="center" halign="center" textsize="4"/>

		<frame id="defensecontainer" posn="-44 -8 2">
			<quad id="defenders-arrow" posn="32 -10 7" sizen="20 20" style="UIConstructionBullet_Buttons" substyle="Trail" autoscale="0" rot="90" halign="center" valign="center" styleselected="1" />
			<label id="title" posn="0 0 6" sizen="64 16" text="$sDefenders" halign="center" valign="center" style="TextTitle3" textsize="5"/>
			<label id="defender-name" posn="0 -6 5" sizen="64 8" text="$sWith someone" halign="center" valign="center" style="TextTitle3" textsize="2"/>
			<quad id="contour" posn="0 0 4" sizen="64 20" halign="center" valign="center" style="Bgs1" substyle="BgColorContour" scale="1.015"/>
			<quad id="gradbg" posn="0 0 3" sizen="64 20" halign="center" valign="center" style="Bgs1" substyle="BgGradBottom"/>
			<quad id="colorbg" posn="0 0 2" sizen="64 20" halign="center" valign="center" bgcolor="0F0" data-opacity="0.5" />
			<quad id="defenders-btn" posn="0 0 1" sizen="64 20" halign="center" valign="center" scriptevents="1" style="BgsButtons" substyle="BgButtonSmall2"/>
			<quad id="defenders-glow" posn="0 0 0" sizen="20.5 9.5" halign="center" valign="center" style="Bgs1InRace" substyle="BgButtonGlow" scale="4" colorize="0F0" data-opacity="0.25" />
		</frame>

		<frame id="attackcontainer" posn="44 -8 2">
			<quad id="attackers-arrow" posn="32 -10 7" sizen="20 20" style="UIConstructionBullet_Buttons" substyle="Trail" autoscale="0" rot="90" halign="center" valign="center" styleselected="1" />
			<label id="title" posn="0 0 6" sizen="64 16" text="$sAttackers" halign="center" valign="center" style="TextTitle3" textsize="5"/>
			<label id="attacker-name" posn="0 -6 5" sizen="64 8" text="$sWith someone else" halign="center" valign="center" style="TextTitle3" textsize="2"/>
			<quad id="contour" posn="0 0 4" sizen="64 20" halign="center" valign="center" style="Bgs1" substyle="BgColorContour" scale="1.015"/>
			<quad id="gradbg" posn="0 0 3" sizen="64 20" halign="center" valign="center" style="Bgs1" substyle="BgGradBottom"/>
			<quad id="colorbg" posn="0 0 2" sizen="64 20" halign="center" valign="center" bgcolor="F00" data-opacity="0.5" />
			<quad id="attackers-btn" posn="0 0 1" sizen="64 20" halign="center" valign="center" scriptevents="1" substyle="BgButtonSmall2" style="BgsButtons"/>
			<quad id="attackers-glow" posn="0 0 0" sizen="20.5 9.5" halign="center" valign="center" style="Bgs1InRace" substyle="BgButtonGlow" scale="4" colorize="F00" data-opacity="0.25" />
		</frame>

		<quad id="glowbar" posn="0 30 2" sizen="206 8" style="Bgs1InRace" substyle="BgGlow2" halign="center" valign="center"/>
		<quad id="metalbar" posn="0 -31 2" sizen="200 2" style="Bgs1InRace" substyle="BgMetalBar" halign="center" valign="center"/>

		<quad id="bluebg" posn="0 0 1" sizen="200 61" valign="center" halign="center" style="Bgs1" substyle="BgCardProperty"/>

		<quad id="shadow" posn="0 -0.5 0" sizen="210.25 73.5" valign="center" halign="center" style="Bgs1" substyle="BgButtonShadow"/>
	</frame>

	<script><!--

		#Include "TextLib" as TL
		#Include "AnimLib" as AL
	
		// ---------------------------------- //
		/**
		 * Applies opacity recursively.
		 *
		 * @param _Opacity The opacity to apply.
		 * @param _Control The parent control to start with.
		 */
		Void ApplyOpacity(Real _Opacity, CMlControl _Control) {
			switchtype (_Control) {
				case CMlQuad: {
					declare CMlQuad QuadControl = (_Control as CMlQuad);
					if (QuadControl.DataAttributeExists("opacity")) {
						declare Real Opacity = TL::ToReal(QuadControl.DataAttributeGet("opacity"));
						QuadControl.Opacity = Opacity;
					} else {
						QuadControl.Opacity = _Opacity;
					}
				}
				case CMlLabel: {
					declare CMlLabel LabelControl = (_Control as CMlLabel);
					if (LabelControl.DataAttributeExists("opacity")) {
						declare Real Opacity = TL::ToReal(LabelControl.DataAttributeGet("opacity"));
						LabelControl.Opacity = Opacity;
					} else {
						LabelControl.Opacity = _Opacity;
					}
				}
				case CMlFrame: {
					declare CMlFrame FrameControl = (_Control as CMlFrame);
					foreach (Child in FrameControl.Controls) {
						ApplyOpacity(_Opacity, Child);
					}
				}
			}
		}

		// ---------------------------------- //
		/**
		 * Sends the local player's clan choice.
		 *
		 * @param _Choice The local player's clan choice.
		 */
		Void SetClanChoice(Text _Choice) {
			declare netwrite Text Cli_UI_P_Choice for UI;
			Cli_UI_P_Choice = _Choice;
		}

		// ---------------------------------- //
		/**
		 * Gets the local player's clan choice.
		 *
		 * @return The local player's clan choice.
		 */
		Text GetClanChoice() {
			declare netwrite Text Cli_UI_P_Choice for UI;
			return Cli_UI_P_Choice;
		}

		// ---------------------------------- //
		/**
		 * Main script.
		 */
		main() {

			while (InputPlayer == Null) yield;

		
			declare CMlFrame	ScaleFrame		<=> (Page.GetFirstChild("scale")			as CMlFrame);

			declare CMlQuad		DefendersBtn	<=> (Page.GetFirstChild("defenders-btn")	as CMlQuad);
			declare CMlQuad		AttackersBtn	<=> (Page.GetFirstChild("attackers-btn")	as CMlQuad);

			declare CMlLabel	DefenderName	<=> (Page.GetFirstChild("defender-name")	as CMlLabel);
			declare CMlLabel	AttackerName	<=> (Page.GetFirstChild("attacker-name")	as CMlLabel);

			declare CMlQuad		DefendersGlow	<=> (Page.GetFirstChild("defenders-glow")	as CMlQuad);
			declare CMlQuad		AttackersGlow	<=> (Page.GetFirstChild("attackers-glow")	as CMlQuad);

			declare CMlQuad		DefendersArrow	<=> (Page.GetFirstChild("defenders-arrow")	as CMlQuad);
			declare CMlQuad		AttackersArrow	<=> (Page.GetFirstChild("attackers-arrow")	as CMlQuad);


			SetClanChoice("Defenders");

			declare netread Boolean Srv_UI_G_ClanChoiceVisibility for Teams[0];
			wait(Srv_UI_G_ClanChoiceVisibility);

			declare netread Text Srv_UI_G_DefenderName for Teams[0];
			declare netread Text Srv_UI_G_AttackerName for Teams[0];

			declare Integer LastBtnClickTimestamp;

			declare Integer StartTimestamp = Now;

			DefenderName.SetText(TL::Compose(_("$sWith $<%1$>"), Srv_UI_G_DefenderName));
			AttackerName.SetText(TL::Compose(_("$sWith $<%1$>"), Srv_UI_G_AttackerName));
		
			// Loops while this interface is visible.
			while (True) {
				yield;

				foreach (Event in PendingEvents) {
					switch (Event.Type) {
						case CMlEvent::Type::MouseOver: {
							switch (Event.Control) {
								case DefendersBtn: {
									DefendersGlow.Opacity = 1.;
								}
								case AttackersBtn: {
									AttackersGlow.Opacity = 1.;
								}
							}
						}
						case CMlEvent::Type::MouseOut: {
							switch (Event.Control) {
								case DefendersBtn: {
									DefendersGlow.Opacity = 0.25;
								}
								case AttackersBtn: {
									AttackersGlow.Opacity = 0.25;
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							switch (Event.Control) {
								case DefendersBtn: {
									SetClanChoice("Defenders");
									LastBtnClickTimestamp = Now;
								}
								case AttackersBtn: {
									SetClanChoice("Attackers");
									LastBtnClickTimestamp = Now;
								}
							}
						}
					}
				}

				switch (GetClanChoice()) {
					case "Defenders": {
						DefendersArrow.Show();
						AttackersArrow.Hide();
					}
					case "Attackers": {
						DefendersArrow.Hide();
						AttackersArrow.Show();
					}
				}


				// ANIMATION

				ScaleFrame.RelativeScale = AL::EaseOutExp(Now - StartTimestamp, 0.6, -0.1, 500);
				ApplyOpacity(AL::EaseOutExp(Now - StartTimestamp, 0., 1., 500), ScaleFrame);

				if (DefendersArrow.Visible) {
					DefendersArrow.RelativeScale = AL::EaseOutExp(Now - LastBtnClickTimestamp, 1.2, -0.2, 500);
					DefendersArrow.RelativePosition.X = AL::EaseOutExp(Now - LastBtnClickTimestamp, 36., -4., 500);
					DefendersArrow.RelativePosition.Y = AL::EaseOutExp(Now - LastBtnClickTimestamp, -14., 4., 500);
				} else if (AttackersArrow.Visible) {
					AttackersArrow.RelativeScale = AL::EaseOutExp(Now - LastBtnClickTimestamp, 1.2, -0.2, 500);
					AttackersArrow.RelativePosition.X = AL::EaseOutExp(Now - LastBtnClickTimestamp, 36., -4., 500);
					AttackersArrow.RelativePosition.Y = AL::EaseOutExp(Now - LastBtnClickTimestamp, -14., 4., 500);
				}

				// If the server wants to hide this interface, breaking this loop.
				if (!Srv_UI_G_ClanChoiceVisibility) break;

			}

			declare Integer EndTimestamp = Now;

			// Loops to hide this interface.
			while (Now - EndTimestamp < 500) {
				yield;
				// ANIMATION

				ScaleFrame.RelativeScale = AL::EaseOutExp(Now - EndTimestamp, 0.5, 0.1, 500);
				ApplyOpacity(AL::EaseOutExp(Now - EndTimestamp, 1., -1., 500), ScaleFrame);
			}

			ScaleFrame.Hide();
		
			yield;
		}
	--></script>
</manialink>