<manialink version="2" name="{( LayerName )}">

	<frame id="cursor" posn="0 0 0" scale="1.5">
		<gauge id="gauge" posn="0 -4 3" sizen="34 10" scale="0.25" clan="0" drawbg="0" color="0 1 0" halign="center" valign="center" />
		<frame id="timer" posn="0 0 0">

			<frame id="leftclip" halign="right" valign="center" clip="1" clipposn="-5 0" clipsizen="10 10">
				<quad id="left" posn="0 0 2" sizen="10 10" halign="center" valign="center" image="{( LeftCursorImageUrl )}" opacity="0.8" />
			</frame>

			<frame id="rightclip" halign="right" valign="center" clip="1" clipposn="5 0" clipsizen="10 10">
				<quad id="right" posn="0 0 1" sizen="10 10" halign="center" valign="center" image="{( RightCursorImageUrl )}" opacity="0.8" />
			</frame>

			<quad id="bg" posn="0 0 0" sizen="10 10" halign="center" valign="center" opacity="0.25" />
		</frame>
	</frame>

	<script><!--

		#Include "MathLib" as ML
		#Include "AnimLib" as AL

		#Const	C_RedClockTime	5000
		#Const	C_NormalBgUrl	"{( NormalBgImageUrl )}"
		#Const	C_AdvancedBgUrl	"{( AdvancedBgImageUrl )}"

		// ---------------------------------- //
		/**
		 * Gets the main frame which contains the cursor elements.
		 *
		 * @return The main frame.
		 */
		CMlFrame GetCursorFrame() {
			return (Page.GetFirstChild("cursor") as CMlFrame);
		}
		
		// ---------------------------------- //
		/**
		 * Gets the left hand side frame of the cursor.
		 *
		 * @return The left hand side frame.
		 */
		CMlFrame GetLeftClipFrame() {
			return (Page.GetFirstChild("leftclip") as CMlFrame);
		}
		
		// ---------------------------------- //
		/**
		 * Gets the left hand side quad of the cursor.
		 *
		 * @return The left hand side quad.
		 */
		CMlQuad GetLeftQuad() {
			return (Page.GetFirstChild("left") as CMlQuad);
		}

		// ---------------------------------- //
		/**
		 * Gets the right hand side frame of the cursor.
		 *
		 * @return The right hand side frame.
		 */
		CMlFrame GetRightClipFrame() {
			return (Page.GetFirstChild("rightclip") as CMlFrame);
		}

		// ---------------------------------- //
		/**
		 * Gets the right hand side quad of the cursor.
		 *
		 * @return The right hand side quad.
		 */
		CMlQuad GetRightQuad() {
			return (Page.GetFirstChild("right") as CMlQuad);
		}
		
		// ---------------------------------- //
		/**
		 * Gets the cursor's move gauge located under the circle.
		 *
		 * @return The move gauge.
		 */
		CMlGauge GetGauge() {
			return (Page.GetFirstChild("gauge") as CMlGauge);
		}

		// ---------------------------------- //
		/**
		 * Gets the cursor's background quad.
		 *
		 * @return The background quad.
		 */
		CMlQuad GetBgQuad() {
			return (Page.GetFirstChild("bg") as CMlQuad);
		}
		
		// ---------------------------------- //
		/**
		 * Changes the display, switches the background image and hides the gauge.
		 */
		Void SetNormalModeDisplay() {
			GetGauge().Hide();
			GetBgQuad().ImageUrl = C_NormalBgUrl;
		}
		
		// ---------------------------------- //
		/**
		 * Changes the display, switches the background image and shows the gauge.
		 */
		Void SetAdvancedModeDisplay() {
			GetGauge().Show();
			GetBgQuad().ImageUrl = C_AdvancedBgUrl;
		}
		
		// ---------------------------------- //
		/**
		 * Main script
		 */
		main() {
			
			declare Integer LastCountdownEndTime;
			declare Integer CountdownStartTime;

			declare CMlFrame	CursorFrame		= GetCursorFrame();
			declare CMlQuad		LeftQuad		= GetLeftQuad();
			declare CMlQuad		RightQuad		= GetRightQuad();

			SetNormalModeDisplay();
	
			while (True) {

				if (LastCountdownEndTime != UI.CountdownEndTime) {
					LastCountdownEndTime = UI.CountdownEndTime;
					CountdownStartTime = GameTime;

					RightQuad.RelativeRotation		= 0.;
					LeftQuad.RelativeRotation		= 0.;
					RightQuad.Colorize				= <0., 1., 0.>;
					LeftQuad.Show();
				}

				CursorFrame.RelativePosition = <MouseX, MouseY, 0.>;

				declare Real Rot = AL::EaseLinear(GameTime - CountdownStartTime, 0., 180., LastCountdownEndTime - CountdownStartTime); //< Calculates the quad rotation to match the remaining time.

				if (GameTime - CountdownStartTime > (LastCountdownEndTime - CountdownStartTime) / 2) {
					RightQuad.RelativeRotation		= 180 + -Rot * 2;
					LeftQuad.Hide();
				} else {
					LeftQuad.RelativeRotation		= -Rot * 2;
				}

				if (LastCountdownEndTime - GameTime < C_RedClockTime) {
					RightQuad.Colorize = <1., 0., 0.>;
				}

				yield;

			}

		}

	--></script>

</manialink>