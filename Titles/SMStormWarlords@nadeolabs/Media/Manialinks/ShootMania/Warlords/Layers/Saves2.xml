<manialink version="2" name="{( LayerName )}">
	<framemodel id="playerstate">
		<quad id="emblem" posn="-45 0 0" sizen="6 6" halign="center" valign="center" />
		<label id="login" posn="-42 0 0" sizen="89 5" style="TextTitle3" halign="left" valign="center2" text="Player name right here"/>
		<label id="state" posn="47 0 -12" sizen="94 5" style="TextTitle3" halign="right" valign="center2" text="Missing" textcolor="F08"/>
	</framemodel>

	<framemodel id="castle">

		<quad id="capital" posn="0 0 3" sizen="20 20" scale="0.75" halign="center" valign="center" image="{( CapitalImageUrl )}" hidden="1" />

		<frame id="scale">

			<quad id="lightproj" rot="-45" posn="0 0 2" halign="center" valign="center" scale="0.75" sizen="20.5 20.5" image="{( LightProjImageUrl )}" />
			<quad posn="0 0 1" id="typeimage" class="rotable" sizen="20 20" halign="center" valign="center" scale="0.75" image="{( CastleTypeImageUrl )}" opacity="0.98" data-rotvar="0.1" />

			<quad id="halo" posn="0 0 0" sizen="40 40" halign="center" valign="center" style="Bgs1" substyle="Glow" opacity="0.75" />
			
		</frame>
	</framemodel>
		
	<framemodel id="link">
		<quad id="front" posn="0 0 2" sizen="0 0.6" halign="left" valign="center" image="{( LinkFrontImageUrl )}" hidden="1" />
		<quad id="backw" posn="0 0 1" sizen="0 3" halign="left" valign="center" style="Bgs1" substyle="BgWindow4" opacity="0.2"/>
		<quad id="backb" posn="0 0 0" sizen="0 0.7" halign="left" valign="center" style="Bgs1" substyle="BgProgressBar" opacity="0.6"/>
	</framemodel>

	<framemodel id="save">
		<quad id="join" posn="-48 -40 16" sizen="10 10" style="UIConstructionBullet_Buttons" substyle="AnimMode" scriptevents="1"/>
		<quad id="switch" posn="-38 -42 16" sizen="8 8" style="UIConstructionBullet_Buttons" substyle="RootMotionMode" scriptevents="1"/>
		<label id="help" posn="-29 -49.5 16" sizen="40 10" halign="left" valign="bottom" style="TextTitle3" textsize="1"/>

		<frame id="blue" posn="0 0 16">
			<quad id="lblue" posn="-48.5 -25" sizen="8 52" style="Bgs1" substyle="BgGlow2"  halign="center" valign="center"/>
			<quad id="rblue" posn="48.5 -25" sizen="8 52" style="Bgs1" substyle="BgGlow2"  halign="center" valign="center"/>
		</frame>

		<frame id="players" posn="0 -10 15">
			<frameinstance modelid="playerstate" posn="0 0"/>
			<frameinstance modelid="playerstate" posn="0 -6"/>
			<frameinstance modelid="playerstate" posn="0 -12"/>
			<frameinstance modelid="playerstate" posn="0 -18"/>
			<frameinstance modelid="playerstate" posn="0 -24"/>
			<frameinstance modelid="playerstate" posn="0 -30"/>
		</frame>

		<quad id="worldfg" posn="0 -25 14" sizen="96 45" halign="center" valign="center" bgcolor="000"/>

		<frame posn="30 -22 5" id="world" scale="0.25" data-no-opacity="1">
			<frame posn="0 0 3" id="castles">
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
				<frameinstance modelid="castle" hidden="1"/>
			</frame>
			<frame posn="0 0 0" id="links">
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
				<frameinstance modelid="link" hidden="1"/>
			</frame>
		</frame>

		<frame posn="0 -25 4" clip="1" clipsizen="95 44">
			<quad id="worldgrad" posn="-51 0 1" sizen="50 47" halign="left" valign="center" style="Bgs1" substyle="BgGradLeft"/>
			<quad id="worldbg" posn="0 0 0" sizen="96 45" halign="center" valign="center" image="{( BackgroundImageUrl )}"/>
		</frame>
		
		<label id="timestamp" posn="-47 -2.5 3" sizen="94 5" style="TextTitle3" halign="left" text="01/01/1970 12:00" textcolor="8CF"/>
		<label id="turns" posn="47 -2.5 3" sizen="94 5" style="TextTitle3" halign="right" text="42 turns" textcolor="8CF"/>

		<quad id="focus" posn="0 -25 3" sizen="100 50" halign="center" valign="center" scriptevents="1"/>
		
		<quad id="bg" posn="0 -25 1" sizen="100 50" halign="center" valign="center" style="EnergyBar" substyle="EnergyBar"/>
		
		<quad id="glow" posn="0 -25" sizen="29 16" halign="center" valign="center" style="Bgs1" substyle="BgButtonGlow" scale="4"/>
	</framemodel>

	<frame id="main" posn="0 0 5">
		<frame id="saves" posn="0 30 3">
			<frameinstance modelid="save" posn="-105 40"/>
			<frameinstance modelid="save" posn="0 40"/>
			<frameinstance modelid="save" posn="105 40"/>
			
			<frameinstance modelid="save" posn="-105 -30"/>
			<frameinstance modelid="save" posn="0 -30"/>
			<frameinstance modelid="save" posn="105 -30"/>
		</frame>

		<quad id="pageprevious" posn="-2 -80 2" sizen="10 10" style="Icons128x128_1" substyle="BackFocusable" halign="right" valign="center" scriptevents="1"/>
		<label id="page" posn="0 -80 3" sizen="20 10" style="TextTitle3" text="1" halign="center" valign="center2" textsize="8"/>
		<quad id="pagenext" posn="2 -80 2" sizen="10 10" style="Icons128x128_1" substyle="BackFocusable" valign="center" rot="180" halign="right" scriptevents="1"/>

		<quad posn="-170 0 1" sizen="160 180" style="Bgs1" substyle="BgGradLeft" halign="left" valign="center"/>
		<quad posn="170 0 1" sizen="160 180" style="Bgs1" substyle="BgGradRight" halign="right" valign="center"/>
		<quad posn="0 0 0" sizen="320 180" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur"/>
	</frame>

	<script><!--

		#Include "MathLib" as ML
		#Include "TextLib" as TL
		#Include "AnimLib" as AL

		#Const C_CardPerPage				6
		#Const C_BaseLinkSize				2.

		#Const C_OwnedCastleHaloScale		1.4
		#Const C_NotOwnedCastleHaloScale	0.75

		#Const C_EmblemBaseUrl				"{( EmblemBaseUrl )}"

		#Const C_OpeningAnimationDuration	2000
		#Const C_FadeAnimDuration			200

		declare Integer	G_ScriptStart;
		declare Integer	G_SavesReadyTimestamp;
		declare Real	G_RadToDeg;
		declare Integer	G_CurrentPage;

		CMlFrame GetMainFrame() {
			return (Page.GetFirstChild("main") as CMlFrame);
		}

		CMlFrame GetSaveFrameInstancesParentFrame() {
			return (Page.GetFirstChild("saves") as CMlFrame);
		}

		CMlFrame[] GetSaveFrameInstances() {
			declare CMlFrame[] SaveFrameInstances;
			foreach (Control in GetSaveFrameInstancesParentFrame().Controls) {
				if (!(Control is CMlFrame)) continue;
				SaveFrameInstances.add((Control as CMlFrame));
			}
			return SaveFrameInstances;
		}

		CMlFrame SFI_GetCastleFrameInstanceParentFrame(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("castles") as CMlFrame);
		}

		CMlFrame[] SFI_GetCastleFrameInstances(CMlFrame _SaveFrameInstance) {
			declare CMlFrame[] CastleFrameInstances;
			foreach (Control in SFI_GetCastleFrameInstanceParentFrame(_SaveFrameInstance).Controls) {
				if (!(Control is CMlFrame)) continue;
				CastleFrameInstances.add((Control as CMlFrame));
			}
			return CastleFrameInstances;
		}

		CMlFrame SFI_GetWorldFrame(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("world") as CMlFrame);
		}

		CMlFrame SFI_GetLinkFrameInstanceParentFrame(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("links") as CMlFrame);
		}

		CMlFrame[] SFI_GetLinkFrameInstances(CMlFrame _SaveFrameInstance) {
			declare CMlFrame[] LinkFrameInstances;
			foreach (Control in SFI_GetLinkFrameInstanceParentFrame(_SaveFrameInstance).Controls) {
				if (!(Control is CMlFrame)) continue;
				LinkFrameInstances.add((Control as CMlFrame));
			}
			return LinkFrameInstances;
		}

		CMlQuad SFI_GetWorldFgQuad(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("worldfg") as CMlQuad);
		}

		CMlQuad SFI_GetWorldGradQuad(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("worldgrad") as CMlQuad);
		}

		CMlQuad SFI_GetWorldBgQuad(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("worldbg") as CMlQuad);
		}

		CMlQuad SFI_GetLeftBlueQuad(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("lblue") as CMlQuad);
		}

		CMlQuad SFI_GetRightBlueQuad(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("rblue") as CMlQuad);
		}

		CMlLabel SFI_GetTurnsLabel(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("turns") as CMlLabel);
		}

		CMlQuad SFI_GetBgQuad(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("bg") as CMlQuad);
		}

		CMlQuad SFI_GetGlowQuad(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("glow") as CMlQuad);
		}

		CMlQuad SFI_GetFocusQuad(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("focus") as CMlQuad);
		}

		CMlQuad SFI_GetSwitchBtnQuad(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("switch") as CMlQuad);
		}

		CMlQuad SFI_GetJoinBtnQuad(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("join") as CMlQuad);
		}

		CMlLabel SFI_GetHelpLabel(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("help") as CMlLabel);
		}

		CMlLabel SFI_GetTimestampLabel(CMlFrame _SaveFrameInstance) {
			return (_SaveFrameInstance.GetFirstChild("timestamp") as CMlLabel);
		}

		CMlFrame[] SFI_GetPlayerFrameInstances(CMlFrame _SaveFrameInstance) {
			declare CMlFrame PlayerFrameInstancesParentFrame = (_SaveFrameInstance.GetFirstChild("players") as CMlFrame);
			declare CMlFrame[] PlayerFrameInstances;
			foreach (Control in PlayerFrameInstancesParentFrame.Controls) {
				if(!(Control is CMlFrame)) continue;
				PlayerFrameInstances.add((Control as CMlFrame));
			}
			return PlayerFrameInstances;
		}

		CMlQuad PFI_GetEmblemQuad(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("emblem") as CMlQuad);
		}

		CMlLabel PFI_GetLoginLabel(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("login") as CMlLabel);
		}

		CMlLabel PFI_GetStateLabel(CMlFrame _PlayerFrameInstance) {
			return (_PlayerFrameInstance.GetFirstChild("state") as CMlLabel);
		}

		CMlQuad CFI_GetCastleImage(CMlFrame _CastleFrameInstance) {
			return (_CastleFrameInstance.GetFirstChild("typeimage") as CMlQuad);
		}

		CMlQuad CFI_GetCastleHaloQuad(CMlFrame _CastleFrameInstance) {
			return (_CastleFrameInstance.GetFirstChild("halo") as CMlQuad);
		}

		CMlQuad CFI_GetCastleCapitalQuad(CMlFrame _CastleFrameInstance) {
			return (_CastleFrameInstance.GetFirstChild("capital") as CMlQuad);
		}

		CMlQuad LFI_GetLinkFrontImage(CMlFrame _LinkFrameInstance) {
			return (_LinkFrameInstance.GetFirstChild("front") as CMlQuad);
		}

		CMlQuad LFI_GetLinkBackWhiteImage(CMlFrame _LinkFrameInstance) {
			return (_LinkFrameInstance.GetFirstChild("backw") as CMlQuad);
		}

		CMlQuad LFI_GetLinkBackBlackImage(CMlFrame _LinkFrameInstance) {
			return (_LinkFrameInstance.GetFirstChild("backb") as CMlQuad);
		}

		Void ApplyOpacity(CMlControl _Control, Real _Opacity) {
			if (_Control.DataAttributeGet("no-opacity") == "1") return;

			switchtype (_Control) {
				case CMlFrame: {
					foreach (Child in (_Control as CMlFrame).Controls) {
						ApplyOpacity(Child, _Opacity);
					}
				}
				case CMlQuad: {
					(_Control as CMlQuad).Opacity = _Opacity;
				}
				case CMlLabel: {
					(_Control as CMlLabel).Opacity = _Opacity;
				}
			}
		}

		Boolean IsOnline(Text _PlayerLogin) {
			foreach (Player in Players) {
				if (Player.User.Login == _PlayerLogin) return True;
			}
			return False;
		}

		Text GetEmblemUrl(Integer _OwnerId) {
			return C_EmblemBaseUrl ^ _OwnerId + 1 ^ ".dds";
		}

		Void SFI_SetTimestamp(CMlFrame _SaveFrameInstance, Integer _Day, Integer _Month, Integer _Year, Integer _Hours, Integer _Minutes) {
			declare CMlLabel TimestampLabel = SFI_GetTimestampLabel(_SaveFrameInstance);
			TimestampLabel.SetText(TL::FormatInteger(_Day, 2) ^ "/" ^ TL::FormatInteger(_Month, 2) ^ "/" ^ TL::FormatInteger(_Year, 2) ^ " " ^ TL::FormatInteger(_Hours, 2) ^ ":" ^ TL::FormatInteger(_Minutes, 2));
		}

		Void SFI_SetTimestamp(CMlFrame _SaveFrameInstance, Text _Content) {
			declare CMlLabel TimestampLabel = SFI_GetTimestampLabel(_SaveFrameInstance);
			TimestampLabel.SetText(_Content);
		}

		Void SFI_SetPlayers(CMlFrame _SaveFrameInstance, Integer _SaveId, Text[Integer] _Players) {

			declare netread Integer[Text] Srv_OnlineSave_G_ChosenSavesId for Teams[0];

			declare CMlFrame[] PlayerFrameInstances = SFI_GetPlayerFrameInstances(_SaveFrameInstance);
			declare Integer CurrentPFIIndex;

			foreach (PlayerId => PlayerLogin in _Players) {
				if (CurrentPFIIndex >= PlayerFrameInstances.count) break;
				declare CMlFrame CurrentPlayerFrameInstance = PlayerFrameInstances[CurrentPFIIndex];
				CurrentPlayerFrameInstance.Show();

				declare CMlQuad EmblemQuad = PFI_GetEmblemQuad(CurrentPlayerFrameInstance);
				EmblemQuad.ImageUrl = GetEmblemUrl(PlayerId);

				declare CMlLabel PlayerLoginLabel = PFI_GetLoginLabel(CurrentPlayerFrameInstance);
				PlayerLoginLabel.SetText("$s" ^ PlayerLogin);

				declare CMlLabel StateLabel = PFI_GetStateLabel(CurrentPlayerFrameInstance);
				declare Text State;
				if (IsOnline(PlayerLogin)) {
					if ((Srv_OnlineSave_G_ChosenSavesId.existskey(PlayerLogin)) && Srv_OnlineSave_G_ChosenSavesId[PlayerLogin] == _SaveId) {
						State = "$0f8Ready";
					} else {
						State = "$08fOnline";
					}
				} else {
					State = "$f08Missing";
				}
				StateLabel.SetText(State);

				CurrentPFIIndex += 1;
			}

			while (CurrentPFIIndex < PlayerFrameInstances.count) {
				declare CMlFrame CurrentPlayerFrameInstance = PlayerFrameInstances[CurrentPFIIndex];
				CurrentPlayerFrameInstance.Hide();
				CurrentPFIIndex += 1;
			}
		}

		Integer SFI_GetId(CMlControl _JoinBtnQuad) {
			declare Integer SaveId for _JoinBtnQuad;
			return SaveId;
		}

		Vec3 GetLinkColor(Integer _OwnerId) {
			declare Vec3 Color;
			switch (_OwnerId + 1) {
				case 1: Color = <0., 0.75, 1.>;
				case 2:	Color = <1., 0.75, 0.>;
				case 3:	Color = <1., 0.25, 0.25>;
				case 4:	Color = <1., 0.25, 1.>;
				case 5:	Color = <0.25, 1., 0.25>;
				case 6:	Color = <0.5, 1., 1.>;
			}
			return Color;
		}

		CMlLabel GetCurrentPageLabel() {
			return (Page.GetFirstChild("page") as CMlLabel);
		}

		Void SetChosenSaveId(Integer _SaveId) {
			declare netwrite Integer Cli_OnlineSave_P_ChosenSaveId for UI;
			if (Cli_OnlineSave_P_ChosenSaveId == _SaveId) {
				Cli_OnlineSave_P_ChosenSaveId = -2;
				return;
			}
			Cli_OnlineSave_P_ChosenSaveId = _SaveId;
		}

		Integer GetChosenSaveId() {
			declare netwrite Integer Cli_OnlineSave_P_ChosenSaveId for UI;
			return Cli_OnlineSave_P_ChosenSaveId;
		}

		Integer CountSaves() {
			declare netread Integer[] Srv_OnlineSave_G_SavesIds for Teams[0];
			return Srv_OnlineSave_G_SavesIds.count;
		}

		Void HideWorldDisplays() {
			foreach (SaveFrameInstance in GetSaveFrameInstances()) {
				declare CMlQuad SwitchBtnQuad = SFI_GetSwitchBtnQuad(SaveFrameInstance);
				declare Boolean State					for SwitchBtnQuad;
				declare Integer StateChangeTimestamp	for SwitchBtnQuad;

				if (!State) continue;

				State = False;
				StateChangeTimestamp = Now;
			}
		}

		Void Init() {
			G_ScriptStart = Now;
			SetChosenSaveId(-2);

			declare Integer[] Cli_UI_L_LastSavesIds for UI;
			Cli_UI_L_LastSavesIds.clear();

			G_CurrentPage = 1;
			
			G_RadToDeg = -(180. / ML::PI());
		}

		Void DrawWorldDisplays() {
			declare netread Integer[]					Srv_OnlineSave_G_SavesIds				for Teams[0];
			declare netread Text[Integer][Integer]		Srv_OnlineSave_G_SavesPlayers			for Teams[0];
			declare netread Vec3[Integer][Integer]		Srv_OnlineSave_G_SavesCastles			for Teams[0];
			declare netread Integer[Integer][Integer]	Srv_OnlineSave_G_SavesCastlesOwners		for Teams[0];
			declare netread Boolean[Integer][Integer]	Srv_OnlineSave_G_SavesCastleIsCapital	for Teams[0];
			declare netread Integer[][Integer][Integer]	Srv_OnlineSave_G_SavesLinks				for Teams[0];

			declare CMlFrame[] SaveFrameInstances = GetSaveFrameInstances();

			// -------- Draws saves. -------- //

			declare Integer CurrentSFIIndex;

			if (G_CurrentPage == 1) {
				CurrentSFIIndex = 1;
			} else {
				CurrentSFIIndex = 0;
			}

			wait(Srv_OnlineSave_G_SavesIds.count == Srv_OnlineSave_G_SavesPlayers.count);
			wait(Srv_OnlineSave_G_SavesIds.count == Srv_OnlineSave_G_SavesCastles.count);
			wait(Srv_OnlineSave_G_SavesIds.count == Srv_OnlineSave_G_SavesCastlesOwners.count);
			wait(Srv_OnlineSave_G_SavesIds.count == Srv_OnlineSave_G_SavesCastleIsCapital.count);
			wait(Srv_OnlineSave_G_SavesIds.count == Srv_OnlineSave_G_SavesLinks.count);

			foreach (Index => SaveId in Srv_OnlineSave_G_SavesIds) {
				if (Index < G_CurrentPage * C_CardPerPage - C_CardPerPage) continue; // Pager
				if (!SaveFrameInstances.existskey(CurrentSFIIndex)) continue;

				declare CMlFrame	CurrentSaveFrameInstance	= SaveFrameInstances[CurrentSFIIndex];
				declare CMlFrame[]	CastleFrameInstances		= SFI_GetCastleFrameInstances(CurrentSaveFrameInstance);
				declare CMlFrame[]	LinkFrameInstances			= SFI_GetLinkFrameInstances(CurrentSaveFrameInstance);

				declare Vec3[Integer] Castles = Srv_OnlineSave_G_SavesCastles[SaveId];

				// -------- Draws castles. -------- //

				declare Integer CurrentCFIIndex;

				foreach (CastleId => Castle in Castles) {

					declare CMlFrame	CurrentCastleFrameInstance	= CastleFrameInstances[CastleId];
					declare CMlQuad		CastleTypeImage				= CFI_GetCastleImage(CurrentCastleFrameInstance);
					declare CMlQuad		CastleHaloQuad				= CFI_GetCastleHaloQuad(CurrentCastleFrameInstance);
					declare CMlQuad		CastleCapitalQuad			= CFI_GetCastleCapitalQuad(CurrentCastleFrameInstance);

					CurrentCastleFrameInstance.RelativePosition	= <Castle.X, Castle.Y, 0.>;
					CurrentCastleFrameInstance.RelativeScale		= Castle.Z;
					CastleTypeImage.Colorize				= <0.4, 0.4, 0.4>;

					declare Vec3 Color;
					declare Real Scale;
					if (Srv_OnlineSave_G_SavesCastlesOwners[SaveId].existskey(CastleId)) {
						Color = GetLinkColor(Srv_OnlineSave_G_SavesCastlesOwners[SaveId][CastleId]);
						Scale = C_OwnedCastleHaloScale;
					} else {
						Color = <1., 1., 1.>;
						Scale = C_NotOwnedCastleHaloScale;
					}
					CastleHaloQuad.ModulateColor	= Color;
					CastleHaloQuad.Scale			= Scale;

					CastleCapitalQuad.Visible = (Srv_OnlineSave_G_SavesCastleIsCapital[SaveId].existskey(CastleId) && Srv_OnlineSave_G_SavesCastleIsCapital[SaveId][CastleId]);

					CurrentCastleFrameInstance.Show();
					
					CurrentCFIIndex += 1;

				}

				// Hides remaining castles.
				while (CurrentCFIIndex < CastleFrameInstances.count) {
					declare CMlFrame CurrentCastleFrameInstance = CastleFrameInstances[CurrentCFIIndex];
					CurrentCastleFrameInstance.Hide();
					CurrentCFIIndex += 1;
				}

				// -------- Draws links. -------- //

				declare Integer CurrentLFIIndex;

				foreach (FirstLinkedCastleId => Castle in Castles) {

					declare CMlFrame	FirstLinkedCastleFrameInstance	= CastleFrameInstances[FirstLinkedCastleId];

					declare Integer[] Links = Srv_OnlineSave_G_SavesLinks[SaveId][FirstLinkedCastleId];

					foreach (SecondLinkedCastleId in Links) {
						declare CMlFrame	SecondLinkedCastleFrameInstance	= CastleFrameInstances[SecondLinkedCastleId];

						declare CMlFrame	CurrentLinkFrameInstance		= LinkFrameInstances[CurrentLFIIndex];
						declare CMlQuad		LinkFrontImage					= LFI_GetLinkFrontImage(CurrentLinkFrameInstance);
						declare CMlQuad		LinkBackWhiteImage				= LFI_GetLinkBackWhiteImage(CurrentLinkFrameInstance);
						declare CMlQuad		LinkBackBlackImage				= LFI_GetLinkBackBlackImage(CurrentLinkFrameInstance);

						declare Real Distance = ML::Distance(FirstLinkedCastleFrameInstance.RelativePosition, SecondLinkedCastleFrameInstance.RelativePosition);

						declare Real Angle = ML::Angle(SecondLinkedCastleFrameInstance.RelativePosition - FirstLinkedCastleFrameInstance.RelativePosition, <1., 0., 0.>);
						if (SecondLinkedCastleFrameInstance.RelativePosition.Y < FirstLinkedCastleFrameInstance.RelativePosition.Y) Angle = -Angle;
						declare Real Rotation = Angle * G_RadToDeg;

						CurrentLinkFrameInstance.RelativePosition	= FirstLinkedCastleFrameInstance.RelativePosition;

						LinkFrontImage.Size		= <Distance, C_BaseLinkSize * 0.25>;
						LinkBackWhiteImage.Size	= <Distance, C_BaseLinkSize * 0.5>;
						LinkBackBlackImage.Size	= <Distance, C_BaseLinkSize * 1.75>;

						CurrentLinkFrameInstance.RelativeRotation = Rotation;


						declare Vec3 Color;
						declare Boolean AreCastleOwned = Srv_OnlineSave_G_SavesCastlesOwners[SaveId].existskey(FirstLinkedCastleId) && Srv_OnlineSave_G_SavesCastlesOwners[SaveId].existskey(SecondLinkedCastleId);
						if (AreCastleOwned) {
							LinkFrontImage.Visible = (Srv_OnlineSave_G_SavesCastlesOwners[SaveId][FirstLinkedCastleId] == Srv_OnlineSave_G_SavesCastlesOwners[SaveId][SecondLinkedCastleId]);
							Color = GetLinkColor(Srv_OnlineSave_G_SavesCastlesOwners[SaveId][FirstLinkedCastleId]);
						} else {
							Color = <1., 1., 1.>;
						}
						LinkFrontImage.Colorize	= Color;

						CurrentLinkFrameInstance.Show();

						CurrentLFIIndex += 1;
					}

				}

				// Hides remaining links.
				while (CurrentLFIIndex < LinkFrameInstances.count) {
					declare CMlFrame CurrentLinkFrameInstance = LinkFrameInstances[CurrentLFIIndex];
					CurrentLinkFrameInstance.Hide();
					CurrentLFIIndex += 1;
				}

				CurrentSFIIndex += 1;

			}

			// Hides remaining saves.
			while (CurrentSFIIndex < SaveFrameInstances.count) {
				declare CMlFrame	CurrentSaveFrameInstance	= SaveFrameInstances[CurrentSFIIndex];
				CurrentSaveFrameInstance.Hide();
				CurrentSFIIndex += 1;
			}

		}

		Void LoopStart() {
			declare netread Integer[]				Srv_OnlineSave_G_SavesIds			for Teams[0];
			declare netread Text[Integer][Integer]	Srv_OnlineSave_G_SavesPlayers		for Teams[0];
			declare netread Integer[][Integer]		Srv_OnlineSave_G_SavesTimestamps	for Teams[0];
			declare netread Integer[Integer]		Srv_OnlineSave_G_SavesTurnsCount	for Teams[0];

			declare Integer[]						Cli_UI_L_LastSavesIds				for UI;
			declare Integer							Cli_UI_L_LastPage					for UI;

			// Sleeps while the server fetches data.
			wait(Srv_OnlineSave_G_SavesIds.count == Srv_OnlineSave_G_SavesPlayers.count);
			wait(Srv_OnlineSave_G_SavesIds.count == Srv_OnlineSave_G_SavesTimestamps.count);
			wait(Srv_OnlineSave_G_SavesIds.count == Srv_OnlineSave_G_SavesTurnsCount.count);

			declare Boolean AreSavesChanged = False;
			if (Srv_OnlineSave_G_SavesIds.count == Cli_UI_L_LastSavesIds.count) {
				for (Index, 0, Cli_UI_L_LastSavesIds.count - 1) {
					if (Cli_UI_L_LastSavesIds[Index] != Srv_OnlineSave_G_SavesIds[Index]) {
						AreSavesChanged = True;
						break;
					}
				}
			} else {
				AreSavesChanged = True;
			}

			if (Cli_UI_L_LastPage != G_CurrentPage) {
				AreSavesChanged = True;
			}

			if (AreSavesChanged) {
				log(Now ^ "> Loading saves");
				DrawWorldDisplays();
				Cli_UI_L_LastSavesIds = Srv_OnlineSave_G_SavesIds;
				Cli_UI_L_LastPage = G_CurrentPage;
			}

			declare CMlFrame[] SaveFrameInstances = GetSaveFrameInstances();

			declare Integer CurrentSFIIndex;

			if (G_CurrentPage == 1) {
				CurrentSFIIndex = 1;

				// The first page's first SFI is used to create a new game.
				declare CMlFrame CurrentSaveFrameInstance = SaveFrameInstances[0];

				declare Text[Integer] OnlinePlayers;
				foreach (PlayerId => Player in Players) {
					OnlinePlayers[PlayerId] = Player.User.Login;
				}
				SFI_SetPlayers(CurrentSaveFrameInstance, -1, OnlinePlayers);

				SFI_SetTimestamp(CurrentSaveFrameInstance, "New game");

				declare CMlLabel TurnsLabel = SFI_GetTurnsLabel(CurrentSaveFrameInstance);
				TurnsLabel.SetText("");

				declare CMlQuad JoinBtnQuad = SFI_GetJoinBtnQuad(CurrentSaveFrameInstance);
				declare Integer SaveId as JoinBtnQuadSaveId for JoinBtnQuad;
				JoinBtnQuadSaveId = -1;

				SFI_GetSwitchBtnQuad(CurrentSaveFrameInstance).Hide();

			} else {
				CurrentSFIIndex = 0;
			}

			foreach (Index => SaveId in Srv_OnlineSave_G_SavesIds) {
				if (Index < G_CurrentPage * C_CardPerPage - C_CardPerPage) continue; // Pager
				if (!SaveFrameInstances.existskey(CurrentSFIIndex)) continue;

				declare Text[Integer]	SavePlayers		= Srv_OnlineSave_G_SavesPlayers[SaveId];
				declare Integer[]		SaveTimestamp	= Srv_OnlineSave_G_SavesTimestamps[SaveId];
				declare Integer			SaveTurnsCount	= Srv_OnlineSave_G_SavesTurnsCount[SaveId];

				declare CMlFrame	CurrentSaveFrameInstance = SaveFrameInstances[CurrentSFIIndex];
				CurrentSaveFrameInstance.Show();

				declare CMlQuad JoinBtnQuad = SFI_GetJoinBtnQuad(CurrentSaveFrameInstance);
				declare Integer SaveId as JoinBtnQuadSaveId for JoinBtnQuad;
				JoinBtnQuadSaveId = SaveId;

				SFI_SetTimestamp(CurrentSaveFrameInstance, SaveTimestamp[0], SaveTimestamp[1], SaveTimestamp[2], SaveTimestamp[3], SaveTimestamp[4]);

				declare CMlLabel TurnsLabel = SFI_GetTurnsLabel(CurrentSaveFrameInstance);
				TurnsLabel.SetText(TL::Compose(_("Turn #%1"), TL::ToText(SaveTurnsCount)));

				SFI_SetPlayers(CurrentSaveFrameInstance, SaveId, SavePlayers);
				SFI_GetSwitchBtnQuad(CurrentSaveFrameInstance).Show();

				CurrentSFIIndex += 1;
			}

			while (CurrentSFIIndex < SaveFrameInstances.count) {
				declare CMlFrame	CurrentSaveFrameInstance = SaveFrameInstances[CurrentSFIIndex];
				CurrentSaveFrameInstance.Hide();

				CurrentSFIIndex += 1;
			}

			if (AreSavesChanged) {
				G_SavesReadyTimestamp = -1; // Callback
			}
		}

		Void Animate() {

			declare CMlFrame MainFrame = GetMainFrame();
			ApplyOpacity(MainFrame, AL::EaseInOutSine(Now - G_ScriptStart, 0., 1., C_OpeningAnimationDuration));

			declare CMlFrame SavesFrame = GetSaveFrameInstancesParentFrame();
			ApplyOpacity(SavesFrame, AL::EaseInOutSine(Now - G_SavesReadyTimestamp, 0., 1., 500));
			
			declare CMlFrame[] SaveFrameInstances = GetSaveFrameInstances();
			
			foreach (SaveFrameInstance in SaveFrameInstances) {
				declare CMlQuad		FocusQuad		= SFI_GetFocusQuad(SaveFrameInstance);
				declare CMlQuad		SwitchBtnQuad	= SFI_GetSwitchBtnQuad(SaveFrameInstance);
				declare CMlQuad		JoinBtnQuad		= SFI_GetJoinBtnQuad(SaveFrameInstance);
				declare CMlLabel	HelpLabel		= SFI_GetHelpLabel(SaveFrameInstance);
				declare CMlQuad		GlowQuad		= SFI_GetGlowQuad(SaveFrameInstance);
				declare CMlFrame	WorldFrame		= SFI_GetWorldFrame(SaveFrameInstance);
				declare CMlQuad		WorldFgQuad		= SFI_GetWorldFgQuad(SaveFrameInstance);
				declare CMlQuad		WorldGradQuad	= SFI_GetWorldGradQuad(SaveFrameInstance);
				declare CMlQuad		WorldBgQuad		= SFI_GetWorldBgQuad(SaveFrameInstance);
				declare CMlQuad		LeftBlueQuad	= SFI_GetLeftBlueQuad(SaveFrameInstance);
				declare CMlQuad		RightBlueQuad	= SFI_GetRightBlueQuad(SaveFrameInstance);

				declare Integer SaveId as CurrentSaveId for JoinBtnQuad;
				declare Boolean IsChosenOne = (GetChosenSaveId() == CurrentSaveId);
				
				declare Integer MouseClickTimestamp	for JoinBtnQuad;
				
				declare Real GlowQuadOpacity;
				declare Real BlueQuadsOpacity;
				if (IsChosenOne) {
					GlowQuadOpacity = AL::EaseInOutSine(Now - MouseClickTimestamp - 100, 0., 1., 200);
					BlueQuadsOpacity = AL::EaseInBounce(Now - MouseClickTimestamp + 100, 0., 1., 400);
				} else {
					GlowQuadOpacity = AL::EaseInOutSine(Now - MouseClickTimestamp, 1., -1., 100);
					BlueQuadsOpacity = AL::EaseInOutSine(Now - MouseClickTimestamp, 1., -1., 100);
				}

				GlowQuad.Opacity		= GlowQuadOpacity;
				LeftBlueQuad.Opacity	= BlueQuadsOpacity;
				RightBlueQuad.Opacity	= BlueQuadsOpacity;

				declare Boolean State					for SwitchBtnQuad;
				declare Integer StateChangeTimestamp	for SwitchBtnQuad;

				SwitchBtnQuad.StyleSelected = State;

				declare Real WorldFgQuadOpacity;
				if (State) {
					if (Now - StateChangeTimestamp < C_FadeAnimDuration / 2) {
						WorldFgQuadOpacity = AL::EaseInOutSine(Now - StateChangeTimestamp, 0., 1., C_FadeAnimDuration / 2);
						WorldGradQuad.Hide();
						WorldBgQuad.Hide();
						WorldFrame.Hide();
					} else {
						WorldFgQuadOpacity = AL::EaseInOutSine(Now - StateChangeTimestamp - C_FadeAnimDuration / 2, 1., -1., C_FadeAnimDuration / 2);
						WorldGradQuad.Show();
						WorldBgQuad.Show();
						WorldFrame.Show();
					}

				} else {
					if (Now - StateChangeTimestamp < C_FadeAnimDuration / 2) {
						WorldFgQuadOpacity = AL::EaseInOutSine(Now - StateChangeTimestamp, 0., 1., C_FadeAnimDuration / 2);
						WorldGradQuad.Show();
						WorldBgQuad.Show();
						WorldFrame.Show();
					} else {
						WorldFgQuadOpacity = AL::EaseInOutSine(Now - StateChangeTimestamp - C_FadeAnimDuration / 2, 1., -1., C_FadeAnimDuration / 2);
						WorldGradQuad.Hide();
						WorldBgQuad.Hide();
						WorldFrame.Hide();
					}
				}
				WorldFgQuad.Opacity = WorldFgQuadOpacity;

				declare Boolean IsFocused as IsBtnJoinFocused for JoinBtnQuad;
				declare Boolean IsFocused as IsBtnSwitchFocused for SwitchBtnQuad;

				declare Text HelpText;

				if (IsBtnJoinFocused) {
					HelpText = "Select";
				} else if (IsBtnSwitchFocused) {
					HelpText = "Switch view";
				}

				HelpLabel.SetText(HelpText);

				JoinBtnQuad.StyleSelected = IsChosenOne;
				
			}

			declare CMlLabel CurrentPageLabel = GetCurrentPageLabel();
			CurrentPageLabel.SetText(TL::ToText(G_CurrentPage));
			
		}

		main() {

			Init();
		
			while (True) {

				LoopStart();
				
				foreach (Event in PendingEvents) {
					switch (Event.Type) {
						case CMlEvent::Type::MouseOver: {
							switch (Event.ControlId) {
								case "join": {
									declare Boolean IsFocused for Event.Control;
									IsFocused = True;
								}
								case "switch": {
									declare Boolean IsFocused for Event.Control;
									IsFocused = True;
								}
							}
						}
						case CMlEvent::Type::MouseOut: {
							switch (Event.ControlId) {
								case "join": {
									declare Boolean IsFocused for Event.Control;
									IsFocused = False;
								}
								case "switch": {
									declare Boolean IsFocused for Event.Control;
									IsFocused = False;
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							switch (Event.ControlId) {
								case "switch": {
									declare Boolean	State					for Event.Control;
									declare Integer	StateChangeTimestamp	for Event.Control;
									State = !State;
									StateChangeTimestamp = Now;

									// Hides other opened SFI.
									foreach (SaveFrameInstance in GetSaveFrameInstances()) {
										declare CMlQuad SwitchBtnQuad = SFI_GetSwitchBtnQuad(SaveFrameInstance);
										declare Boolean State					as SFIState					for SwitchBtnQuad;
										declare Integer	StateChangeTimestamp	as SFIStateChangeTimestamp	for SwitchBtnQuad;

										if (SwitchBtnQuad == Event.Control || !SFIState) continue;

										SFIState = False;
										SFIStateChangeTimestamp = Now;
									}
								}
								case "join": {
									declare Integer MouseClickTimestamp for Event.Control;
									declare Integer CurrentChosenSaveId = GetChosenSaveId();

									// Looks up for the old joined save and activates its close animation.
									foreach (SaveFrameInstance in GetSaveFrameInstances()) {
										declare CMlQuad SFIBtnJoin = SFI_GetJoinBtnQuad(SaveFrameInstance);
										declare Integer SaveId				as SFISaveId				for SFIBtnJoin;
										declare Integer MouseClickTimestamp	as SFIMouseClickTimestamp	for SFIBtnJoin;

										if (SFIBtnJoin == Event.Control || SFISaveId != CurrentChosenSaveId) continue;

										SFIMouseClickTimestamp = Now;
									}

									SetChosenSaveId(SFI_GetId(Event.Control));
									MouseClickTimestamp = Now;
								}
								case "pageprevious": {
									if (G_CurrentPage > 1) {
										G_CurrentPage -= 1;
										HideWorldDisplays();
									}
								}
								case "pagenext": {
									if (CountSaves() > G_CurrentPage * C_CardPerPage) {
										G_CurrentPage += 1;
										HideWorldDisplays();
									}
								}
							}
						}
					}
				}
				
				Animate();
				yield;

				if (G_SavesReadyTimestamp == -1) G_SavesReadyTimestamp = Now;
			}
		
		}

	--></script>
</manialink>