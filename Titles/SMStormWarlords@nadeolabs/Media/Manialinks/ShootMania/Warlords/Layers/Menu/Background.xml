<manialink version="1" name="Background" background="stars">
	<framemodel id="star">
		<quad id="h" posn="0 0 1" sizen="2 2" halign="center" valign="center" bgcolor="fff" />
		<quad id="c" posn="0 0 0" sizen="10 10" halign="center" valign="center" style="Bgs1" substyle="Glow" />
		<quad id="v" posn="0 0 0" sizen="2 20" halign="center" valign="center" style="Bgs1" substyle="Glow" />
		<quad id="h" posn="0 0 0" sizen="20 2" halign="center" valign="center" style="Bgs1" substyle="Glow" />
	</framemodel>

	<frame id="content">
		<frame id="stars" posn="0 0 -79">
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
			<frameinstance modelid="star" />
		</frame>

		<quad posn="0 0 -80" sizen="320 180" scale="1.1" halign="center" valign="center" image="file://Media/Manialinks/ShootMania/Warlords/Textures/Menu/bg2.png" />
	</frame>

	<script><!--

		#Include "TextLib" as TL
		#Include "MathLib" as ML

		declare Real	G_MouseX;
		declare Real	G_MouseY;
		declare Integer	G_LastMoveTimestamp;

		CMlFrame GetContentFrame() {
			return (Page.GetFirstChild("content") as CMlFrame);
		}

		CMlFrame GetStarFrameInstancesParentFrame() {
			return (Page.GetFirstChild("stars") as CMlFrame);
		}

		CMlFrame[] GetStarFrameInstances() {
			declare CMlFrame[] StarFrameInstances;
			foreach (Control in GetStarFrameInstancesParentFrame().Controls) {
				if (!(Control is CMlFrame)) continue;
				StarFrameInstances.add((Control as CMlFrame));
			}
			return StarFrameInstances;
		}

		CMlFrame GetStarFrameInstance(Integer _Index) {
			return GetStarFrameInstances()[_Index];
		}

		CMlQuad SFI_GetHLight(CMlFrame _StarFrameInstance) {
			return (_StarFrameInstance.GetFirstChild("h") as CMlQuad);
		}

		CMlQuad SFI_GetVLight(CMlFrame _StarFrameInstance) {
			return (_StarFrameInstance.GetFirstChild("v") as CMlQuad);
		}

		CMlQuad SFI_GetCLight(CMlFrame _StarFrameInstance) {
			return (_StarFrameInstance.GetFirstChild("c") as CMlQuad);
		}

		Void SFI_SetOpacity(CMlFrame _StarFrameInstance, Real _Opacity) {
			SFI_GetHLight(_StarFrameInstance).Opacity = _Opacity;
			SFI_GetVLight(_StarFrameInstance).Opacity = _Opacity;
			SFI_GetCLight(_StarFrameInstance).Opacity = _Opacity;
		}

		Void Init() {
			declare Integer ScriptStart for This;
			ScriptStart = Now;

			G_MouseX = MouseX;
			G_MouseY = MouseY;

			foreach (StarFrameInstance in GetStarFrameInstances()) {
				declare Real	RandScale	for StarFrameInstance;
				declare Vec2	RandPos		for StarFrameInstance;
				declare Integer	RandTime	for StarFrameInstance;
				declare Real	RandSpeed	for StarFrameInstance;

				RandScale	= ML::Rand(0025, 0200) / 1000.;
				RandPos		= <ML::Rand(-160., 160.), ML::Rand(-90., 90.)>;
				RandTime	= ML::Rand(0, 500);
				RandSpeed	= 500. - ML::Rand(-100, 100);
			}
		}

		Void LoopStart() {
			wait(MouseX != -1000. && MouseY != -1000.);

			if (MouseX != -1000. && MouseY != -1000.) {
				if (MouseX != G_MouseX && MouseY != G_MouseY) {
					if (ML::NearestInteger(G_MouseX) == ML::NearestInteger(MouseX) && ML::NearestInteger(G_MouseY) == ML::NearestInteger(MouseY)) {
						G_MouseX = MouseX;
						G_MouseY = MouseY;
					} else {
						G_MouseX += ((MouseX - G_MouseX) / 32.);
						G_MouseY += ((MouseY - G_MouseY) / 32.);
					}
				}
			}
		}

		Void Animate() {
			declare Integer ScriptStart for This;

			declare Real Rot = (G_MouseX / 320.) * 8.;

			declare CMlFrame ContentFrame = GetContentFrame();
			ContentFrame.RelativeScale		= 1 + ML::Distance(<0., 0., 0.>, <G_MouseX, G_MouseY, 0.>) / 320. / 16.;

			foreach (StarFrameInstance in GetStarFrameInstances()) {
				declare Real	RandScale	for StarFrameInstance;
				declare Vec2	RandPos		for StarFrameInstance;
				declare Integer	RandTime	for StarFrameInstance;
				declare Real	RandSpeed	for StarFrameInstance;

				StarFrameInstance.RelativePosition.Y	= RandPos.Y + (G_MouseY / 180.) * (RandScale * 100.);
				StarFrameInstance.RelativePosition.X	= RandPos.X + (G_MouseX / 320.) * (RandScale * 100.);
				StarFrameInstance.RelativeScale			= RandScale;

				SFI_SetOpacity(StarFrameInstance, (ML::Sin((Now - ScriptStart + RandTime) / RandSpeed) + 1) / 4. + 0.25);
			}
		}

		main() {

			Init();

			while (True) {
				LoopStart();

				Animate();
				yield;
			}
		}

	--></script>
</manialink>