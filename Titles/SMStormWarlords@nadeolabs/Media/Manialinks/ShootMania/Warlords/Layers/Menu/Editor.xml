<!-- file://Media/Manialinks/ShootMania/Warlords/Layers/Menu/Editor.xml -->

<manialink version="2" name="map_editor">

	<framemodel id="circlewave">
		<quad id="image" posn="0 0 0" sizen="16 16" halign="center" valign="center" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/CircleWave1.png" colorize="5af" />
	</framemodel>
	
	<framemodel id="planet">

		<frame id="goldhandlers" posn="0 3 13" hidden="1">
			<quad id="minus" posn="-6" sizen="6 6" halign="center" valign="center" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/Minus.png" colorize="08f" hidden="1" scriptevents="1" />
			<quad id="plus" posn="6" sizen="6 6" halign="center" valign="center" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/Plus.png" colorize="08f" scriptevents="1" />
		</frame>

		<label id="name" posn="0 7 12" scale="1" halign="center" valign="center" text="?" textemboss="1" style="TextRaceMessageBig" textsize="1" textcolor="ddff" />

		<quad id="reticle" class="rotable" posn="0 0 11" sizen="30 30" halign="center" valign="center" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/Reticle.dds" colorize="5af" hidden="1" data-rotation="-0.1" />

		<frame posn="0 0 10">
			<quad id="attack" sizen="12 12" halign="left" valign="bottom" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/Attack.png" hidden="1" />
			<quad id="take" sizen="12 12" halign="left" valign="bottom" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/Take2.png" hidden="1" />
		</frame>

		<frame id="defensegold" posn="0 2 8" hidden="1">
			<label id="defensegoldtext" posn="0 1" halign="center" valign="center" style="TextRaceChrono" textsize="2" textcolor="fa0" text="0" />
			<quad id="defensegoldbg" posn="0 0" sizen="10 5" halign="center" valign="center" style="Bgs1" substyle="BgShadow" />
		</frame>

		<quad id="capital" posn="0 0 7" sizen="6 6" halign="right" valign="top" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/Star.png" hidden="1" />
		<quad id="owneremblem" posn="0 0 6" sizen="10 10" halign="right" valign="top" hidden="1" />

			<frame id="circlewaves" posn="0 0 1" hidden="1">
				<frameinstance id="circlewave1" modelid="circlewave" scale="0.75" />
				<frameinstance id="circlewave2" modelid="circlewave" scale="1.5" />
			</frame>

		<frame id="scale">


			<quad id="goldvein" class="rotable" posn="0 0 5" sizen="24 24" halign="center" valign="center" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/GoldVein.png" opacity="0.9" hidden="1" data-rotation="-0.1" />

			<quad id="startpoint" posn="0 0 4" sizen="20 20" scale="0.75" halign="center" valign="center" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/StartPoint3.png" colorize="fa2" hidden="1" />

			<quad id="lightproj" rot="-45" posn="0 0 3" scale="0.75" sizen="20.5 20.5" halign="center" valign="center" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/LightProj.png" />
			<quad posn="0 0 2" id="typeimage" class="rotable" sizen="20 20" scale="0.75" halign="center" valign="center" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/Castle6.png" colorize="666" opacity="0.98" data-rotation="0.1" data-type="0" />

			<quad id="focuslight" posn="0 0 1" sizen="40 40" scale="0.75" halign="center" valign="center" style="Bgs1" substyle="Glow" hidden="1" />

			<quad id="halo" posn="0 0 0" sizen="40 40" halign="center" valign="center" style="Bgs1" substyle="Glow" opacity="0.75" />
			
		</frame>
	</framemodel>

	<framemodel id="link">
		<quad id="front" posn="0 0 2" sizen="0 0.6" halign="left" valign="center" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/link.png" hidden="1" />
		<quad id="backw" posn="0 0 1" sizen="0 3" opacity="0.2" halign="left" valign="center" style="Bgs1" substyle="BgWindow4" />
		<quad id="backb" posn="0 0 0" sizen="0 2" opacity="0.6" halign="left" valign="center" style="Bgs1" substyle="BgProgressBar" />
	</framemodel>

	<frame id="planets">
		<frameinstance modelid="planet" id="inst0" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst1" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst2" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst3" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst4" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst5" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst6" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst7" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst8" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst9" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst10" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst11" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst12" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst13" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst14" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst15" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst16" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst17" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst18" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst19" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst20" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst21" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst22" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst23" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst24" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst25" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst26" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst27" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst28" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst29" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst30" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst31" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst32" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst33" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst34" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst35" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst36" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst37" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst38" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst39" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst40" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst41" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst42" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst43" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst44" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst45" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst46" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst47" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst48" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst49" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst50" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst51" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst52" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst53" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst54" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst55" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst56" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst57" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst58" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="planet" id="inst59" posn="-666 -666 0" hidden="1" />
	</frame>

	<frame id="links">
		<frameinstance modelid="link" id="inst0" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst1" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst2" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst3" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst4" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst5" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst6" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst7" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst8" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst9" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst10" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst11" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst12" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst13" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst14" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst15" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst16" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst17" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst18" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst19" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst20" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst21" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst22" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst23" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst24" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst25" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst26" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst27" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst28" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst29" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst30" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst31" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst32" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst33" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst34" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst35" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst36" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst37" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst38" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst39" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst40" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst41" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst42" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst43" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst44" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst45" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst46" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst47" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst48" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst49" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst50" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst51" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst52" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst53" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst54" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst55" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst56" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst57" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst58" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst59" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst60" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst61" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst62" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst63" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst64" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst65" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst66" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst67" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst68" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst69" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst70" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst71" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst72" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst73" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst74" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst75" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst76" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst77" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst78" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst79" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst80" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst81" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst82" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst83" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst84" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst85" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst86" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst87" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst88" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst89" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst90" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst91" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst92" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst93" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst94" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst95" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst96" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst97" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst98" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst99" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst100" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst101" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst102" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst103" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst104" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst105" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst106" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst107" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst108" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst109" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst110" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst111" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst112" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst113" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst114" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst115" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst116" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst117" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst118" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst119" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst120" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst121" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst122" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst123" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst124" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst125" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst126" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst127" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst128" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst129" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst130" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst131" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst132" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst133" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst134" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst135" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst136" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst137" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst138" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst139" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst140" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst141" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst142" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst143" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst144" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst145" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst146" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst147" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst148" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst149" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst150" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst151" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst152" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst153" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst154" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst155" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst156" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst157" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst158" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst159" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst160" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst161" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst162" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst163" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst164" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst165" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst166" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst167" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst168" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst169" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst170" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst171" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst172" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst173" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst174" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst175" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst176" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst177" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst178" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst179" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst180" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst181" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst182" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst183" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst184" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst185" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst186" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst187" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst188" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst189" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst190" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst191" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst192" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst193" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst194" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst195" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst196" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst197" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst198" posn="-666 -666 0" hidden="1" />
		<frameinstance modelid="link" id="inst199" posn="-666 -666 0" hidden="1" />
	</frame>

	<frame posn="0 0 -1">
		<frameinstance modelid="link" id="fakelink" hidden="1" />
	</frame>

	<frame id="ui" posn="0 0 1">

		<frame id="helpmenu" posn="0 0 10" hidden="1">
			<quad id="helpglowbar" halign="center" valign="center" style="Bgs1" substyle="BgGlow2" sizen="166 8" posn="0 44 3" />
			<quad id="helpmetalbar" halign="center" valign="bottom" style="Bgs1" substyle="BgMetalBar" sizen="159.5 2" posn="0 -45 3" />

			<label posn="0 30 3" halign="center" valign="center" text="[Space] : Place a planet" />
			<label posn="0 20 3" halign="center" valign="center" text="Hold [Ctrl] : Move a planet" />
			<label posn="0 10 3" halign="center" valign="center" text="Hold [Shift] : Start a link" />
			<label posn="0   0 3" halign="center" valign="center" text="[Ctrl] + [C] : Set a planet as start point" />
			<label posn="0 -10 3" halign="center" valign="center" text="[Ctrl] + [R] : Rename a planet" />
			<label posn="0 -20 3" halign="center" valign="center" text="[Ctrl] + [A] : Decrease a planet's size" />
			<label posn="0 -30 3" halign="center" valign="center" text="[Ctrl] + [Z] : Increase a planet's size" />

			<label id="helpclose" halign="center" valign="bottom" style="CardButtonSmallXS" text="Close" posn="0 -45 3" scriptevents="4" />
			<quad id="helpwindow" halign="center" valign="center" style="Bgs1" substyle="BgWindow2" sizen="160 90" posn="0 0 2" />
			<quad id="helpshadow" halign="center" valign="center" style="Bgs1" substyle="BgButtonShadow" sizen="170 100" posn="0 0 1" />
			<quad id="helpbg" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur" sizen="320 180" scriptevents="1" />
		</frame>

		<frame id="exportmenu" posn="0 0 10" hidden="1">
			<quad id="exportglowbar" halign="center" valign="center" style="Bgs1" substyle="BgGlow2" sizen="166 8" posn="0 44 3" />
			<quad id="exportmetalbar" halign="center" valign="bottom" style="Bgs1" substyle="BgMetalBar" sizen="159.5 2" posn="0 -45 3" />

			<label id="exportminify" halign="center" valign="bottom" style="CardButtonSmallXS" text="Minify" posn="-10 -45 3" scriptevents="4" />
			<label id="exportclose" halign="center" valign="bottom" style="CardButtonSmallXS" text="Close" posn="10 -45 3" scriptevents="4" />
			<textedit id="exporttextedit" halign="center" valign="center" sizen="144 81" posn="0 0 3" focusareacolor1="0000" focusareacolor2="0000" textformat="script" textsize="0.5" />
			<quad id="exportwindow" halign="center" valign="center" style="Bgs1" substyle="BgWindow2" sizen="160 90" posn="0 0 2" />
			<quad id="exportshadow" halign="center" valign="center" style="Bgs1" substyle="BgButtonShadow" sizen="170 100" posn="0 0 1" />
			<quad id="exportbg" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur" sizen="320 180" scriptevents="1" />
		</frame>

		<frame id="loadmenu" posn="0 0 10" hidden="1">
			<quad id="loadglowbar" halign="center" valign="center" style="Bgs1" substyle="BgGlow2" sizen="166 8" posn="0 44 3" />
			<quad id="loadmetalbar" halign="center" valign="bottom" style="Bgs1" substyle="BgMetalBar" sizen="159.5 2" posn="0 -45 3" />

			<label id="loadload" halign="center" valign="bottom" style="CardButtonSmallXS" text="Load" posn="-10 -45 3" scriptevents="4" />
			<label id="loadclose" halign="center" valign="bottom" style="CardButtonSmallXS" text="Close" posn="10 -45 3" scriptevents="4" />
			<textedit id="loadtextedit" halign="center" valign="center" sizen="144 81" posn="0 0 3" focusareacolor1="0000" focusareacolor2="0000" textformat="script" textsize="0.5" />
			<quad id="loadwindow" halign="center" valign="center" style="Bgs1" substyle="BgWindow2" sizen="160 90" posn="0 0 2" />
			<quad id="loadshadow" halign="center" valign="center" style="Bgs1" substyle="BgButtonShadow" sizen="170 100" posn="0 0 1" />
			<quad id="loadbg" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur" sizen="320 180" scriptevents="1" />
		</frame>

		<frame id="globalmenu" posn="-163 20 2" scale="0.75">
			<frame id="content" posn="20 70 1">

				<frame id="btns" posn="-7">
					<label id="btn-new" text="new" posn="0 0" halign="left" valign="center" style="CardButtonMedium2" scriptevents="1" />
					<label id="btn-load" text="load" posn="38 0" halign="left" valign="center" style="CardButtonMedium2" scriptevents="1" />
					<label id="btn-export" text="export" posn="0 -10" halign="left" valign="center" style="CardButtonMedium2" scriptevents="1" />
					<label id="btn-help" text="help" posn="38 -10" halign="left" valign="center" style="CardButtonMedium2" scriptevents="1" />
				</frame>

				<frame id="startyearselection" posn="12 -20">
					<label id="lbl-startyear" text="Start year : " posn="0 0" sizen="18" halign="right" valign="center" textsize="2" />
					<entry id="etr-startyear" posn="0 0" sizen="56" halign="left" valign="center" textsize="2" style="StyleTextScriptEditor" default="3000" />
				</frame>

				<frame id="statusbar" posn="0 -30 1">
					<label id="status" text="Welcome" posn="-5 0 2" halign="left" valign="center" textsize="2" autonewline="1" />
					<quad id="glowbg" style="Bgs1" posn="-10 0 1" sizen="80 16" halign="left" valign="center" substyle="ProgressBar" modulatecolor="222" opacity="0.95" />
					<quad id="glow" style="Bgs1" posn="-10 0 0" sizen="80 16" halign="left" valign="center" substyle="ProgressBar" />
				</frame>
			</frame>

			<quad posn="7 83 1" sizen="86 8" style="Bgs1" substyle="BgGlow2" />
			<quad id="menubg" posn="10 80" sizen="80 50" style="Bgs1" halign="left" valign="top" substyle="BgWindow2" opacity="0.9" scriptevents="1" />
			<quad posn="10 31 1" sizen="80 2" style="Bgs1" substyle="BgMetalBar" />

		</frame>

		<frame id="clip" clip="1" clipposn="-123 0" clipsizen="90 83">
		
			<frame id="contextualmenu" posn="-163 -20 2" scale="0.75">

				<frame id="content" posn="20 70 1">

					<frame id="planetnameselection" posn="12 0">
						<label id="lbl-planetname" text="Planet name : " posn="0 0" sizen="18" halign="right" valign="center" textsize="2" />
						<entry id="etr-planetname" posn="0 0" sizen="30" halign="left" valign="center" textsize="2" style="StyleTextScriptEditor" scriptevents="1" />
					</frame>

					<frame posn="60 3">
						<label posn="-6 -3" halign="right" valign="center" style="TextTitle3" text="Size" />

						<label sizen="8 6" text="+" halign="center" valign="center" style="TextTitle3" />
						<quad id="btn-plus" sizen="8 6" halign="center" valign="center" style="BgsButtons" substyle="BgButtonSmall2" scriptevents="1" />
						<label posn="0 -6" sizen="8 6" text="-" halign="center" valign="center" style="TextTitle3" />
						<quad id="btn-minus" posn="0 -6" sizen="8 6" halign="center" valign="center" style="BgsButtons" substyle="BgButtonSmall2" scriptevents="1" />
					</frame>

					<label posn="-7 -10" style="TextTitle3" text="Planet type" />

					<frame id="btns" posn="-7 -20">
						<label posn="18 0" sizen="36 10" text="0" halign="center" valign="center" style="TextTitle3" />
						<quad id="type-0" posn="0 0 0" sizen="36 8" halign="left" valign="center" style="BgsButtons" substyle="BgButtonSmall2" scriptevents="1" />

						<label posn="56 0" sizen="36 10" text="1" halign="center" valign="center" style="TextTitle3" />
						<quad id="type-1" posn="38 0 0" sizen="36 8" halign="left" valign="center" style="BgsButtons" substyle="BgButtonSmall2" scriptevents="1" />

						<label posn="18 -10" sizen="36 10" text="2" halign="center" valign="center" style="TextTitle3" />
						<quad id="type-2" posn="0 -10 0" sizen="36 8" halign="left" valign="center" style="BgsButtons" substyle="BgButtonSmall2" scriptevents="1" />

						<label posn="56 -10" sizen="36 10" text="3" halign="center" valign="center" style="TextTitle3" />
						<quad id="type-3" posn="38 -10 0" sizen="36 8" halign="left" valign="center" style="BgsButtons" substyle="BgButtonSmall2" scriptevents="1" />

						<label posn="18 -20" sizen="36 10" text="4" halign="center" valign="center" style="TextTitle3" />
						<quad id="type-4" posn="0 -20 0" sizen="36 8" halign="left" valign="center" style="BgsButtons" substyle="BgButtonSmall2" scriptevents="1" />

						<label posn="56 -20" sizen="36 10" text="5" halign="center" valign="center" style="TextTitle3" />
						<quad id="type-5" posn="38 -20 0" sizen="36 8" halign="left" valign="center" style="BgsButtons" substyle="BgButtonSmall2" scriptevents="1" />


						<quad id="radiostartpoint" posn="0 -30" sizen="8 8" halign="left" valign="center" style="Icons64x64_1" substyle="Check" scriptevents="1" />
						<label posn="8 -30" halign="left" valign="center2" text="Start point" />

						<label id="btn-remove" text="Remove" posn="7 -40" halign="left" valign="center" style="CardButtonMediumXXL" scriptevents="1" />
					</frame>

				</frame>

				<quad posn="7 83 1" sizen="86 8" style="Bgs1" substyle="BgGlow2" />
				<quad id="menubg" posn="10 80" sizen="80 80" style="Bgs1" halign="left" valign="top" substyle="BgWindow2" opacity="0.9" scriptevents="1" />
				<quad posn="10 1 1" sizen="80 2" style="Bgs1" substyle="BgMetalBar" />

			</frame>

		</frame>

		<frame posn="-90 -80 -1">
			<quad id="availablespaceborder" posn="0 0 1" sizen="240 160" halign="left" valign="bottom" style="Bgs1" substyle="BgColorContour" opacity="0.2" />
			<quad id="availablespace" sizen="240 160" halign="left" valign="bottom" bgcolor="0002" />
		</frame>

		<quad id="planetsbg" halign="center" valign="center" posn="0 0 -2" sizen="320 180" image="file://Media/Manialinks/ShootMania/Warlords/Textures/World/bg.png" scriptevents="1" />

	</frame>

	<script><!--
		
		// // // // // // // //
		// Includes
		// // // // // // // //

		#Include "MathLib" as ML
		#Include "TextLib" as TL
		#Include "AnimLib" as AL
		
		// // // // // // // //
		// Constants
		// // // // // // // //

		/**
		 * The ML's address (used to dump the world).
		 */
		#Const C_ThisAddress							"file://media/manialinks/map_editor_v3_sans_son.xml"

		/**
		 * All usefull key codes.
		 */
		#Const Key_Delete								30
		#Const Key_Down									32
		#Const Key_Escape								36
		#Const Key_CtrlLeft								65
		#Const Key_Left									66
		#Const Key_AltLeft								67
		#Const Key_ShiftLeft							68
		#Const Key_Pause								99
		#Const Key_CtrlRight							108
		#Const Key_Right								110
		#Const Key_AltRight								111
		#Const Key_ShiftRight							112
		#Const Key_Space								119
		#Const Key_Tab									124
		#Const Key_Up									128
		#Const Key_F1									38
		#Const Key_F2									39
		#Const Key_Plus									14
		#Const Key_Minus								121
		#Const Key_A									11
		#Const Key_Z									144

		#Const C_SizeStep								0.1
		#Const C_MoveStep								1
		#Const C_RangeToFocusPlanet						8.
		#Const C_TimeToHideWindows						200

		#Const C_NeutralPlanetId						-1
		#Const C_NeutralPlanetName						"?"
		#Const C_NeutralPlanetPos						<-666., -666., 0.>
		#Const C_NeutralPlanetScale						1.

		#Const C_NeutralLinkId							-1
		#Const C_NeutralLinkPos							<-666., -666., 0.>
		#Const C_NeutralLinkScale						1.
		
		#Const C_BaseLinkSize							2.

		#Const C_FireImageUrl							"file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/Castle6.png"
		#Const C_SandImageUrl							"file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/Castle6.png"
		#Const C_ForestImageUrl							"file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/Castle6.png"
		#Const C_IceImageUrl							"file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/Castle6.png"

		#Const C_PlanetTypeUrl [
			0 => "file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/Castle60.png",
			1 => "file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/Castle61.png",
			2 => "file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/Castle62.png",
			3 => "file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/Castle63.png",
			4 => "file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/Castle64.png",
			5 => "file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/Castle65.png"
		]

		#Const C_MaxPlanetSize							1.8
		#Const C_MinPlanetSize							0.3

		#Const C_MinStartPoints							2

		#Const C_Letters								["A", "B", "C", "D", "E", "F", "G", "H",
														"I", "J", "K", "L", "M", "N", "O", "P", "Q",
														"R", "S", "T", "U", "V", "W", "X", "Y", "Z"]

		#Const C_AvailableZoneAnimationDuration			500
		#Const C_PlanetContextualMenuAnimationDuration	500

		#Const C_StyleTypeNotSelected					"BgButtonSmall2"
		#Const C_StyleTypeSelected						"BgButtonMediumSpecial"

		#Const C_FakeLinkNeutralPos						<-666., -666.>

		#Const C_MenuOffset								<64., 10.>

		#Const Sound_Place								"file://Media/Sounds/ShootMania/Warlords/EditorPlaceElement.wav"
		#Const Sound_Link								"file://Media/Sounds/ShootMania/Warlords/EditorJoinElement.wav"
		#Const Sound_Remove								"file://Media/Sounds/ShootMania/Warlords/EditorRemoveElement.wav"
		#Const Sound_Error								"file://Media/Sounds/ShootMania/Warlords/EditorPlaceElementError.wav"

		// // // // // // // //
		// Globals
		// // // // // // // //

		/**
		 * Stores the timestamp of the last text sent in status.
		 */
		declare Integer G_LastStatusTimestamp;

		/**
		 * Stores the timestamp of the last load.
		 */
		declare Integer G_LastLoadTimestamp;

		/**
		 * Stores the timestamp of the last export.
		 */
		declare Integer G_LastExportTimestamp;

		/**
		 * Stores the timestamp of the last help.
		 */
		declare Integer G_LastHelpTimestamp;

		/**
		 * Stores the timestamp of the last planet placement outside the available space.
		 */
		declare Integer G_LastAvailableSpaceTimestamp;

		declare Integer G_ContextualMenuVisibilityTimestamp;

		declare Integer G_SelectionTimestamp;

		declare Boolean G_ContextualMenuVisibility;

		/**
		 * Stores the currently selected planet.
		 */
		declare CMlFrame G_SelectedPlanet;

		/**
		 * Stores all links (<Planet1Id, Planet2Id, LinkId>).
		 */
		declare Int3[Integer] G_Links;

		declare Integer[Integer] G_PlanetType;

		declare Vec2 G_FakeLinkOrigin;


		// // // // // // // //
		// Functions
		// // // // // // // //

		/**
		 * Checks if the object is Null.
		 */
		Boolean Isset(CNod _Object) {
			return (_Object != Null);
		}

		/**
		 * Displays an info text.
		 */
		Void Status(Text _Text, Boolean _Danger) {
			declare Status <=> (Page.GetFirstChild("status") as CMlLabel);
			declare CMlQuad Glow <=> (Page.GetFirstChild("glow") as CMlQuad);

			Status.SetText(_Text);
			G_LastStatusTimestamp = Now;

			if (_Danger) {
				Status.TextColor = <1., 0., 0.>;
				Glow.Colorize = <1., 0., 0.>;
			} else {
				Status.TextColor = <1., 1., 1.>;
				Glow.Colorize = <1., 1., 1.>;
			}
		}

		/**
		 * Displays an info text.
		 */
		Void Status(Text _Text) {
			Status(_Text, False);
		}

		/**
		 * Returns the frame which contains all planet frames.
		 */
		CMlFrame GetPlanetsFrame() {
			return (Page.GetFirstChild("planets") as CMlFrame);
		}

		/**
		 * Returns the frame which contains all link frames.
		 */
		CMlFrame GetLinksFrame() {
			return (Page.GetFirstChild("links") as CMlFrame);
		}

		/**
		 * Returns all planet frames in an array.
		 */
		CMlFrame[] GetPlanetInstances() {

			declare CMlFrame[] Instances;

			declare CMlFrame PlanetsFrame = GetPlanetsFrame();

			foreach (FrameInstance in PlanetsFrame.Controls) {
				if (!(FrameInstance is CMlFrame)) continue;
				
				Instances.add((FrameInstance as CMlFrame));
			}

			return Instances;
		}

		/**
		 * Returns all planet frames in an array.
		 */
		CMlFrame GetPlanetInstance(Integer _PlanetId) {

			return GetPlanetInstances()[_PlanetId];

		}

		/**
		 * Returns all link frames in an array.
		 */
		CMlFrame[] GetLinkInstances() {

			declare CMlFrame[] Instances;

			declare CMlFrame LinksFrame = GetLinksFrame();

			foreach (FrameInstance in LinksFrame.Controls) {
				if (!(FrameInstance is CMlFrame)) continue;
				
				Instances.add((FrameInstance as CMlFrame));
			}

			return Instances;
		}

		Integer GetPlanetInstanceNumber(CMlFrame _PlanetFrameInstance) {
			foreach (Index => PlanetFrameInstance in GetPlanetInstances()) {
				if (_PlanetFrameInstance == PlanetFrameInstance) return Index;
			}
			return -1;
		}

		CMlQuad GetLinkFrontQuad(CMlFrame _LinkFrameInstance) {
			return (_LinkFrameInstance.GetFirstChild("front") as CMlQuad);
		}

		CMlQuad GetLinkWhiteBackQuad(CMlFrame _LinkFrameInstance) {
			return (_LinkFrameInstance.GetFirstChild("backw") as CMlQuad);
		}

		CMlQuad GetLinkBlackBackQuad(CMlFrame _LinkFrameInstance) {
			return (_LinkFrameInstance.GetFirstChild("backb") as CMlQuad);
		}


		CMlFrame GetPlanetScaleFrame(CMlFrame _CastleFrameInstance) {
			return (_CastleFrameInstance.GetFirstChild("scale") as CMlFrame);
		}

		CMlFrame GetPlanetContextualMenuFrame() {
			return (Page.GetFirstChild("contextualmenu") as CMlFrame);
		}

		CMlEntry GetContextualMenuPlanetNameEntry() {
			return (Page.GetFirstChild("etr-planetname") as CMlEntry);
		}

		CMlQuad GetContextualMenuPlanetRadioStartPoint() {
			return (Page.GetFirstChild("radiostartpoint") as CMlQuad);
		}

		CMlQuad GetContextualMenuPlanetPlusBtn() {
			return (Page.GetFirstChild("btn-plus") as CMlQuad);
		}

		CMlQuad GetContextualMenuPlanetMinusBtn() {
			return (Page.GetFirstChild("btn-minus") as CMlQuad);
		}

		/**
		 * Returns the planet's name.
		 */
		Text GetPlanetName(CMlFrame _FrameInstance) {
			declare CMlLabel Label <=> (_FrameInstance.GetFirstChild("name") as CMlLabel);
			return Label.Value;
		}

		/**
		 * Checks if the given planet is used or not.
		 */
		Boolean IsPlanetNeutral(CMlFrame _FrameInstance) {
			if (_FrameInstance.RelativePosition == C_NeutralPlanetPos && GetPlanetName(_FrameInstance) == C_NeutralPlanetName) return True;

			return False;
		}

		/**
		 * Checks if the given planet is used or not.
		 */
		Boolean IsPlanetNeutral(Integer _PlanetId) {
			return IsPlanetNeutral(GetPlanetInstance(_PlanetId));
		}

		/**
		 * Checks if the given link is use or not.
		 */
		Boolean IsLinkNeutral(CMlFrame _FrameInstance) {
			if (_FrameInstance.RelativePosition == C_NeutralLinkPos && _FrameInstance.RelativeScale == C_NeutralLinkScale) return True;

			return False;
		}

		/**
		 * Checks if the given link is use or not.
		 */
		Boolean IsLinkNeutral(Int3 _Link) {
			if (_Link.Z == C_NeutralPlanetId) return True;

			return False;
		}

		/**
		 * Gets a free to use planet.
		 */
		CMlFrame GetNeutralPlanet() {
			declare CMlFrame[] Planets = GetPlanetInstances();

			foreach (Planet in Planets) {
				if (IsPlanetNeutral(Planet))
					return Planet;
			}

			return Null;
		}

		/**
		 * Gets a free to use link.
		 */
		CMlFrame GetNeutralLinkInstance() {
			
			declare CMlFrame[] LinkInstances = GetLinkInstances();

			foreach (Index => Link in G_Links) {
				if (IsLinkNeutral(Link))
					return LinkInstances[Index];
			}

			return Null;
		}

		/**
		 * Checks if planets are free to use.
		 */
		Boolean AreRemainingPlanets() {
			declare CMlFrame[] Planets = GetPlanetInstances();

			foreach (Planet in Planets) {
				if (IsPlanetNeutral(Planet)) {
					return True;
				}
			}

			return False;
		}

		/**
		 * Checks if the user wrote a start year.
		 */
		Boolean IsStartYearDefined() {
			return ((Page.GetFirstChild("etr-startyear") as CMlEntry).Value != "");
		}

		Void SetStartYear(Integer _Year) {
			(Page.GetFirstChild("etr-startyear") as CMlEntry).Value = TL::ToText(_Year);
		}

		/**
		 * Get the start year entered by the user.
		 */
		Integer GetStartYear() {
			return TL::ToInteger((Page.GetFirstChild("etr-startyear") as CMlEntry).Value);
		}

		CMlQuad GetAvailableSpace() {
			return (Page.GetFirstChild("availablespace") as CMlQuad);
		}

		CMlQuad GetAvailableSpaceBorder() {
			return (Page.GetFirstChild("availablespaceborder") as CMlQuad);
		}

		Boolean IsOnAvailableSpace() {
			declare CMlQuad AvailableSpace = GetAvailableSpace();

			declare Vec2 StartPoint	= <AvailableSpace.AbsolutePosition.X, AvailableSpace.AbsolutePosition.Y>;
			declare Vec2 EndPoint	= <StartPoint.X + AvailableSpace.Size.X, StartPoint.Y + AvailableSpace.Size.Y>;

			return (
				StartPoint.X < MouseX && MouseX < EndPoint.X
				&&
				StartPoint.Y < MouseY && MouseY < EndPoint.Y
			);
		}

		Void ShowFakeLink(CMlFrame _OriginPlanetFrameInstance) {
			G_FakeLinkOrigin = <_OriginPlanetFrameInstance.AbsolutePosition.X, _OriginPlanetFrameInstance.AbsolutePosition.Y>;
		}

		Void HideFakeLink() {
			G_FakeLinkOrigin = C_FakeLinkNeutralPos;
		}

		CMlFrame GetFakeLink() {
			return (Page.GetFirstChild("fakelink") as CMlFrame);
		}

		/**
		 * Gets the given planet's image.
		 */
		CMlQuad GetImageFromPlanet(CMlFrame _FrameInstance) {
			return (_FrameInstance.GetFirstChild("typeimage") as CMlQuad);
		}

		/**
		 * Gets the given planet's light projection quad.
		 */
		CMlQuad GetLightProjFromPlanet(CMlFrame _FrameInstance) {
			return (_FrameInstance.GetFirstChild("lightproj") as CMlQuad);
		}

		/**
		 * Gets the planet pointed by the mouse.
		 */
		CMlFrame GetPlanetFrameInRange(Vec2 _Pos) {

			declare CMlFrame PlanetsFrame = GetPlanetsFrame();

			foreach (FrameInstance in PlanetsFrame.Controls) {
				if (!(FrameInstance is CMlFrame)) continue;

				if (FrameInstance.RelativePosition == C_NeutralPlanetPos) continue;

				declare CMlFrame CastedFrameInstance = (FrameInstance as CMlFrame);
				declare CMlQuad Quad <=> GetImageFromPlanet(CastedFrameInstance);
				declare Distance = ML::Distance(Quad.AbsolutePosition, <_Pos.X, _Pos.Y, 0.>);

				if (Distance <= C_RangeToFocusPlanet * GetPlanetScaleFrame(CastedFrameInstance).RelativeScale) return CastedFrameInstance;
			}

			return Null;
		}

		Integer[] GetLinkedPlanets(Integer _PlanetId) {
			declare Integer[] LinkedPlanets;

			foreach (Link in G_Links) {
				if (IsLinkNeutral(Link)) continue;

				if (Link.X == _PlanetId) {
					LinkedPlanets.add(Link.Y);
				} else if (Link.Y == _PlanetId) {
					LinkedPlanets.add(Link.X);
				}
			}

			return LinkedPlanets;
		}

		/**
		 * Gets the planet's position.
		 */
		Integer GetPlanetIndex(CMlFrame _FrameInstance) {
			return TL::ToInteger(TL::Replace(_FrameInstance.ControlId, "inst", ""));
		}

		/**
		 * Gets the link's position.
		 */
		Integer GetLinkIndex(CMlFrame _FrameInstance) {
			return TL::ToInteger(TL::Replace(_FrameInstance.ControlId, "inst", ""));
		}

		CMlFrame GetCircleWavesFrame(CMlFrame _CastleFrameInstance) {
			return (_CastleFrameInstance.GetFirstChild("circlewaves") as CMlFrame);
		}

		CMlFrame GetFirstCircleWave(CMlFrame _CastleFrameInstance) {
			return (_CastleFrameInstance.GetFirstChild("circlewave1") as CMlFrame);
		}

		CMlFrame GetSecondCircleWave(CMlFrame _CastleFrameInstance) {
			return (_CastleFrameInstance.GetFirstChild("circlewave2") as CMlFrame);
		}

		CMlQuad GetCircleWaveQuad(CMlFrame _CircleWaveFrameInstance) {
			return (_CircleWaveFrameInstance.GetFirstChild("image") as CMlQuad);
		}

		Void HideAllCircleWaves() {
			foreach (PlanetFrameInstance in GetPlanetInstances()) {
				GetCircleWavesFrame(PlanetFrameInstance).Hide();
			}
		}

		/**
		 * Does all animations.
		 */
		Void Animate() {

			// Status animation.
			declare CMlLabel Status <=> (Page.GetFirstChild("status") as CMlLabel);
			declare CMlQuad Glow <=> (Page.GetFirstChild("glow") as CMlQuad);
			Status.Opacity = AL::EaseInOutSine(Now - G_LastStatusTimestamp, 0., 1., 200);
			Glow.Opacity = AL::EaseInOutSine(Now - G_LastStatusTimestamp, 1., -1., 200);

			// ---------------------------------- //

			// Focus animation.
			declare CMlFrame PlanetsFrame = GetPlanetsFrame();
			foreach (FrameInstance in PlanetsFrame.Controls) {
				if (!(FrameInstance is CMlFrame)) continue;

				declare CMlFrame CastedFrameInstance = (FrameInstance as CMlFrame);
				
				declare CMlQuad Focus <=> (CastedFrameInstance.GetFirstChild("focuslight") as CMlQuad);

				if (Focus.Visible) {
					Focus.Opacity = 1 - (Now % 1000) / 1000.;
					Focus.RelativeScale = (Now % 1000) / 600.;
				}
			}

			// ---------------------------------- //

			// All rotable quads animations.
			Page.GetClassChildren("rotable", Page.MainFrame, True);
			foreach (Rotable in Page.GetClassChildren_Result) {
				declare Real Rotation = TL::ToReal(Rotable.DataAttributeGet("rotation"));
				Rotable.RelativeRotation += Rotation;
			}

			// ---------------------------------- //

			declare CMlFrame ExportWindow <=> (Page.GetFirstChild("exportmenu") as CMlFrame);

			if (G_LastExportTimestamp + C_TimeToHideWindows > Now) {
				foreach (Control in ExportWindow.Controls) {
					if (!(Control is CMlQuad)) continue;
					(Control as CMlQuad).Opacity = AL::EaseInOutSine(Now - G_LastExportTimestamp, 1., -1., C_TimeToHideWindows);
				}
				ExportWindow.RelativeScale = AL::EaseInOutSine(Now - G_LastExportTimestamp, 1., 0.25, C_TimeToHideWindows);
			} else {
				foreach (Control in ExportWindow.Controls) {
					if (!(Control is CMlQuad)) continue;
					(Control as CMlQuad).Opacity = 1.;
				}
				ExportWindow.RelativeScale = 1.;
				ExportWindow.Hide();
			}

			// ---------------------------------- //

			declare CMlFrame LoadWindow <=> (Page.GetFirstChild("loadmenu") as CMlFrame);

			if (G_LastLoadTimestamp + C_TimeToHideWindows > Now) {
				foreach (Control in LoadWindow.Controls) {
					if (!(Control is CMlQuad)) continue;
					(Control as CMlQuad).Opacity = AL::EaseInOutSine(Now - G_LastLoadTimestamp, 1., -1., C_TimeToHideWindows);
				}
				LoadWindow.RelativeScale = AL::EaseInOutSine(Now - G_LastLoadTimestamp, 1., 0.25, C_TimeToHideWindows);
			} else {
				foreach (Control in LoadWindow.Controls) {
					if (!(Control is CMlQuad)) continue;
					(Control as CMlQuad).Opacity = 1.;
				}
				LoadWindow.RelativeScale = 1.;
				LoadWindow.Hide();
			}

			// ---------------------------------- //

			declare CMlFrame HelpWindow <=> (Page.GetFirstChild("helpmenu") as CMlFrame);

			if (G_LastHelpTimestamp + C_TimeToHideWindows > Now) {
				foreach (Control in HelpWindow.Controls) {
					if (!(Control is CMlQuad)) continue;
					(Control as CMlQuad).Opacity = AL::EaseInOutSine(Now - G_LastHelpTimestamp, 1., -1., C_TimeToHideWindows);
				}
				HelpWindow.RelativeScale = AL::EaseInOutSine(Now - G_LastHelpTimestamp, 1., 0.25, C_TimeToHideWindows);
			} else {
				foreach (Control in HelpWindow.Controls) {
					if (!(Control is CMlQuad)) continue;
					(Control as CMlQuad).Opacity = 1.;
				}
				HelpWindow.RelativeScale = 1.;
				HelpWindow.Hide();
			}

			// ---------------------------------- //

			declare CMlQuad Border = GetAvailableSpaceBorder();

			Border.Opacity = AL::EaseOutExp(Now - G_LastAvailableSpaceTimestamp, 1., -0.8, C_AvailableZoneAnimationDuration);
			declare Real Value = AL::EaseOutExp(Now - G_LastAvailableSpaceTimestamp, 0., 1., C_AvailableZoneAnimationDuration);
			Border.Colorize = <
				1.,
				Value,
				Value
			>;

			// ---------------------------------- //

			declare CMlFrame Menu = GetPlanetContextualMenuFrame();
			declare Real MenuPosition;
			if (G_ContextualMenuVisibility) {
				MenuPosition = AL::EaseOutExp(Now - G_ContextualMenuVisibilityTimestamp, 80., -100., C_PlanetContextualMenuAnimationDuration);
			} else {
				MenuPosition = AL::EaseOutExp(Now - G_ContextualMenuVisibilityTimestamp, -20., 100., C_PlanetContextualMenuAnimationDuration);
			}
			Menu.RelativePosition.Y = MenuPosition;

			// ---------------------------------- //

			HideAllCircleWaves();

			if (G_SelectedPlanet != Null) {
				declare CMlFrame CircleWavesFrame		= GetCircleWavesFrame(G_SelectedPlanet);

				declare CMlFrame	CircleWave1			= GetFirstCircleWave(G_SelectedPlanet);
				declare CMlQuad		CircleWaveQuad1		= GetCircleWaveQuad(CircleWave1);
				declare CMlFrame	CircleWave2			= GetSecondCircleWave(G_SelectedPlanet);
				declare CMlQuad		CircleWaveQuad2		= GetCircleWaveQuad(CircleWave2);

				declare Integer Time = Now - G_SelectionTimestamp;

				CircleWave1.RelativeScale = (Time % 2000) / 1000.;
				CircleWaveQuad1.Opacity = AL::EaseInCubic(ML::NearestInteger(CircleWave1.RelativeScale * 1000), 1., -1., 2000);
				CircleWave2.RelativeScale = ((Time + 500) % 2000) / 1000.;
				CircleWaveQuad2.Opacity = AL::EaseInCubic(ML::NearestInteger(CircleWave2.RelativeScale * 1000), 1., -1., 2000);

				CircleWavesFrame.Show();
			}

			// ---------------------------------- //

			declare CMlFrame FakeLinkFrame = GetFakeLink();

			if (G_FakeLinkOrigin != C_FakeLinkNeutralPos) {
				declare Vec3 FakeLinkOrigin3D = <G_FakeLinkOrigin.X, G_FakeLinkOrigin.Y, 0.>;
				declare Vec3 Mouse3D = <MouseX, MouseY, 0.>;

				declare CMlQuad FakeLinkFrontQuad		= GetLinkFrontQuad(FakeLinkFrame);
				declare CMlQuad FakeLinkWhiteBackQuad	= GetLinkWhiteBackQuad(FakeLinkFrame);
				declare CMlQuad FakeLinkBlackBackQuad	= GetLinkBlackBackQuad(FakeLinkFrame);

				declare Real Distance = ML::Distance(FakeLinkOrigin3D, Mouse3D);
				declare Real Angle = ML::Angle(FakeLinkOrigin3D - Mouse3D, <1., 0., 0.>);

				if(Mouse3D.Y < FakeLinkOrigin3D.Y) Angle = -Angle;
				declare Real Rotation = (180. / ML::PI()) * Angle - 180;

				FakeLinkFrame.RelativePosition = FakeLinkOrigin3D;

				FakeLinkFrontQuad.Show();
				FakeLinkFrontQuad.Size = <Distance, C_BaseLinkSize * 0.25>;
				FakeLinkFrontQuad.Opacity = (ML::Sin(Now / 100.) + 1) / 2.;

				declare CMlFrame PlanetInRange = GetPlanetFrameInRange(<MouseX, MouseY>);
				declare Vec3 FakeLinkColor;

				if (Isset(PlanetInRange)) {
					declare Integer[] LinkedPlanets = GetLinkedPlanets(GetPlanetIndex(G_SelectedPlanet));
					if (!LinkedPlanets.exists(GetPlanetIndex(PlanetInRange))) {
						// Link can be made.
						FakeLinkColor = <0., 1., 0.5>;
					} else {
						// link can't be made.
						FakeLinkColor = <1., 0., 0.25>;
					}
				} else {
					FakeLinkColor = <1., 1., 1.>;
				}

				FakeLinkFrontQuad.Colorize = FakeLinkColor;

				FakeLinkWhiteBackQuad.Size = <Distance, C_BaseLinkSize * 0.5>;

				FakeLinkBlackBackQuad.Size = <Distance, C_BaseLinkSize * 1.75>;

				FakeLinkFrame.RelativeRotation = Rotation;

				FakeLinkFrame.Show();
			} else {
				FakeLinkFrame.Hide();
			}

		}

		/**
		 * Asks the user to confirm to erase all.
		 */
		Boolean ConfirmNewWorld() {
			declare CMlLabel BtnNew <=> (Page.GetFirstChild("btn-new") as CMlLabel);

			declare Text OldText = BtnNew.Value;
			declare Boolean Response = False;

			BtnNew.SetText("Are you sure?");
			while (True) {
				yield;

				Animate();
				
				declare Boolean Break = False;

				foreach (Event in PendingEvents) {
					if (Event.Type == CMlEvent::Type::MouseClick) {
						
						if (Event.Control == BtnNew) {
							Response = True;
						} else {
							Response = False;
						}

						Break = True;

					}
				}
				
				if (Break) break;

			}
			BtnNew.SetText(OldText);
			return Response;
		}

		/**
		 * Sets a name to the given planet.
		 */
		Void SetPlanetName(CMlFrame _FrameInstance, Text _PlanetName) {
			(_FrameInstance.GetFirstChild("name") as CMlLabel).SetText(_PlanetName);
		}

		/**
		 * Checks if the given planet is a start point.
		 */
		Boolean IsStartPoint(CMlFrame _FrameInstance) {
			return _FrameInstance.GetFirstChild("startpoint").Visible;
		}
		
		/**
		 * Sets / Unsets the start point startpoint on the given planet.
		 */
		Boolean SwitchStartPoint(CMlFrame _FrameInstance) {
			declare CMlQuad StartPointQuad	<=> (_FrameInstance.GetFirstChild("startpoint") as CMlQuad);
			declare CMlQuad RadioStartPoint	= GetContextualMenuPlanetRadioStartPoint();
			declare Text PlanetName			= GetPlanetName(_FrameInstance);

			if (G_SelectedPlanet == _FrameInstance) {
				RadioStartPoint.StyleSelected = !StartPointQuad.Visible;
			}

			if (StartPointQuad.Visible) {
				Status(PlanetName ^ " is not a start point anymore.");
				StartPointQuad.Hide();
				return False;
			}
			
			Status(PlanetName ^ " is now a start point.");
			StartPointQuad.Show();
			return True;
		}
		
		/**
		 * Sets / Unsets the start point startpoint on the given planet.
		 */
		Boolean ToggleStartPoint(CMlFrame _FrameInstance, Boolean _StartPoint) {
			declare CMlQuad Star <=> (_FrameInstance.GetFirstChild("startpoint") as CMlQuad);
			if (_StartPoint) {
				Star.Show();
				return False;
			}
			
			Star.Hide();
			return True;
		}

		Void ShowPlanetContextualMenu(Integer _PlanetId) {

			// Prepares
			declare CMlFrame PlanetFrameInstance = GetPlanetInstance(_PlanetId);
			declare Text PlanetName = GetPlanetName(PlanetFrameInstance);

			declare CMlEntry PlanetNameEntry = GetContextualMenuPlanetNameEntry();
			PlanetNameEntry.Value = PlanetName;

			declare CMlQuad MenuPlanetRadioStartPoint = GetContextualMenuPlanetRadioStartPoint();
			MenuPlanetRadioStartPoint.StyleSelected = IsStartPoint(PlanetFrameInstance);

			// Shows
			G_ContextualMenuVisibility = True;
			G_ContextualMenuVisibilityTimestamp = Now;
		}

		Void HideContextualMenu() {
			G_ContextualMenuVisibility = False;
			G_ContextualMenuVisibilityTimestamp = Now;
		}

		/**
		 * Sets a planet neutral.
		 */
		Void ResetPlanet(CMlFrame _FrameInstance) {
			SetPlanetName(_FrameInstance, C_NeutralPlanetName);
			_FrameInstance.RelativePosition = C_NeutralPlanetPos;
			GetPlanetScaleFrame(_FrameInstance).RelativeScale = C_NeutralPlanetScale;
			if (IsStartPoint(_FrameInstance)) SwitchStartPoint(_FrameInstance);
			_FrameInstance.Hide();

			declare Integer PlanetIndex = GetPlanetIndex(_FrameInstance);

			for (Index, 0, G_Links.count - 1) {
				if (G_Links[Index].X == PlanetIndex || G_Links[Index].Y == PlanetIndex) G_Links[Index].Z = C_NeutralLinkId;
			}
		}

		/**
		 * Resets the world.
		 */
		Void ResetAll() {
			declare CMlFrame[] Planets = GetPlanetInstances();
			foreach (Planet in Planets) {
				ResetPlanet(Planet);
			}

			(Page.GetFirstChild("etr-startyear") as CMlEntry).Value = "";

			HideContextualMenu();
		}

		CMlFrame GetFirstPlanet() {
			declare CMlFrame[] Planets = GetPlanetInstances();

			foreach (Planet in Planets) {
				if (!IsPlanetNeutral(Planet)) return Planet;
			}

			return Null;
		}

		CMlFrame GetNextPlanet(CMlFrame _FrameInstance) {
			declare CMlFrame[] Planets = GetPlanetInstances();

			for (Index, 0, Planets.count - 1) {

				if (Planets[Index] == _FrameInstance) {

					for (Index2, Index + 1, Planets.count - 1) {
						if (!IsPlanetNeutral(Planets[Index2])) return Planets[Index2];
					}

					// If we reach this code, we finished the array.
					for (Index2, 0, Index - 1) {
						if (!IsPlanetNeutral(Planets[Index2])) return Planets[Index2];
					}

				}

			}

			return _FrameInstance;
		}

		CMlQuad GetContextualMenuMapIndexBtn(Integer _TypeNumber) {
			return (Page.GetFirstChild("type-" ^ _TypeNumber) as CMlQuad);
		}

		Void ResetContextualMenuMapIndexBtns() {
			GetContextualMenuMapIndexBtn(0).Substyle = C_StyleTypeNotSelected;
			GetContextualMenuMapIndexBtn(1).Substyle = C_StyleTypeNotSelected;
			GetContextualMenuMapIndexBtn(2).Substyle = C_StyleTypeNotSelected;
			GetContextualMenuMapIndexBtn(3).Substyle = C_StyleTypeNotSelected;
			GetContextualMenuMapIndexBtn(4).Substyle = C_StyleTypeNotSelected;
			GetContextualMenuMapIndexBtn(5).Substyle = C_StyleTypeNotSelected;
		}
		
		/**
		 * Returns the planet's type (fire, ice, forest, sand).
		 */
		Integer GetPlanetType(CMlFrame _FrameInstance) {
			declare CMlQuad Image = GetImageFromPlanet(_FrameInstance);

			return TL::ToInteger(Image.DataAttributeGet("type"));
		}

		/**
		 * Focuses the given planet.
		 */
		Void FocusPlanet(CMlFrame _FrameInstance) {

			if (G_SelectedPlanet == _FrameInstance) return;

			G_SelectionTimestamp = Now;

			G_SelectedPlanet = _FrameInstance;

			declare CMlFrame PlanetsFrame = GetPlanetsFrame();

			foreach (FrameInstance in PlanetsFrame.Controls) {
				if (!(FrameInstance is CMlFrame)) continue;

				declare CMlFrame CastedFrameInstance = (FrameInstance as CMlFrame);
				
				declare CMlQuad FocusLight <=> (CastedFrameInstance.GetFirstChild("focuslight") as CMlQuad);
				FocusLight.Hide();
	
			}

			Status("Selection canceled!");

			if (_FrameInstance == Null) {
				HideContextualMenu();
				return;
			}

			// Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 0, 10.);
			
			declare Integer PlanetType = GetPlanetType(_FrameInstance);

			ResetContextualMenuMapIndexBtns();
			GetContextualMenuMapIndexBtn(PlanetType).Substyle = C_StyleTypeSelected;

			ShowPlanetContextualMenu(GetPlanetIndex(_FrameInstance));

			Status("Selected a planet!");

			declare CMlQuad FocusLight <=> (_FrameInstance.GetFirstChild("focuslight") as CMlQuad);
			FocusLight.Show();
		}

		Void SetPlanetType(CMlFrame _FrameInstance, Integer _Type) {
			declare Planet <=> GetImageFromPlanet(_FrameInstance);
			Planet.DataAttributeSet("type", TL::ToText(_Type));
			switch (_Type) {
				case 1: Planet.ImageUrl = C_PlanetTypeUrl[1];
				case 2: Planet.ImageUrl = C_PlanetTypeUrl[2];
				case 3: Planet.ImageUrl = C_PlanetTypeUrl[3];
				case 4: Planet.ImageUrl = C_PlanetTypeUrl[4];
				case 5: Planet.ImageUrl = C_PlanetTypeUrl[5];
				default: Planet.ImageUrl = C_PlanetTypeUrl[0];
			}
		}

		/**
		 * Sets another type to the given planet.
		 */
		Void SwitchPlanetType(CMlFrame _FrameInstance) {

			declare CMlQuad TypeImage = GetImageFromPlanet(_FrameInstance);
			declare Integer Type = TL::ToInteger(TypeImage.DataAttributeGet("type"));
			Type = (Type + 1) % 6;
			TypeImage.DataAttributeSet("type", TL::ToText(Type));

		}

		/**
		 * Substracts the given value to the planet's size.
		 */
		Void DecreasePlanetSize(CMlFrame _FrameInstance, Real _Step) {
			declare CMlFrame ScaleFrame = GetPlanetScaleFrame(_FrameInstance);
			if (ScaleFrame.RelativeScale - _Step > C_MinPlanetSize) {
				ScaleFrame.RelativeScale -= _Step;
			}
		}

		/**
		 * Adds the given value to the planet's size.
		 */
		Void IncreasePlanetSize(CMlFrame _FrameInstance, Real _Step) {
			declare CMlFrame ScaleFrame = GetPlanetScaleFrame(_FrameInstance);
			if (ScaleFrame.RelativeScale + _Step < C_MaxPlanetSize) {
				ScaleFrame.RelativeScale += _Step;
			}
		}

		/**
		 * Checks if a planet has this name.
		 */
		Boolean PlanetNameExists(Text _PlanetName) {
			declare CMlFrame[] PlanetInstances = GetPlanetInstances();

			foreach (Planet in PlanetInstances) {
				if (GetPlanetName(Planet) == _PlanetName) return True;
			}

			return False;
		}

		/**
		 * Returns the planet which has the given name.
		 */
		CMlFrame GetPlanetFromName(Text _PlanetName) {
			declare CMlFrame[] PlanetInstances = GetPlanetInstances();

			foreach (Planet in PlanetInstances) {
				if (GetPlanetName(Planet) == _PlanetName) return Planet;
			}

			return Null;
		}

		/**
		 * Renames the given planet with the given text.
		 */
		Void RenamePlanet(CMlFrame _FrameInstance, Text _Name) {
			declare CMlLabel Label <=> (_FrameInstance.GetFirstChild("name") as CMlLabel);
			Label.SetText(_Name);
		}
		
		/**
		 * Asks the user to rename the given planet.
		 */
		Void RenamePlanet(CMlFrame _FrameInstance) {

			declare CMlEntry Entry <=> (_FrameInstance.GetFirstChild("nameedit") as CMlEntry);
			declare CMlLabel Label <=> (_FrameInstance.GetFirstChild("name") as CMlLabel);

			Entry.Value = Label.Value;
			Entry.StartEdition();

			Label.Hide();
			Entry.Show();

			while (True) {
				yield;
				Animate();
				
				foreach (Event in PendingEvents) {
					if (Event.Type == CMlEvent::Type::EntrySubmit && Event.Control == Entry) {
						declare Text Name = TL::ToLowerCase(Entry.Value);
						declare CMlFrame PlanetTemp = GetPlanetFromName(Name);

						if (Isset(PlanetTemp) && G_SelectedPlanet != PlanetTemp) {
							Entry.StartEdition();
							// Audio.PlaySoundEvent(Sound_Error, -10.);
							Status("This name already exists", True);
							break;
						} else if (Name == TL::ToLowerCase(C_NeutralPlanetName)) {
							Entry.StartEdition();
							// Audio.PlaySoundEvent(Sound_Error, -10.);
							Status("This name can't be used.", True);
							break;
						}

						Label.Value = Name;
						Entry.Hide();
						Label.Show();
						return;
					}
				}


			}
		}

		/**
		 * Checks if a link exists between the two given planets.
		 */
		Boolean LinkExists(CMlFrame _FrameInstance1, CMlFrame _FrameInstance2) {

			declare Integer Frame1Id = GetPlanetIndex(_FrameInstance1);
			declare Integer Frame2Id = GetPlanetIndex(_FrameInstance2);

			foreach (Link in G_Links) {
				if (Link.Z == C_NeutralLinkId) continue;

				if (Link.X == Frame1Id && Link.Y == Frame2Id) return True;
				if (Link.Y == Frame1Id && Link.X == Frame2Id) return True;
			}

			return False;
		}

		/**
		 * Links the two given planets.
		 */
		Void CreateLink(CMlFrame _FrameInstance1, CMlFrame _FrameInstance2) {
			declare CMlFrame NewLink = GetNeutralLinkInstance();
			declare Integer LinkIndex = GetLinkIndex(NewLink);

			declare Integer FrameInstance1Index = GetPlanetIndex(_FrameInstance1);
			declare Integer FrameInstance2Index = GetPlanetIndex(_FrameInstance2);
			
			G_Links[LinkIndex] = <FrameInstance1Index, FrameInstance2Index, 0>;

		}

		/**
		 * Updates the display of the links.
		 */
		Void UpdateLinks() {

			declare CMlFrame[] LinkInstances = GetLinkInstances();
			declare CMlFrame[] PlanetInstances = GetPlanetInstances();

			foreach (Index => LinkFrame in LinkInstances) {

				declare Int3 Int3Link = G_Links[Index];

				if (IsLinkNeutral(Int3Link)) {
					LinkFrame.RelativePosition = C_NeutralLinkPos;
					LinkFrame.Hide();
					continue;
				}

				declare CMlFrame FramePlanet1 <=> PlanetInstances[Int3Link.X];
				declare CMlFrame FramePlanet2 <=> PlanetInstances[Int3Link.Y];

				declare CMlQuad LinkFrontQuad		= GetLinkFrontQuad(LinkFrame);
				declare CMlQuad LinkWhiteBackQuad	= GetLinkWhiteBackQuad(LinkFrame);
				declare CMlQuad LinkBlackBackQuad	= GetLinkBlackBackQuad(LinkFrame);

				declare Real Distance = ML::Distance(FramePlanet1.RelativePosition, FramePlanet2.RelativePosition);
				declare Real Angle = ML::Angle(FramePlanet1.RelativePosition - FramePlanet2.RelativePosition, <1., 0., 0.>);

				if(FramePlanet2.RelativePosition.Y < FramePlanet1.RelativePosition.Y) Angle = -Angle;
				declare Real Rotation = (180. / ML::PI()) * Angle - 180;

				LinkFrame.RelativePosition = FramePlanet1.RelativePosition;
				LinkFrontQuad.Size = <Distance, C_BaseLinkSize * 0.25>;
				LinkWhiteBackQuad.Size = <Distance, C_BaseLinkSize * 0.5>;
				LinkBlackBackQuad.Size = <Distance, C_BaseLinkSize * 1.75>;
				LinkFrame.RelativeRotation = Rotation;
				LinkFrame.Show();
			}
		}

		/**
		 * Checks if the given planet is linked to anyone.
		 */
		Boolean IsPlanetLinked(CMlFrame _FrameInstance) {
			declare Integer PlanetId = GetPlanetIndex(_FrameInstance);
			
			foreach (Link in G_Links) {
				if (Link.Z == C_NeutralLinkId) continue;

				if (Link.X == PlanetId || Link.Y == PlanetId) return True;
			}

			return False;
		}

		Integer CountPlanets() {
			declare Integer UsedPlanetsCount;
			foreach (PlanetFrameInstance in GetPlanetInstances()) {
				if (IsPlanetNeutral(PlanetFrameInstance)) continue;
				UsedPlanetsCount += 1;
			}
			return UsedPlanetsCount;
		}

		/**
		 * Checks if all planets are linked.
		 */
		Boolean AreAllPlanetsLinked() {
			declare CMlFrame[] PlanetInstances = GetPlanetInstances();

			foreach (Planet in PlanetInstances) {
				if (!Planet.Visible) continue;
				
				if (!IsPlanetLinked(Planet)) return False;
			}

			return True;
		}

		Void CheckPlanet(Integer _PlanetId) {
			declare Integer[] PlanetsDone for This;
			if (PlanetsDone.exists(_PlanetId)) return;
			PlanetsDone.add(_PlanetId);

			declare Integer[] LinkedPlanets = GetLinkedPlanets(_PlanetId);
			foreach (LinkedPlanetId in LinkedPlanets) {
				if (!PlanetsDone.exists(LinkedPlanetId)) CheckPlanet(LinkedPlanetId);
			}
		}

		Boolean AreLinksValid() {
			declare Integer[] PlanetsDone for This;
			PlanetsDone.clear();

			foreach (Link in G_Links) {
				if (IsLinkNeutral(Link)) continue;

				declare Integer Planet1Id = Link.X;

				if (!IsPlanetNeutral(Planet1Id)) {
					CheckPlanet(Planet1Id);
				}

				declare Integer Planet2Id = Link.Y;

				if (!IsPlanetNeutral(Planet2Id)) {
					CheckPlanet(Planet2Id);
				}

				break;

			}

			return (CountPlanets() == PlanetsDone.count);
		}

		/**
		 * Checks if all planets are named.
		 */
		Boolean AreAllPlanetsNamed() {
			declare CMlFrame[] PlanetInstances = GetPlanetInstances();

			foreach (Planet in PlanetInstances) {
				if (!Planet.Visible) continue;

				if (GetPlanetName(Planet) == C_NeutralPlanetName) return False;
			}

			return True;
		}

		/**
		 * Checks if there are enough start points.
		 */
		Boolean CheckStartPointConstraints() {
			declare CMlFrame[] PlanetInstances = GetPlanetInstances();

			declare Integer StartPointCount;

			foreach (Planet in PlanetInstances) {
				if (!Planet.Visible) continue;

				if (IsStartPoint(Planet)) StartPointCount += 1;
			}

			return (StartPointCount >= C_MinStartPoints);
		}

		/**
		 * Returns the default XML header.
		 */
		Text GetXMLHeader() {
			return """<?xml version="1.0" encoding="utf-8"?>""";
		}
		
		/**
		 * Returns all types as XML
		 */
		Text GetTypesAsXML() {
			return "<maps>\n" ^ 
				"\t\t" ^ """<map id="Ice" index="1" color="08d" image="ice.dds"/>""" ^ "\n" ^
				"\t\t" ^ """<map id="Forest" index="2" color="294" image="forest.dds"/>""" ^ "\n" ^
				"\t\t" ^ """<map id="Fire" index="3" color="b20" image="fire.dds"/>""" ^ "\n" ^
				"\t\t" ^ """<map id="Sand" index="4" color="885" image="sand.dds"/>""" ^ "\n" ^
				"\t</maps>";
		}

		/**
		 * Gets the id correspondings to the given planet type.
		 */
		Integer GetTypeId(Text _PlanetType) {
			switch (_PlanetType) {
				case "ice":		return 1;
				case "forest":	return 2;
				case "fire":	return 3;
				case "sand":	return 4;
			}

			return 0;
		}

		/**
		 * Loads planets and links from an XML.
		 * TODO: Destroy XML
		 */
		Integer LoadXML(Text _XML) {

			ResetAll();
			UpdateLinks();

			declare Text[] LinksFrom;
			declare Text[] LinksTo;

			declare CXmlDocument	XMLDoc		= Xml.Create(_XML);
			if (!Isset(XMLDoc))					return 1;
			declare CXmlNode		MainNode	= XMLDoc.Root;
			if (!Isset(XMLDoc))					return 2;
			if (MainNode.Name != "world")		return 3;
			declare Integer			StartYear	= MainNode.GetAttributeInteger("startyear", -1);
			SetStartYear(StartYear);
			if (StartYear == -1)				return 4;
			if (MainNode.Children.count != 1)	return 5;
			declare CXmlNode		Castles		<=> MainNode.Children[0];
			if (Castles.Name != "castles")		return 6;
			if (Castles.Children.count == 0)	return 7;

			foreach (Castle in Castles.Children) {
				if (Castle.Name != "castle")	return 8;

				declare Text	Name			= Castle.GetAttributeText("name", "");
				if (Name == "")					return 9;

				declare Text	TextPos			= Castle.GetAttributeText("pos", "");
				if (TextPos == "")				return 10;
				declare Text[]	SplittedPos	= TL::Split(" ", TextPos);
				declare Vec3	Pos				= <TL::ToReal(SplittedPos[0]), TL::ToReal(SplittedPos[1]), 0.>;

				declare Integer	Initial			= Castle.GetAttributeInteger("initial", -1);

				declare Boolean	StartPoint;
				if (Initial == 1) {
					StartPoint = True;
				} else if (Initial == 0) {
					StartPoint = False;
				} else {
					return 11;
				}

				declare Integer Type			= Castle.GetAttributeInteger("type", -1);
				if (Type == -1)					return 12;

				declare Real Size				= Castle.GetAttributeReal("size", -42.);
				if (Size == -42.)				return 13;

				foreach (Link in Castle.Children) {
					if (Link.Name != "link")		return 14;

					declare LinkedCastleName		= Link.GetAttributeText("castlename", "");
					if (LinkedCastleName == "")		return 15;

					LinksFrom.add(Name);
					LinksTo.add(LinkedCastleName);
				}

				declare CMlFrame NewPlanet = GetNeutralPlanet();
				NewPlanet.RelativePosition = <Pos.X + C_MenuOffset.X, Pos.Y + C_MenuOffset.Y, Pos.Z>;
				GetPlanetScaleFrame(NewPlanet).RelativeScale = Size;
				SetPlanetName(NewPlanet, Name);
				SetPlanetType(NewPlanet, Type);
				if (StartPoint) SwitchStartPoint(NewPlanet);
				NewPlanet.Show();
				yield;
			}

			if (LinksFrom.count != LinksTo.count) return 16;

			for (Index, 0, LinksFrom.count - 1) {
				declare CMlFrame P1 = GetPlanetFromName(LinksFrom[Index]);
				declare CMlFrame P2 = GetPlanetFromName(LinksTo[Index]);

				CreateLink(P1, P2);
				UpdateLinks();
				yield;
			}

			return 0;

		}

		/**
		 * Returns the world's XML representation.
		 */
		Text ExportAsXML() {

			declare Text XML;


			declare CMlFrame[] Planets = GetPlanetInstances();

			XML = GetXMLHeader() ^ "\n" ^
				"""<world startyear="{{{ GetStartYear() }}}">""" ^ "\n" ^ "\t<castles>\n";

			foreach (Planet in Planets) {
				if (IsPlanetNeutral(Planet)) continue; // Only write used planets.
				
				declare Vec2	Pos				= <Planet.RelativePosition.X - C_MenuOffset.X, Planet.RelativePosition.Y - C_MenuOffset.Y>;
				declare Text	Name			= GetPlanetName(Planet);
				declare Integer	Type			= GetPlanetType(Planet);
				declare Real	Scale			= GetPlanetScaleFrame(Planet).RelativeScale;

				declare Integer	StartPoint;
				if (IsStartPoint(Planet)) {
					StartPoint = 1;
				} else {
					StartPoint = 0;
				}

				XML ^= "\t\t" ^ """<castle name="{{{ Name }}}" pos="{{{ Pos.X }}} {{{ Pos.Y }}}" initial="{{{ StartPoint }}}" type="{{{ Type }}}" size="{{{ Scale }}}">""" ^ "\n";

				foreach (Link in G_Links) {
					if (Link.Z == C_NeutralLinkId) continue;

					if (Link.X == GetPlanetIndex(Planet)) {
						declare CMlFrame JoinedPlanet <=> Planets[Link.Y];
						declare Text LinkedCastleName = GetPlanetName(JoinedPlanet);

						XML ^= "\t\t\t" ^ """<link castlename="{{{ LinkedCastleName }}}" />""" ^ "\n";
					}
				}

				XML ^= "\t\t</castle>\n";

			}
			XML ^= "\t</castles>\n" ^
			"</world>";

			return XML;
		}

		Text MinifyXML(Text _XML) {
			return TL::Replace(TL::Replace(_XML, "\t", ""), "\n", "");
		}

		/**
		 * Displays the export window with the given content.
		 */
		Void ShowExportWindow(Text _Content) {
			declare CMlFrame	ExportWindow	<=> (Page.GetFirstChild("exportmenu") as CMlFrame);
			declare CMlTextEdit XMLView			<=> (ExportWindow.GetFirstChild("exporttextedit") as CMlTextEdit);
			declare CMlLabel	BtnMinify		<=> (ExportWindow.GetFirstChild("exportminify") as CMlLabel);
			declare CMlLabel	BtnClose		<=> (ExportWindow.GetFirstChild("exportclose") as CMlLabel);

			XMLView.Value = _Content;
			ExportWindow.Show();

			declare Boolean Break = False;
			while (True) {
				yield;

				foreach (Event in PendingEvents) {
					switch (Event.Type) {
						case CMlEvent::Type::KeyPress: {
							if (Event.KeyCode == Key_Escape) Break = True;
						}
						case CMlEvent::Type::MouseClick: {
							if (Event.Control == BtnMinify) {
								XMLView.Value = MinifyXML(_Content);
							} else if (Event.Control == BtnClose) {
								Break = True;
							}
						}
					}
				}

				if (Break) break;
			}

			// The window close will be animated.
			G_LastExportTimestamp = Now;

		}

		/**
		 * Displays the load window.
		 */
		Void ShowLoadWindow() {
			declare CMlFrame	LoadWindow	<=> (Page.GetFirstChild("loadmenu") as CMlFrame);
			declare CMlTextEdit	XMLView		<=> (LoadWindow.GetFirstChild("loadtextedit") as CMlTextEdit);
			declare CMlLabel	BtnLoad		<=> (LoadWindow.GetFirstChild("loadload") as CMlLabel);
			declare CMlLabel	BtnClose	<=> (LoadWindow.GetFirstChild("loadclose") as CMlLabel);

			LoadWindow.Show();

			declare Boolean Break = False;
			while (True) {
				yield;

				foreach (Event in PendingEvents) {
					switch (Event.Type) {
						case CMlEvent::Type::MouseClick: {
							if (Event.Control == BtnLoad) {

								declare Integer Code = LoadXML(XMLView.Value);
								if (Code == 0) {
									UpdateLinks();
									Status("XML loaded.");
									Break = True;
								} else {
									ResetAll();
									// Audio.PlaySoundEvent(Sound_Error, -10.);
									Status("Can't read your XML! (error " ^ Code ^ ")", True);
									Break = True;
								}

							} else if (Event.Control == BtnClose) {
								Break = True;
							}
						}
					}
				}

				if (Break) break;
			}

			// The window close will be animated.
			G_LastLoadTimestamp = Now;

		}

		Void ShowHelpWindow() {
			declare CMlFrame	HelpWindow	<=> (Page.GetFirstChild("helpmenu") as CMlFrame);
			declare CMlLabel	BtnClose	<=> (HelpWindow.GetFirstChild("helpclose") as CMlLabel);

			HelpWindow.Show();

			declare Boolean Break = False;
			while (True) {
				yield;

				foreach (Event in PendingEvents) {
					switch (Event.Type) {

						case CMlEvent::Type::KeyPress: {
							if (Event.KeyCode == Key_Escape) {
								Break = True;
							}
						}

						case CMlEvent::Type::MouseClick: {
							if (Event.Control == BtnClose) {
								Break = True;
							}
						}
					}
				}

				if (Break) break;
			}

			// The window close will be animated.
			G_LastHelpTimestamp = Now;
		}

		Boolean IsWorldValid() {
			if (AreAllPlanetsNamed()) {
				if (AreLinksValid()) { // AreAllPlanetsLinked()
					if (CheckStartPointConstraints()) {
						if (IsStartYearDefined()) {
							return True;
						} else {
							// Audio.PlaySoundEvent(Sound_Error, -10.);
							Status("You must specify a start year!", True);
						}
					} else {
						// Audio.PlaySoundEvent(Sound_Error, -10.);
						Status("You must place at least " ^ C_MinStartPoints ^ " start points!", True);
					}
				} else {
					// Audio.PlaySoundEvent(Sound_Error, -10.);
					Status("There must be only one group of planets!", True);
				}
			} else {
				// Audio.PlaySoundEvent(Sound_Error, -10.);
				Status("Name all your planets before!", True);
			}

			return False;
		}

		/**
		 * Debug function to see all key codes.
		 */
		Void DebugKeys() {
			for (KeyCode, 0, 200) {
				if (IsKeyPressed(KeyCode)) Status(TL::ToText(KeyCode));
			}
		}


		// // // // // // // //
		// Script
		// // // // // // // //

		/**
		 * Main function.
		 */
		main() {

			for (Index, 0, GetLinkInstances().count - 1) {
				G_Links[Index] = <0, 0, C_NeutralLinkId>;
			}

			for (Index, 0, GetPlanetInstances().count - 1) {
				G_PlanetType[Index] = 0;
			}
			
			// Shortcuts
			declare Real Mx;
			declare Real My;

			// if True, the GUI wiil be paused.
			declare Boolean Pause;
			
			// Booleans used to ignore some events.
			declare Boolean IgnoreEvents = False;
			declare Boolean IgnoreClick = False;

			// Stores the last loop turn's states.
			declare Boolean LastMouseLeftButton = False;
			declare Boolean LastShiftButton = False;

			declare Boolean Moving = False;

			// Stores timestamps of modifications.
			declare Integer LastSizeModificationTimestamp = 0;
			declare Integer LastPositionModificationTimestamp = 0;

			// Inits the fake link to hide it.
			G_FakeLinkOrigin = C_FakeLinkNeutralPos;
			
			// All usefull controls
			declare CMlQuad		PlanetBG		<=> (Page.GetFirstChild("planetsbg") as CMlQuad);
			declare CMlLabel	BtnNew			<=> (Page.GetFirstChild("btn-new") as CMlLabel);
			declare CMlLabel	BtnLoad			<=> (Page.GetFirstChild("btn-load") as CMlLabel);
			declare CMlLabel	BtnExport		<=> (Page.GetFirstChild("btn-export") as CMlLabel);
			declare CMlLabel	BtnHelp			<=> (Page.GetFirstChild("btn-help") as CMlLabel);
			

			declare CMlEntry	PlanetNameEntry	= GetContextualMenuPlanetNameEntry();
			declare CMlLabel	BtnRemove		<=> (Page.GetFirstChild("btn-remove") as CMlLabel);
			declare CMlQuad		RadioStartPoint	= GetContextualMenuPlanetRadioStartPoint();

			declare CMlQuad		BtnPlus			= GetContextualMenuPlanetPlusBtn();
			declare CMlQuad		BtnMinus		= GetContextualMenuPlanetMinusBtn();

			declare CMlQuad		BtnType0		= GetContextualMenuMapIndexBtn(0);
			declare CMlQuad		BtnType1		= GetContextualMenuMapIndexBtn(1);
			declare CMlQuad		BtnType2		= GetContextualMenuMapIndexBtn(2);
			declare CMlQuad		BtnType3		= GetContextualMenuMapIndexBtn(3);
			declare CMlQuad		BtnType4		= GetContextualMenuMapIndexBtn(4);
			declare CMlQuad		BtnType5		= GetContextualMenuMapIndexBtn(5);

			// Stores the pointed planet.
			declare CMlFrame PlanetInRange;

			// Main loop.
			while (True) {
				yield;

				// Recovers the pointed planet.
				PlanetInRange = GetPlanetFrameInRange(<MouseX, MouseY>);

				// Catches pauses.
				foreach (Event in PendingEvents) {
					if (Event.Type == CMlEvent::Type::KeyPress) {
						if (Event.KeyCode == Key_Pause) {
							Pause = !Pause;
							if (Pause) {
								Status("Paused!", True);
							} else {
								Status("Good to see you back!");
							}
						}
					}
				}

				// Do all animations (rotations, selections, etc).
				Animate();

				// Avoids to continue the loop's code if paused.
				if (Pause) continue;

				// Shortcuts
				Mx = MouseX;
				My = MouseY;

				// Debug function
				// DebugKeys();

				if (Isset(G_SelectedPlanet)) {

					if (IsKeyPressed(Key_CtrlLeft) || IsKeyPressed(Key_CtrlRight)) {

						if (MouseRightButton) {
	
							if (Isset(PlanetInRange) && PlanetInRange == G_SelectedPlanet) {
								PlanetNameEntry.StartEdition();
								// RenamePlanet(G_SelectedPlanet);
							}

						} else if (LastSizeModificationTimestamp + 100 < Now) {
							if (IsKeyPressed(Key_Up) || IsKeyPressed(Key_Plus) || IsKeyPressed(Key_Z)) {
								IncreasePlanetSize(G_SelectedPlanet, C_SizeStep);
								Status("Increasing this planet's size!");
								LastSizeModificationTimestamp = Now;
							} else if (IsKeyPressed(Key_Down) || IsKeyPressed(Key_Minus)|| IsKeyPressed(Key_A)) {
								DecreasePlanetSize(G_SelectedPlanet, C_SizeStep);
								Status("Decreasing this planet's size!");
								LastSizeModificationTimestamp = Now;
							}
						}

					} else if (IsKeyPressed(Key_ShiftLeft) || IsKeyPressed(Key_ShiftRight)) {

						if (!LastShiftButton) {
							
							if (GetPlanetName(G_SelectedPlanet) != C_NeutralPlanetName) {
								
								Status("Ready to link!");

								declare Boolean Clicked;
								declare CMlFrame OtherPlanet;
								declare CMlFrame LastLinkPlanet;
								declare Integer LastLinkTimestamp;

								while (IsKeyPressed(Key_ShiftLeft) || IsKeyPressed(Key_ShiftRight)) {
									
									ShowFakeLink(G_SelectedPlanet);

									// This loops until a planet is clicked, or the shift key is released.
									while ((IsKeyPressed(Key_ShiftLeft) || IsKeyPressed(Key_ShiftRight)) && !Clicked) {
										yield;
										Animate();
										Clicked = MouseLeftButton;
										
										OtherPlanet = GetPlanetFrameInRange(<MouseX, MouseY>);

										if (Now - LastLinkTimestamp < 500 && OtherPlanet == LastLinkPlanet) {
											Clicked = False;
										}

									}

									// If the user clicked on another planet.
									if (Clicked && Isset(OtherPlanet) && OtherPlanet != G_SelectedPlanet) {

										if (!LinkExists(G_SelectedPlanet, OtherPlanet)) {
											CreateLink(G_SelectedPlanet, OtherPlanet);
											UpdateLinks();
											// Audio.PlaySoundEvent(Sound_Link, -10.);
											Status("Link established!");
											LastLinkPlanet = OtherPlanet;
											LastLinkTimestamp = Now;
										} else {
											// Audio.PlaySoundEvent(Sound_Error, -10.);
											Status("Link already existing!", True);
											LastLinkPlanet = OtherPlanet;
											LastLinkTimestamp = Now;
										}
									} else {
										break;
									}

									Clicked = False;

								}
								
								HideFakeLink();

							} else {
								// Audio.PlaySoundEvent(Sound_Error, -10.);
								Status("Please name your planet before linking it.", True);
							}
						}

					} else if (IsKeyPressed(Key_F2)) {

						if (Isset(PlanetInRange) && PlanetInRange == G_SelectedPlanet) {
							PlanetNameEntry.StartEdition();
							// RenamePlanet(G_SelectedPlanet);
						}

					} else if (LastPositionModificationTimestamp + 100 < Now) {

						declare CMlQuad AvailableSpaceBorder = GetAvailableSpaceBorder();
					
						if (IsKeyPressed(Key_Up)) {
							if (AvailableSpaceBorder.AbsolutePosition.Y + AvailableSpaceBorder.Size.Y > G_SelectedPlanet.AbsolutePosition.Y + C_MoveStep) {
								G_SelectedPlanet.RelativePosition.Y += C_MoveStep;
								LastPositionModificationTimestamp = Now;
							}
						}

						if (IsKeyPressed(Key_Down)) {
							if (AvailableSpaceBorder.AbsolutePosition.Y < G_SelectedPlanet.AbsolutePosition.Y - C_MoveStep) {
								G_SelectedPlanet.RelativePosition.Y -= C_MoveStep;
								LastPositionModificationTimestamp = Now;
							}
						}

						if (IsKeyPressed(Key_Left)) {
							if (AvailableSpaceBorder.AbsolutePosition.X < G_SelectedPlanet.AbsolutePosition.X - C_MoveStep) {
								G_SelectedPlanet.RelativePosition.X -= C_MoveStep;
								LastPositionModificationTimestamp = Now;
							}
						}

						if (IsKeyPressed(Key_Right)) {
							if (AvailableSpaceBorder.AbsolutePosition.X + AvailableSpaceBorder.Size.X > G_SelectedPlanet.AbsolutePosition.X + C_MoveStep) {
								G_SelectedPlanet.RelativePosition.X += C_MoveStep;
								LastPositionModificationTimestamp = Now;
							}
						}

						UpdateLinks();
					}

					if(!MouseLeftButton) Moving = False;
					
					if (Moving) {

						G_SelectedPlanet.RelativePosition.X = ML::ToReal(ML::NearestInteger(MouseX));
						G_SelectedPlanet.RelativePosition.Y = ML::ToReal(ML::NearestInteger(MouseY));
						UpdateLinks();

					}


				}

				foreach (Event in PendingEvents) {

					if (IgnoreEvents) continue;

					else if (Event.Type == CMlEvent::Type::KeyPress) {
						
						// Planet creation.
						if (Event.KeyCode == Key_Space) {
							if (IsOnAvailableSpace()) {
								if (!Isset(PlanetInRange)) {
									if (AreRemainingPlanets()) {
										declare CMlFrame NewPlanet		= GetNeutralPlanet();
										declare Integer NewPlanetIndex	= GetPlanetInstanceNumber(NewPlanet);

										declare Integer PlanetPosX		= ML::NearestInteger(Mx);
										declare Integer PlanetPosY		= ML::NearestInteger(My);

										declare Text NewPlanetName		= C_Letters[NewPlanetIndex % 26] ^ NewPlanetIndex;

										NewPlanet.RelativePosition = <ML::ToReal(PlanetPosX), ML::ToReal(PlanetPosY), 0.>;
										NewPlanet.Show();
										SetPlanetName(NewPlanet, NewPlanetName);
										FocusPlanet(NewPlanet);
										// Audio.PlaySoundEvent(Sound_Place, -10.);
										Status("Created a new planet at " ^ PlanetPosX ^ "," ^ PlanetPosY ^ ".");
									} else {
										// Audio.PlaySoundEvent(Sound_Error, -10.);
										Status("Max planet number reached!", True);
									}
								} else {
									// Audio.PlaySoundEvent(Sound_Error, -10.);
									Status("There is already a planet here!", True);
								}
							} else {
								G_LastAvailableSpaceTimestamp = Now;
								// Audio.PlaySoundEvent(Sound_Error, -10.);
								Status("You can't place a planet here!", True);
							}
						}

						// Planet removal.
						else if (Event.KeyCode == Key_Delete) {
							if (Isset(G_SelectedPlanet)) {
								ResetPlanet(G_SelectedPlanet);
								UpdateLinks();
								FocusPlanet(Null);
								// Audio.PlaySoundEvent(Sound_Remove, -10.);
								Status("Planet deleted.");
							} else {
								// Audio.PlaySoundEvent(Sound_Error, -10.);
								Status("Please select a planet before!", True);
							}
						}

						else if (Event.KeyCode == Key_Tab) {
							if (Isset(G_SelectedPlanet)) {
								FocusPlanet(GetNextPlanet(G_SelectedPlanet));
							} else {
								FocusPlanet(GetFirstPlanet());
							}
						}

						else if (Event.KeyName == "C" && (IsKeyPressed(Key_CtrlLeft) || IsKeyPressed(Key_CtrlRight))) {
							if (Isset(G_SelectedPlanet)) {
								declare Text PlanetName = GetPlanetName(G_SelectedPlanet);
								if (PlanetName != C_NeutralPlanetName) {
									
									SwitchStartPoint(G_SelectedPlanet);
									
								} else {
									// Audio.PlaySoundEvent(Sound_Error, -10.);
									Status("Please name your planet before!", True);
								}
							} else {
								// Audio.PlaySoundEvent(Sound_Error, -10.);
								Status("Please select a planet before!", True);
							}
						}

						else if (Event.KeyName == "R" && (IsKeyPressed(Key_CtrlLeft) || IsKeyPressed(Key_CtrlRight))) {
							if (Isset(G_SelectedPlanet)) {
								if (Isset(PlanetInRange) && PlanetInRange == G_SelectedPlanet) {
									PlanetNameEntry.StartEdition();
									// RenamePlanet(G_SelectedPlanet);
								}
							} else {
								// Audio.PlaySoundEvent(Sound_Error, -10.);
								Status("Please select a planet before!", True);
							}
						}

						else if (Event.KeyName == "O" && (IsKeyPressed(Key_CtrlLeft) || IsKeyPressed(Key_CtrlRight))) {
							ShowLoadWindow();
						}

						else if (Event.KeyName == "S" && (IsKeyPressed(Key_CtrlLeft) || IsKeyPressed(Key_CtrlRight))) {
							if (IsWorldValid()) ShowExportWindow(ExportAsXML());
						}
					}

					else if (Event.Type == CMlEvent::Type::MouseClick) {
						
						if (IgnoreClick) {
							IgnoreClick = False;
							continue;
						}
						
						if (Event.Control == PlanetBG) {
							if (Isset(PlanetInRange)) { 		// && !(IsKeyPressed(Key_CtrlLeft) || IsKeyPressed(Key_CtrlRight))) {
								if(IsKeyPressed(Key_CtrlLeft) || IsKeyPressed(Key_CtrlRight)) {
									Moving = True;
								}
								FocusPlanet(PlanetInRange);
							} else {
								FocusPlanet(Null);
							}
						}

						// New world (erases the current).
						else if (Event.Control == BtnNew) {
							if(ConfirmNewWorld()) ResetAll();
						}

						// Displays the export window with the XML.
						else if (Event.Control == BtnExport) {
							if (IsWorldValid()) ShowExportWindow(ExportAsXML());
						}

						// Displays the help window.
						else if (Event.Control == BtnHelp) {
							ShowHelpWindow();
						}

						// Displays the load window with the XML.
						else if (Event.Control == BtnLoad) {
							ShowLoadWindow();
						}

						else if (Event.Control == RadioStartPoint) {
							SwitchStartPoint(G_SelectedPlanet);
						}

						else if (Event.Control == BtnRemove) {
							ResetPlanet(G_SelectedPlanet);
							UpdateLinks();
							FocusPlanet(Null);
							// Audio.PlaySoundEvent(Sound_Remove, 0.);
							Status("Planet deleted.");
						}

						else if (Event.Control == BtnPlus) {
							// log(GetPlanetScaleFrame(G_SelectedPlanet).RelativeScale);
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.);
							IncreasePlanetSize(G_SelectedPlanet, C_SizeStep);
							Status("Increasing this planet's size!");

						}

						else if (Event.Control == BtnMinus) {
							// log(GetPlanetScaleFrame(G_SelectedPlanet).RelativeScale);
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.);
							DecreasePlanetSize(G_SelectedPlanet, C_SizeStep);
							Status("Decresing this planet's size!");
						}

						else if (Event.Control == BtnType0) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.);
							SetPlanetType(G_SelectedPlanet, 0);
							ResetContextualMenuMapIndexBtns();
							BtnType0.Substyle = C_StyleTypeSelected;
						}

						else if (Event.Control == BtnType1) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.);
							SetPlanetType(G_SelectedPlanet, 1);
							ResetContextualMenuMapIndexBtns();
							BtnType1.Substyle = C_StyleTypeSelected;
						}

						else if (Event.Control == BtnType2) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.);
							SetPlanetType(G_SelectedPlanet, 2);
							ResetContextualMenuMapIndexBtns();
							BtnType2.Substyle = C_StyleTypeSelected;
						}

						else if (Event.Control == BtnType3) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.);
							SetPlanetType(G_SelectedPlanet, 3);
							ResetContextualMenuMapIndexBtns();
							BtnType3.Substyle = C_StyleTypeSelected;
						}

						else if (Event.Control == BtnType4) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.);
							SetPlanetType(G_SelectedPlanet, 4);
							ResetContextualMenuMapIndexBtns();
							BtnType4.Substyle = C_StyleTypeSelected;
						}

						else if (Event.Control == BtnType5) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.);
							SetPlanetType(G_SelectedPlanet, 5);
							ResetContextualMenuMapIndexBtns();
							BtnType5.Substyle = C_StyleTypeSelected;
						}
					}

					else if (Event.Type == CMlEvent::Type::EntrySubmit) {

						if (Event.Control == PlanetNameEntry) {
							SetPlanetName(G_SelectedPlanet, PlanetNameEntry.Value);
						}

					}

					else if (Event.Type == CMlEvent::Type::MouseOver) {

						if (Event.Control == BtnPlus) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 3, 0.);
						}

						else if (Event.Control == BtnMinus) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 3, 0.);
						}

						else if (Event.Control == BtnType0) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 3, 0.);
						}

						else if (Event.Control == BtnType1) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 3, 0.);
						}

						else if (Event.Control == BtnType2) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 3, 0.);
						}

						else if (Event.Control == BtnType3) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 3, 0.);
						}

						else if (Event.Control == BtnType4) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 3, 0.);
						}

						else if (Event.Control == BtnType5) {
							// Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 3, 0.);
						}
					}
				}

				LastShiftButton = (IsKeyPressed(Key_ShiftRight) || IsKeyPressed(Key_ShiftLeft));
			}

		}

	--></script>

</manialink>