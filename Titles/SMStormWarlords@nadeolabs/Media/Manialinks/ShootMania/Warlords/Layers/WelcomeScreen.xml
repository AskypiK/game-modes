<manialink version="2">
	<frame id="main">
		<label posn="0 10 0" sizen="128 10" halign="center" valign="center" style="TextTitle3" text="Welcome to Warlords" textsize="5"/>
		
		<frame id="new" posn="-30 -5 1">
			<label posn="0 0 1" sizen="40 10" halign="center" valign="center" style="TextTitle3" text="New" textsize="3"/>
			<quad id="btnnew" posn="0 0 0" sizen="40 10" halign="center" valign="center" style="BgsButtons" substyle="BgButtonSmall" scriptevents="1"/>
		</frame>
		
		<frame id="load" posn="30 -5 1">
			<label posn="0 0 1" sizen="40 10" halign="center" valign="center" style="TextTitle3" text="Load" textsize="3"/>
			<quad id="btnload" posn="0 0 0" sizen="40 10" halign="center" valign="center" style="BgsButtons" substyle="BgButtonSmall" scriptevents="1"/>
		</frame>
		
		<quad id="bg" posn="0 0 0" sizen="128 32" halign="center" valign="center" style="EnergyBar" substyle="EnergyBar"/>
	</frame>
	
	<script><!--
	
		#Include "MathLib" as ML
		#Include "AnimLib" as AL
		
		#Const C_ChoiceNull	0
		#Const C_ChoiceNew	1
		#Const C_ChoiceLoad	2
	
		declare Boolean G_UIVisibility;
		declare Integer G_UIVisibilityChangeTimestamp;
		
		CMlFrame GetMainFrame() {
			return (Page.GetFirstChild("main") as CMlFrame);
		}
		
		CMlFrame GetBtnNewFrame() {
			return (Page.GetFirstChild("new") as CMlFrame);
		}
		
		CMlFrame GetBtnLoadFrame() {
			return (Page.GetFirstChild("load") as CMlFrame);
		}
		
		Void ApplyOpacity(CMlControl _Control, Real _Opacity) {
			switchtype (_Control) {
				case CMlFrame: {
					foreach (Child in (_Control as CMlFrame).Controls) {
						ApplyOpacity(Child, _Opacity);
					}
				}
				case CMlQuad: {
					(_Control as CMlQuad).Opacity = _Opacity;
				}
				case CMlLabel: {
					(_Control as CMlLabel).Opacity = _Opacity;
				}
			}
		}
		
		Void SetChoice(Integer _Choice) {
			declare Integer Cli_UI_P_Choice for This;
			Cli_UI_P_Choice = _Choice;
		}
		
		Integer GetChoice() {
			declare Integer Cli_UI_P_Choice for This;
			return Cli_UI_P_Choice;
		}
	
		Void Init() {
			SetChoice(C_ChoiceNull);
			
			G_UIVisibility = True;
			G_UIVisibilityChangeTimestamp = Now;
		}
	
		Void LoopStart() {
		
		}
		
		Void Animate() {
			declare CMlFrame MainFrame			= GetMainFrame();
			declare CMlFrame BtnNewFrame	= GetBtnNewFrame();
			declare CMlFrame BtnLoadFrame	= GetBtnLoadFrame();
		
			declare Real MFPosY;
			declare Real MFScale;
			declare Real MFOpacity;
			
			if (G_UIVisibility) {
				MFPosY		= AL::EaseOutSine(Now - G_UIVisibilityChangeTimestamp, 10., -10., 500);
				MFScale		= AL::EaseOutSine(Now - G_UIVisibilityChangeTimestamp, 0.9, 0.1, 500);
				MFOpacity	= AL::EaseInOutSine(Now - G_UIVisibilityChangeTimestamp, 0., 1., 500);
			} else {
				MFPosY		= AL::EaseInSine(Now - G_UIVisibilityChangeTimestamp, 0., -10., 500);
				MFScale		= AL::EaseInSine(Now - G_UIVisibilityChangeTimestamp, 1., -0.1, 500);
				MFOpacity	= AL::EaseInOutSine(Now - G_UIVisibilityChangeTimestamp, 1., -1., 500);
			}
			
			MainFrame.RelativePosition.Y = MFPosY;
			MainFrame.RelativeScale = MFScale;
			ApplyOpacity(Page.MainFrame, MFOpacity);
			
			switch (GetChoice()) {
				case C_ChoiceNew: {
					BtnNewFrame.RelativeScale = AL::EaseOutCubic(Now - G_UIVisibilityChangeTimestamp, 1., -0.1, 200);
				}
				case C_ChoiceLoad: {
					BtnLoadFrame.RelativeScale = AL::EaseOutCubic(Now - G_UIVisibilityChangeTimestamp, 1., -0.1, 200);
				}
			}
		}
	
		main() {
		
			Init();
		
			while (True) {
				
				LoopStart();
				
				foreach (Event in PendingEvents) {
					switch (Event.Type) {
						case CMlEvent::Type::MouseClick: {
							if (!G_UIVisibility) continue;
							switch (Event.ControlId) {
								case "btnnew": {
									G_UIVisibility = False;
									G_UIVisibilityChangeTimestamp = Now;
									SetChoice(C_ChoiceNew);
								}
								case "btnload": {
									G_UIVisibility = False;
									G_UIVisibilityChangeTimestamp = Now;
									SetChoice(C_ChoiceLoad);
								}
							}
						}
					}
				}
				
				Animate();
				yield;
				
			}
		
		}
	
	--></script>
</manialink>