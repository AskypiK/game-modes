#Include "Libs/Nadeo/Layers2.Script.txt"	as Layers
#Include "Libs/Nadeo/Uized.Script.txt"	as Uized

#Const C_LayerName		"World"
#Const C_Address		"file://Media/Manialinks/ShootMania/Warlords/Layers/World.xml"

#Const C_Uized_Vars		[
							["CircleWaveImageUrl",				"file://Media/Manialinks/ShootMania/Warlords/Textures/World/CircleWave1.png"],
							["GoldHandlersMinusImageUrl",		"file://Media/Manialinks/ShootMania/Warlords/Textures/World/Minus.png"],
							["GoldHandlersPlusImageUrl",		"file://Media/Manialinks/ShootMania/Warlords/Textures/World/Plus.png"],
							["AttackTextImageUrl",				"file://Media/Manialinks/ShootMania/Warlords/Textures/World/AttackText2.png"],
							["AttackArrowImageUrl",				"file://Media/Manialinks/ShootMania/Warlords/Textures/World/AttackArrow2.png"],
							["TakeTextImageUrl",				"file://Media/Manialinks/ShootMania/Warlords/Textures/World/TakeText2.png"],
							["TakeArrowImageUrl",				"file://Media/Manialinks/ShootMania/Warlords/Textures/World/TakeArrow2.png"],
							["BlitzTextImageUrl",				"file://Media/Manialinks/ShootMania/Warlords/Textures/World/BlitzText2.png"],
							["BlitzArrowImageUrl",				"file://Media/Manialinks/ShootMania/Warlords/Textures/World/BlitzArrow.png"],
							["ReticleImageUrl",					"file://Media/Manialinks/ShootMania/Warlords/Textures/World/Reticle.dds"],
							["CapitalImageUrl",					"file://Media/Manialinks/ShootMania/Warlords/Textures/World/Star3.png"],
							["GoldVeinImageUrl",				"file://Media/Manialinks/ShootMania/Warlords/Textures/World/GoldVein.png"],
							["StartPointImageUrl",				"file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/StartPoint3.png"],
							["LightProjImageUrl",				"file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/LightProj.png"],
							["CastleTypeImageUrl",				"file://Media/Manialinks/ShootMania/Warlords/Textures/World/Castles/Castle6.png"],
							["LinkFrontImageUrl",				"file://Media/Manialinks/ShootMania/Warlords/Textures/World/link.png"],
							["BackgroundImageUrl",				"file://Media/Manialinks/ShootMania/Warlords/Textures/World/bg.png"],
							
							["FocusSoundUrl",					"file://Media/Sounds/ShootMania/Warlords/focus.ogg"],
							["EmblemBaseUrl",					"file://Media/Manialinks/ShootMania/Warlords/Textures/World/Emblems/Emblem"],
							["GoldIncomeLabelAnimDuration",		"1500"],
							["GoldAmountForCapitals",			"0"]
						]


// ---------------------------------- //
/**
 * Shows the world UI layer.
 */
Void Show() {
	Layers::Attach(C_LayerName);

}

// ---------------------------------- //
/**
 * Orders to redraw the castles.
 */
Void UpdateCastles(Integer[] _CastleIds) {
	
	foreach (Player in Players) {
		declare CUIConfig UI = UIManager.GetUI(Player);
		if (UI == Null) continue;
		
		declare netwrite Integer[]	Srv_UI_P_CastlesToUpdate		for UI;
		declare netwrite Integer	Srv_UI_P_UpdateCastlesTimestamp	for UI;
		Srv_UI_P_CastlesToUpdate = _CastleIds;
		Srv_UI_P_UpdateCastlesTimestamp = Now;
	}
	
}

// ---------------------------------- //
/**
 * Orders to redraw the links.
 */
Void UpdateLinks() {
	
	foreach (Player in Players) {
		declare CUIConfig UI = UIManager.GetUI(Player);
		if (UI == Null) continue;
		
		declare netwrite Integer Srv_UI_P_UpdateLinksTimestamp for UI;
		Srv_UI_P_UpdateLinksTimestamp = Now;
	}
	
}

// ---------------------------------- //
/**
 * Changes the visibility of start point castles.
 *
 * @param _Visibility True to display start points, False otherwise.
 */
Void ToggleStartPointsVisibility(Boolean _Visibility) {
	
	declare netwrite Boolean Srv_UI_G_StartPointsVisibility for Teams[0];
	Srv_UI_G_StartPointsVisibility = _Visibility;
	
}

// ---------------------------------- //
/**
 * Shows "take" or "attack" on the given castles.
 *
 * @param _CastleIds The castles available to do actions.
 * @param _Player The concerned player.
 */
Void SetPossibleCastlesForAction(Integer[] _CastleIds, CPlayer _Player) {
	
	declare netwrite Integer[]	Srv_UI_P_PossibleCastlesForAction			for _Player;
	declare netwrite Integer	Srv_UI_P_PossibleCastlesForActionTimestamp	for _Player;
	Srv_UI_P_PossibleCastlesForAction = _CastleIds;
	Srv_UI_P_PossibleCastlesForActionTimestamp = Now;
	
}

// ---------------------------------- //
/**
 * Shows "take" or "attack" on the given castles.
 *
 * @param _CastleIds The castles available to do actions.
 * @param _Player The concerned player.
 */
Void AddPossibleCastlesForAction(Integer[] _CastleIds, CPlayer _Player) {
	
	declare netwrite Integer[]	Srv_UI_P_PossibleCastlesForAction			for _Player;
	declare netwrite Integer	Srv_UI_P_PossibleCastlesForActionTimestamp	for _Player;
	foreach (CastleId in _CastleIds) {
		Srv_UI_P_PossibleCastlesForAction.add(CastleId);
	}
	Srv_UI_P_PossibleCastlesForActionTimestamp = Now;
	
}

// ---------------------------------- //
/**
 * Hides the world UI layer.
 */
Void Hide() {

	Layers::Detach(C_LayerName);

}

// ---------------------------------- //
/**
 * Destroys the world UI layer.
 */
Void Unload() {
	Layers::Destroy(C_LayerName);
	
	foreach (Player in Players) {
		SetPossibleCastlesForAction(Integer[], Player);
	}
}

// ---------------------------------- //
/**
 * Generates the correct number of castle frameinstance tag.
 *
 * @param _Count The number of castle frame instances.
 * @return The Manialink tags.
 */
Text GetCastleFrameInstances(Integer _Count) {
	declare Text CastleFrameInstances;
	for (I, 0, _Count - 1) {
		CastleFrameInstances ^= """<frameinstance modelid="castle" hidden="1" />""";
	}
	return CastleFrameInstances;
}

// ---------------------------------- //
/**
 * Generates the correct number of link frameinstance tag.
 *
 * @param _Count The number of link frame instances.
 * @return The Manialink tags.
 */
Text GetLinkFrameInstances(Integer _Count) {
	declare Text LinkFrameInstances;
	for (I, 0, _Count - 1) {
		LinkFrameInstances ^= """<frameinstance modelid="link" hidden="1" />""";
	}
	return LinkFrameInstances;
}

// ---------------------------------- //
/**
 * Highlights players' empires.
 *
 * @param _OwnerIds The players to get the castles from.
 */
Void HighlightEmpires(Integer[] _OwnerIds) {
	declare netwrite Integer[] Srv_UI_G_HighlightedEmpires for Teams[0];
	Srv_UI_G_HighlightedEmpires = _OwnerIds;
}

// ---------------------------------- //
/**
 * Stops highlighting empires.
 */
Void StopEmpiresHighlight() {
	HighlightEmpires(Integer[]);
}

// ---------------------------------- //
/**
 * Adds a link to highlight.
 *
 * @param _LinkId The link's id.
 * @param _OwnerId The player to get the color from.
 */
Void AddLinkToHighlight(Integer _LinkId, Integer _OwnerId) {
	declare netwrite Int3[]		Srv_UI_G_HighlightedLinks			for Teams[0];
	declare netwrite Integer	Srv_UI_G_HighlightedLinksTimestamp	for Teams[0];

	if (Srv_UI_G_HighlightedLinks.exists(<_LinkId, _OwnerId, 0>)) return;

	Srv_UI_G_HighlightedLinks.add(<_LinkId, _OwnerId, 0>);
	Srv_UI_G_HighlightedLinksTimestamp = Now;
}

// ---------------------------------- //
/**
 * Add links to highlight.
 *
 * @param _LinkIds the link ids to highlight.
 * @param _OwnerId The player to get the color from.
 */
Void AddLinksToHighlight(Integer[] _LinkIds, Integer _OwnerId) {
	foreach (LinkId in _LinkIds) {
		AddLinkToHighlight(LinkId, _OwnerId);
	}
}

// ---------------------------------- //
/**
 * Stops highlighting links.
 */
Void ResetLinksToHighlight() {
	declare netwrite Int3[]		Srv_UI_G_HighlightedLinks			for Teams[0];
	declare netwrite Integer	Srv_UI_G_HighlightedLinksTimestamp	for Teams[0];
	
	Srv_UI_G_HighlightedLinks.clear();
	Srv_UI_G_HighlightedLinksTimestamp = Now;
}

// ---------------------------------- //
/**
 * Sets links to highlight.
 *
 * @param _LinkIds The link ids to highlight.
 * @param _OwnerId The player to get the color from.
 */
Void SetLinksToHighlight(Integer[] _LinkIds, Integer _OwnerId) {
	ResetLinksToHighlight();
	
	AddLinksToHighlight(_LinkIds, _OwnerId);
}



// ---------------------------------- //
/**
 * Hightlights a castle.
 *
 * @param _CastleId The castle's id to highlight.
 */
Void HighlightCastle(Integer _CastleId) {
	declare netwrite Integer Srv_UI_G_HighlightedCastle for Teams[0];
	Srv_UI_G_HighlightedCastle = _CastleId;
}

// ---------------------------------- //
/**
 * Stops highlighting a castle.
 */
Void StopCastleHighlight() {
	HighlightCastle(-1);
}

// ---------------------------------- //
/**
 * Displays the black background.
 */
Void ShowHighlighter() {
	declare netwrite Boolean Srv_UI_G_HighlighterStatus for Teams[0];
	Srv_UI_G_HighlighterStatus = True;
}

// ---------------------------------- //
/**
 * Hides the black background.
 */
Void HideHighlighter() {
	declare netwrite Boolean Srv_UI_G_HighlighterStatus for Teams[0];
	Srv_UI_G_HighlighterStatus = False;
}

// ---------------------------------- //
/**
 * Checks if the black background is visible.
 *
 * @return True if the black background is visible, False otherwise.
 */
Boolean IsHighlighterVisible() {
	declare netwrite Boolean Srv_UI_G_HighlighterStatus for Teams[0];
	return Srv_UI_G_HighlighterStatus;
}



// ---------------------------------- //
/**
 * Zooms on the highlighted castle.
 *
 * @deprecated
 */
Void ZoomOnHighlightedCastle() {
	declare netwrite Integer Srv_UI_G_ZoomTimestamp for Teams[0];
	Srv_UI_G_ZoomTimestamp = Now;
}

// ---------------------------------- //
/**
 * Stops the zoom on the highlighted.
 */
Void StopZoomOnHighlightedCastle() {
	declare netwrite Integer Srv_UI_G_ZoomTimestamp for Teams[0];
	Srv_UI_G_ZoomTimestamp = -1;
}

// ---------------------------------- //
/**
 * Builds the world UI layer.
 *
 * @param _CastlesCount The number of castles in the current map.
 * @param _LinksCount The number of links in the current map.
 */
Void Load(Integer _CastlesCount, Integer _LinksCount, Integer _GoldPerCastlePerYear, Integer _BlitzGold) {
	Uized::Prepare("LayerName", C_LayerName);
	Uized::Prepare("CastleFrameInstances", GetCastleFrameInstances(_CastlesCount));
	Uized::Prepare("LinkFrameInstances", GetLinkFrameInstances(_LinksCount));
	Uized::Prepare("GoldPerCastlePerYear", _GoldPerCastlePerYear);
	Uized::Prepare("BlitzGold", _BlitzGold);
	Uized::Prepare(C_Uized_Vars);
	
	declare Text TemplateRendered = Uized::Render(C_Address);
	Layers::Create(C_LayerName, TemplateRendered);
	
	ToggleStartPointsVisibility(False);
	
	foreach (Player in Players) {
		SetPossibleCastlesForAction(Integer[], Player);
	}
}