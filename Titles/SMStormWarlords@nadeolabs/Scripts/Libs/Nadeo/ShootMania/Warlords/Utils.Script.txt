/** 
 *	Utils library
 *
 *	Contains functions related to reduce the main script's length.
 */

#Include "Libs/Nadeo/ShootMania/Warlords/Player.Script.txt"	as Player
#Include "Libs/Nadeo/Message.Script.txt"						as Message

// ---------------------------------- //
/**
 * Gets player instances from player ids.
 *
 * @param _PlayerIds the player ids to get the player instances from.
 * @return The player instances array.
 */
CPlayer[] GetPlayers(Integer[] _PlayerIds) {
	declare CPlayer[] MyPlayers;
	foreach (PlayerId in _PlayerIds) {
		MyPlayers.add(Player::GetPlayer(PlayerId));
	}
	return MyPlayers;
}

// ---------------------------------- //
/**
 * Gets a human readable enumeration of the given players.
 *
 * @param _Players The players to put in the textual enumeration.
 * @return All players in a textual list.
 */
Text GetListedNames(CPlayer[] _Players) {
	declare Text ListedNames;
	
	foreach (Index => Player in _Players) {
		if (Index > 0) ListedNames ^= ", ";
		ListedNames ^= Player.User.Name;
	}
	
	return ListedNames;
}

// ---------------------------------- //
/**
 * Gets a human readable enumeration of the given players.
 *
 * @param _PlayerIdents The players to put in the textual enumeration.
 * @return All players in a textual list.
 */
Text GetListedNames(Ident[] _PlayerIdents) {
	declare Text ListedNames;
	
	foreach (Index => Player in _PlayerIdents) {
		if (Index > 0) ListedNames ^= ", ";
		ListedNames ^= Player::GetPlayer(Player).User.Name;
	}
	
	return ListedNames;
}

// ---------------------------------- //
/**
 * Gets a human readable enumeration of the given players.
 *
 * @param _PlayerIds The players to put in the textual enumeration.
 * @return All players in a textual list.
 */
Text GetListedNames(Integer[] _PlayerIds) {
	return GetListedNames(GetPlayers(_PlayerIds));
}

// ---------------------------------- //
/**
 * Sums multiple players' bets.
 *
 * @param _PlayerIds The players to get the bets from.
 * @return The sum of their bets.
 */
Integer SumBets(Integer[] _PlayerIds) {
	declare Integer Sum;
	foreach (PlayerId in _PlayerIds) {
		Sum += Player::GetBet(PlayerId);
	}
	return Sum;
}

// ---------------------------------- //
/**
 * Gets a sorted Int3 array with gold and player ids.
 *
 * @param _AttackersWithTheirGold The array to sort.
 * @return The same array but sorted.
 */
Int3[] SortDescAttackersWithTheirGold(Int3[] _AttackersWithTheirGold) {
	declare Int3[] SortedAtkGold = _AttackersWithTheirGold;
	
	for (I, 1, SortedAtkGold.count) {
		declare Integer FakeI = SortedAtkGold.count - I;
		declare Boolean Sorted = True;
		for (J, 0, FakeI - 1) {
			if (SortedAtkGold[J + 1].Y > SortedAtkGold[J].Y) {
				declare Int3 Temp = SortedAtkGold[J];
				SortedAtkGold[J] = SortedAtkGold[J + 1];
				SortedAtkGold[J + 1] = Temp;
				Sorted = False;
			}
		}
		
		if (Sorted) break;
	}

	return SortedAtkGold;
}

// ---------------------------------- //
/**
 * Sends a big message and a notice.
 *
 * @param _BigMessage The big message to send.
 * @param _Notice The notice to send.
 * @param _MsTime The amount of time to display them.
 * @param _Sound The sound to play with the big message.
 * @param _SoundVariant The sound variant.
 * @param _Wait True to block while the messages are displayed, False otherwise.
 */
Void SendMessages(Text _BigMessage, Text _Notice, Integer _MsTime, CUIConfig::EUISound _Sound, Integer _SoundVariant, Boolean _Wait) {
	Message::SendBigMessage(_BigMessage, _MsTime, 0, _Sound, _SoundVariant);
	Message::SendStatusMessage(_Notice, _MsTime, 1);
	
	if (_Wait) sleep(_MsTime);
}

// ---------------------------------- //
/**
 * Sends a big message.
 *
 * @param _Message The big message to send.
 * @param _MsTime The amount of time to display it.
 * @param _Wait True to block while the big message is displayed, False otherwise.
 */
Void SendBigMessage(Text _Message, Integer _MsTime, Boolean _Wait) {
	Message::SendBigMessage(_Message, _MsTime, 0);
	if (_Wait) sleep(_MsTime);
}

// ---------------------------------- //
/**
 * Sends a big message.
 *
 * @param _Message The big message to send.
 * @param _MsTime The amount of time to display it.
 */
Void SendBigMessage(Text _Message, Integer _MsTime) {
	SendBigMessage(_Message, _MsTime, False);
}

// ---------------------------------- //
/**
 * Sends a big message to someone.
 *
 * @param _Player The concerned player instance.
 * @param _SpecificMessage The message to send to him.
 * @param _MsTime The amount of time to display the message.
 */
Void SendBigMessage(CPlayer _Player, Text _SpecificMessage, Integer _MsTime) {
	Message::SendBigMessage(_Player, _SpecificMessage, _MsTime, 0);
}

// ---------------------------------- //
/**
 * Sends a big message to all players except the given one that will receive a specific message.
 *
 * @param _GlobalMessage The big message to send to all players.
 * @param _SpecificPlayer The player that will receive a different big message.
 * @param _SpecificMessage The big message that the player will receive.
 * @param _MsTime The amount of time to display the big message.
 * @param _Sound The sound to play with the big message.
 * @param _SoundVariant The sound variant.
 * @param _Wait True to block while the big message is displayed, False otherwise.
 */
Void SendBigMessage(Text _GlobalMessage, CPlayer _SpecificPlayer, Text _SpecificMessage, Integer _MsTime, CUIConfig::EUISound _Sound, Integer _SoundVariant, Boolean _Wait) {
	foreach (Player in Players) {
		if (Player == _SpecificPlayer) continue;
		Message::SendBigMessage(Player, _GlobalMessage, _MsTime, 0, _Sound, _SoundVariant);
	}
	
	Message::SendBigMessage(_SpecificPlayer, _SpecificMessage, _MsTime, 0, _Sound, _SoundVariant);
	
	if (_Wait) sleep(_MsTime);
}

// ---------------------------------- //
/**
 * Sends a big message to all players except the given one that will receive a specific message.
 *
 * @param _GlobalMessage The big message to send to all players.
 * @param _SpecificPlayer The player that will receive a different big message.
 * @param _SpecificMessage The big message that the player will receive.
 * @param _MsTime The amount of time to display the big message.
 * @param _Sound The sound to play with the big message.
 * @param _SoundVariant The sound variant.
 */
Void SendBigMessage(Text _GlobalMessage, CPlayer _SpecificPlayer, Text _SpecificMessage, Integer _MsTime, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	SendBigMessage(_GlobalMessage, _SpecificPlayer, _SpecificMessage, _MsTime, _Sound, _SoundVariant, False);
}

// ---------------------------------- //
/**
 * Sends a big message to all players except the given one that will receive a specific message.
 *
 * @param _GlobalMessage The big message to send to all players.
 * @param _SpecificPlayer The player that will receive a different big message.
 * @param _SpecificMessage The big message that the player will receive.
 * @param _MsTime The amount of time to display the big message.
 */
Void SendBigMessage(Text _GlobalMessage, CPlayer _SpecificPlayer, Text _SpecificMessage, Integer _MsTime) {
	SendBigMessage(_GlobalMessage, _SpecificPlayer, _SpecificMessage, _MsTime, CUIConfig::EUISound::Notice, 0, False);
}

// ---------------------------------- //
/**
 * Removes disconnected players.
 *
 * @return True if at least one player has been removed.
 */
Boolean RemoveDisconnectedPlayers() {
	declare Boolean PlayerRemoved;
	foreach (PlayerIdent in Player::GetPlayers()) {
		if (Player::IsConnected(PlayerIdent)) continue;
		Player::RemovePlayer(PlayerIdent);
		PlayerRemoved = True;
	}
	return PlayerRemoved;
}