/** 
 *	UI library
 *
 *	Contains functions to connect all UI sublibraries.
 */

#Include "Libs/Nadeo/Layers2.Script.txt"									as Layers
#Include "Libs/Nadeo/ShootMania/Warlords/World.Script.txt"					as World
#Include "Libs/Nadeo/ShootMania/Warlords/UI/Cursor.Script.txt"				as UICursor
#Include "Libs/Nadeo/ShootMania/Warlords/UI/IntroScreen.Script.txt"		as UIIntroScreen
#Include "Libs/Nadeo/ShootMania/Warlords/UI/Ready.Script.txt"				as UIReady
#Include "Libs/Nadeo/ShootMania/Warlords/UI/Saves.Script.txt"				as UISaves
#Include "Libs/Nadeo/ShootMania/Warlords/UI/World.Script.txt"				as UIWorld
#Include "Libs/Nadeo/ShootMania/Warlords/UI/Info.Script.txt"				as UIInfo
#Include "Libs/Nadeo/ShootMania/Warlords/UI/Gauge.Script.txt"				as UIGauge
#Include "Libs/Nadeo/ShootMania/Warlords/UI/Sync.Script.txt"				as UISync
#Include "Libs/Nadeo/ShootMania/Warlords/UI/Pause.Script.txt"				as UIPause
#Include "Libs/Nadeo/ShootMania/Warlords/UI/CastleTakeChoice.Script.txt"	as UICastleTakeChoice
#Include "Libs/Nadeo/ShootMania/Warlords/UI/ClanChoice.Script.txt"			as UIClanChoice
#Include "Libs/Nadeo/ShootMania/Warlords/UI/BattleShop.Script.txt"			as UIBattleShop
#Include "Libs/Nadeo/ShootMania/Warlords/UI/BattleInGame.Script.txt"		as UIBattleInGame
#Include "Libs/Nadeo/ShootMania/Warlords/UI/BattlePlayerInfo.Script.txt"	as UIBattlePlayerInfo
#Include "Libs/Nadeo/ShootMania/Warlords/UI/BattleSpawnScreen.Script.txt"	as UIBattleSpawnScreen
#Include "Libs/Nadeo/ShootMania/Warlords/UI/BattleMarkers.Script.txt"		as UIBattleMarkers
#Include "Libs/Nadeo/ShootMania/Warlords/UI/AttackRecap.Script.txt"		as UIAttackRecap

#Const	C_ZoomDuration	1000

// ---------------------------------- //
/**
 * Gets the zoom duration in milliseconds.
 *
 * @return The zoom duration.
 */
Integer GetZoomDuration() {
	return C_ZoomDuration;
}

// ---------------------------------- //
// CURSOR UI.
Void Cursor_Show(CPlayer _Player) { UICursor::Show(_Player); }
Void Cursor_Hide(CPlayer _Player) { UICursor::Hide(_Player); }

/**
 * Sets the countdown's end time in milliseconds for a player.
 *
 * @param _Player The concerned player.
 * @param _EndTime The end time to put.
 */
Void Cursor_SetCountdownEndTime(CPlayer _Player, Integer _EndTime) {
	Cursor_Show(_Player);
	declare CUIConfig UI = UIManager.GetUI(_Player);
	UI.CountdownEndTime = _EndTime;
}

/**
 * Sets the countdown's end time in milliseconds for players.
 *
 * @param _Players The concerned players.
 * @param _EndTime The end time to put.
 */
Void Cursor_SetCountdownEndTime(CPlayer[] _Players, Integer _EndTime) {
	foreach (Player in _Players) {
		Cursor_SetCountdownEndTime(Player, _EndTime);
	}
}

/**
 * Resets the countdown's end time for a player.
 *
 * @param _Player The concerned player.
 */
Void Cursor_ResetCountdownEndTime(CPlayer _Player) {
	Cursor_Hide(_Player);
	declare CUIConfig UI = UIManager.GetUI(_Player);
	UI.CountdownEndTime = -1;
}

/**
 * Resets the countdown's end time for players.
 *
 * @param _Players The concerned players.
 */
Void Cursor_ResetCountdownEndTime(CPlayer[] _Players) {
	foreach (Player in _Players) {
		Cursor_ResetCountdownEndTime(Player);
	}
}


// ---------------------------------- //
// INTRO SCREEN UI
Void IntroScreen_Load() { UIIntroScreen::Load(); }
Void IntroScreen_Unload() { UIIntroScreen::Unload(); }
Void IntroScreen_Show() { UIIntroScreen::Show(); }
Void IntroScreen_Hide() { UIIntroScreen::Hide(); }

Void IntroScreen_SetText(Text _Text) { UIIntroScreen::SetText(_Text); }


// ---------------------------------- //
// READY UI
Void Ready_Load() { UIReady::Load(); }
Void Ready_Show() { UIReady::Show(); }
Void Ready_Hide() { UIReady::Hide(); }

Boolean Ready_CanGo(Integer _LowerPlayersCountLimit, Integer _UpperPlayersCountLimit) { return UIReady::CanGo(_LowerPlayersCountLimit, _UpperPlayersCountLimit); }
Integer Ready_GetReadyPlayersCount() { return UIReady::GetReadyPlayersCount(); }
Void Ready_UpdatePlayersReadyState() { UIReady::UpdatePlayersReadyState(); }


// ---------------------------------- //
// INFO UI
Void Info_Unload() { UIInfo::Unload(); }
Void Info_Load(Integer _BlitzGold, Boolean _AntiVassalRevolt) { UIInfo::Load(_BlitzGold, _AntiVassalRevolt); }
Void Info_Show() { UIInfo::Show(); }
Void Info_Hide() { UIInfo::Hide(); }
Void Info_ShowReadyButton() { UIInfo::ShowReadyButton(); }
Void Info_HideReadyButton() { UIInfo::HideReadyButton(); }

Void Info_UpdatePlayersReadyStates(Boolean[Integer] _PlayersActionStates) { UIInfo::UpdatePlayersReadyStates(_PlayersActionStates); }
Void Info_HighlightPlayers(Integer[] _PlayerIds) { UIInfo::HighlightPlayers(_PlayerIds); }
Void Info_StopPlayerHighlight() { UIInfo::StopPlayerHighlight(); }
Void Info_ResetDiscardVassalBtn(CPlayer _Player) { UIInfo::ResetDiscardVassalBtn(_Player); }


// ---------------------------------- //
// GAUGE UI
Void Gauge_Show() { UIGauge::Show(); }
Void Gauge_Hide() { UIGauge::Hide(); }


// ---------------------------------- //
// WORLD UI
Void World_Load(Integer _CastlesCount, Integer _LinksCount, Integer _GoldPerCastlePerYear, Integer _BlitzGold) { UIWorld::Load(_CastlesCount, _LinksCount, _GoldPerCastlePerYear, _BlitzGold); }
Void World_Show() { UIWorld::Show(); }
Void World_Hide() { UIWorld::Hide(); }
Void World_UpdateCastle(Integer _CastleId) { UIWorld::UpdateCastles([_CastleId]); }
Void World_UpdateCastles(Integer[] _CastleIds) { UIWorld::UpdateCastles(_CastleIds); }
Void World_UpdateCastles() { UIWorld::UpdateCastles(World::GetCastleIds()); }
Void World_UpdateLinks() { UIWorld::UpdateLinks(); }

Void World_ToggleStartPointsVisibility(Boolean _Visibility) { UIWorld::ToggleStartPointsVisibility(_Visibility); }
Void World_SetPossibleCastlesForAction(Integer[] _CastleIds, CPlayer _Player) { UIWorld::SetPossibleCastlesForAction(_CastleIds, _Player); }
Void World_AddPossibleCastlesForAction(Integer[] _CastleIds, CPlayer _Player) { UIWorld::AddPossibleCastlesForAction(_CastleIds, _Player); }
Void World_ClearPossibleCastlesForAction(CPlayer _Player) { World_SetPossibleCastlesForAction(Integer[], _Player); }
Void World_HighlightEmpires(Integer[] _OwnerIds) { UIWorld::HighlightEmpires(_OwnerIds); }
Void World_StopEmpiresHighlight() { UIWorld::StopEmpiresHighlight(); }
Void World_StopCastleHighlight() { UIWorld::StopCastleHighlight(); }
Void World_ResetLinksToHighlight() { UIWorld::ResetLinksToHighlight(); }
Void World_HighlightCastle(Integer _CastleId) { UIWorld::HighlightCastle(_CastleId); }
Void World_AddLinksToHighlight(Integer[] _LinkIds, Integer _OwnerId) { UIWorld::AddLinksToHighlight(_LinkIds, _OwnerId); }
Void World_SetLinksToHighlight(Integer[] _LinkIds, Integer _OwnerId) { UIWorld::SetLinksToHighlight(_LinkIds, _OwnerId); }
Void World_ZoomOnHighlightedCastle() { UIWorld::ZoomOnHighlightedCastle(); }
Void World_StopZoomOnHighlightedCastle() { UIWorld::StopZoomOnHighlightedCastle(); }


// ---------------------------------- //
// PAUSE UI
Void Pause_Show() { UIPause::Show(); }
Void Pause_Hide() { UIPause::Hide(); }

Void Pause_ShowButton() { UIPause::ShowButton(); }
Void Pause_HideButton() { UIPause::HideButton(); }


// ---------------------------------- //
// BATTLE SHOP UI
Void BattleShop_Load() { UIBattleShop::Load(); }
Void BattleShop_Show() { UIBattleShop::Show(); }
Void BattleShop_Hide() { UIBattleShop::Hide(); }
Void BattleShop_Unload() { UIBattleShop::Unload(); }
Void BattleShop_SetWeapons(Text[Text] _WeaponsAtk, Text[Text] _WeaponsDef) { 
	UIBattleShop::SetWeapons(_WeaponsAtk, _WeaponsDef);
}
Text BattleShop_GetSelectedWeapon(CUIConfig _UI) {
	return UIBattleShop::GetSelectedWeapon(_UI);
}


// ---------------------------------- //
// BATTLE IN GAME UI
Void BattleInGame_Unload() { UIBattleInGame::Unload(); }
Void BattleInGame_Load(Integer _GatesCount, Integer _RearmorCost, Integer _CountdownTime) { UIBattleInGame::Load(_GatesCount, _RearmorCost, _CountdownTime); }
Void BattleInGame_Show() { UIBattleInGame::Show(); }
Void BattleInGame_Hide() { UIBattleInGame::Hide(); }


// ---------------------------------- //
// BATTLE PLAYER INFO UI
Void BattlePlayerInfo_Show() { UIBattlePlayerInfo::Show(); }
Void BattlePlayerInfo_Hide() { UIBattlePlayerInfo::Hide(); }


// ---------------------------------- //
// CASTLE TAKE CHOICE UI
Void CastleTakeChoice_Show(CPlayer _Player) { UICastleTakeChoice::Show(_Player); }
Void CastleTakeChoice_MarkIsToHide(CPlayer _Player) { UICastleTakeChoice::MarkIsToHide(_Player); }
Void CastleTakeChoice_ExecHide() { UICastleTakeChoice::ExecHide(); }


// ---------------------------------- //
// CLAN CHOICE UI
Void ClanChoice_Show(CPlayer _Player) { UIClanChoice::Show(_Player); }
Void ClanChoice_MarkIsToHide(CPlayer _Player) { UIClanChoice::MarkIsToHide(_Player); }
Void ClanChoice_ExecHide() { UIClanChoice::ExecHide(); }


// ---------------------------------- //
// BATTLE SPAWN SCREEN UI
Void BattleSpawnScreen_Show() { UIBattleSpawnScreen::Show(); }
Void BattleSpawnScreen_Hide() { UIBattleSpawnScreen::Hide(); }


// ---------------------------------- //
// BATTLE MARKERS UI
Void BattleMarkers_Show() { UIBattleMarkers::Show(); }
Void BattleMarkers_Hide() { UIBattleMarkers::Hide(); }


// ---------------------------------- //
// ATTACK RECAP UI
Void AttackRecap_Show() { UIAttackRecap::Show(); }
Void AttackRecap_Hide() { UIAttackRecap::Hide(); }
Void AttackRecap_SetAttackers(Int3[] _Attackers) { UIAttackRecap::SetAttackers(_Attackers); }
Void AttackRecap_SetDefenders(Int3[] _Defenders) { UIAttackRecap::SetDefenders(_Defenders); }
Void AttackRecap_CleanBothSides() { UIAttackRecap::CleanBothSides(); }


// ---------------------------------- //
// SAVES UI
Void Saves_Load() { UISaves::Load(); }
Void Saves_Show() { UISaves::Show(); }
Void Saves_Hide() { UISaves::Hide(); }



Void Sync() {
	
	UISync::Sync();

}



Void Unload() {
	UICursor::Unload();
	UIReady::Unload();
	UIGauge::Unload();
	UISync::Unload();
	UIPause::Unload();
	UICastleTakeChoice::Unload();
	UIClanChoice::Unload();
	UIBattlePlayerInfo::Unload();
	UIBattleSpawnScreen::Unload();
	UIBattleMarkers::Unload();
	UIAttackRecap::Unload();
}

Void Load(Integer _BlitzGold) {
	Unload();
	UICursor::Load();
	UIReady::Load();
	UIGauge::Load(_BlitzGold);
	UISync::Load();
	UIPause::Load();
	UICastleTakeChoice::Load();
	UIClanChoice::Load();
	UIBattlePlayerInfo::Load();
	UIBattleSpawnScreen::Load();
	UIBattleMarkers::Load();
	UIAttackRecap::Load();
	
	UIManager.UIAll.OverlayHideCountdown = True;
}