/**
 *	Manage events
 */
#Const Version    "2016-11-16"
#Const ScriptName "Libs/Nadeo/Manialink/Modules/Events.Script.txt"

// ---------------------------------- //
// Libraries
// ---------------------------------- //
#Include "TextLib" as TL
#Include "Libs/Nadeo/Log.Script.txt" as Log
#Include "Libs/Nadeo/Manialink/ManiaView.Script.txt" as MV

// ---------------------------------- //
// Constants
// ---------------------------------- //
// Supported attributes
#Const C_Attributes [
	"data-mv-on:MouseClick",
	"data-mv-on:MouseOver",
	"data-mv-on:MouseOut",
	"data-mv-on:EntrySubmit"
]
#Const C_Class "mv-events"
#Const C_LogPrefix "[ManiaView][Events]"

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/** Return the version number of the script
 *
 *  @return   The version number of the script
 */
Text GetScriptVersion() {
  return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *  @return   The name of the script
 */
Text GetScriptName() {
  return ScriptName;
}

// ---------------------------------- //
// Get the class constant
Text Class() { return C_Class; }

// ---------------------------------- //
/** Run the module
 *
 *	@param	_Name											The name of the manialink
 *	@param	_Manialink								The manialink to process
 *
 *	@return														The processed manialink
 */
Text[][Integer] Run(Text _Name, Text[][Integer] _Manialink) {
	// Parse manialink and extract ManiaView attributes info
	declare Text[] EventsSrc;
	declare Text[] FunctionsSrc;
	if (_Manialink.existskey(MV::Slot_Manialink())) {
		declare Wrap = "<root>"^MV::CompileSlot(_Manialink[MV::Slot_Manialink()])^"</root>";
		declare XmlDoc = Xml.Create(Wrap, False, True, False);
		
		foreach (Node in XmlDoc.Nodes) {
			declare Attributes = MV::ExtractAttributes(Node, C_Class, C_Attributes);
			foreach (Attribute => Value in Attributes) {
				declare Splitted = TL::Split(":", Attribute);
				// Check mv-on attribute
				if (Splitted[0] == "data-mv-on" && Splitted.existskey(1)) {
					if (!EventsSrc.exists(Splitted[1])) EventsSrc.add(Splitted[1]);
					if (!FunctionsSrc.exists(Value)) FunctionsSrc.add(Value);
					
					// Check if the node has the scriptevents attribute
					declare ScriptEvents = MV::ExtractAttributes(Node, "", ["scriptevents"]);
					if (ScriptEvents.count <= 0) {
						Log::Log("""{{{C_LogPrefix}}}[{{{_Name}}}] Missing "scriptevents" attribute on "{{{TL::Trim(Node.TextRawContents)}}}".""");
					}
				}
			}
		}
		
		Xml.Destroy(XmlDoc);
	}
	
	// Build the MV_Events_Call() function
	declare CallEvent = "";
	if (FunctionsSrc.count > 0) {
		declare CallEventSwitch = "";
		foreach (Function in FunctionsSrc) {
			CallEventSwitch ^= """
		case "{{{Function}}}": {{{Function}}}(_Event);""";
		}
		
		CallEvent = """
Void MV_Events_Call(Text _FunctionName, CMlEvent _Event) {
	if (_Event == Null) return;
	
	switch (_FunctionName) {
		{{{TL::Trim(CallEventSwitch)}}}
	}
}		
		""";
	}
	
	// Build the PendinEvents loop
	declare CheckEvents = "";
	if (EventsSrc.count > 0) {
		declare CheckEventsSwitch = "";
		foreach (Event in EventsSrc) {
			CheckEventsSwitch ^= """
				case CMlScriptEvent::Type::{{{Event}}}: {
					if (Event.Control.DataAttributeExists("mv-on:{{{Event}}}")) {
						declare FunctionName = Event.Control.DataAttributeGet("mv-on:{{{Event}}}");
						MV_Events_Call(FunctionName, Event);
					}
				}""";
		}
		
		CheckEvents = """
		foreach (Event in PendingEvents) {
			if (Event.Control == Null || !Event.Control.HasClass("{{{C_Class}}}")) continue;
			switch (Event.Type) {
				{{{TL::Trim(CheckEventsSwitch)}}}
			}
		}	
""";
	}
	
	declare Function_Yield = """
Void MV_Events_Yield() {
	{{{TL::Trim(CheckEvents)}}}
}	
""";
	
	declare Functions = """
// ---------------------------------- //
// Code generated by the Events module
// of the ManiaView library
{{{TL::Trim(CallEvent)}}}

{{{TL::Trim(Function_Yield)}}}
// ---------------------------------- //
""";
	
	declare MainLoop = """
		// ---------------------------------- //
		// Code generated by the Events module
		// of the ManiaView library
		MV_Events_Yield();
		// ---------------------------------- //
""";
	
	return MV::Append(
_Manialink, 
"", //< Manialink
"", //< Includes
"", //< Constants
"", //< Globales
Functions, //< Functions
"", //< Main start
MainLoop, //< Main loop
"" //< Main end
	);
}