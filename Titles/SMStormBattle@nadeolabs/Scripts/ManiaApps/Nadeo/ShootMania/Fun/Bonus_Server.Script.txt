/**
 *	Display bonus UI
 */
#Const Version		"2017-03-13"
#Const ScriptName	"ManiaApps/Nadeo/ShootMania/Fun/Bonus_Server.Script.txt"

// ---------------------------------- //
// Libraries
// ---------------------------------- //
#Include "Libs/Nadeo/Log.Script.txt" as Log

// ---------------------------------- //
// Constants
// ---------------------------------- //
// Default position of the UI elements
#Const C_DefaultPositions [
	0 => <0., -38.>,
	1 => <-15., -53.>,
	2 => <0., 77.>
]
/// UI elements
#Const C_UI_Roulette 0
#Const C_UI_Timer 1
#Const C_UI_Teams 2

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/** Return the version number of the script
 *
 *  @return   The version number of the script
 */
Text GetScriptVersion() {
  return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *  @return   The name of the script
 */
Text GetScriptName() {
  return ScriptName;
}

// ---------------------------------- //
/** Hide or display the bonus UI
 *
 *	@param	_Visible									True to show, False to hide
 */
Void SetVisibility(Boolean _Visible) {
	declare netwrite Net_LibFunBonus_Visibility for Teams[0] = False;
	Net_LibFunBonus_Visibility = _Visible;
}

// ---------------------------------- //
/** Set the position of the bonus UI
 *	for the given player
 *
 *	@param	_Player										The player to update
 *	@param	_Element									The element of the UI to move
 *	@param	_Position									The new position
 */
Void SetPosition(CSmPlayer _Player, Integer _Element, Vec2 _Position) {
	if (_Player == Null) return;
	declare UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;
	
	declare netwrite Net_LibFunBonus_Positions for UI = C_DefaultPositions;
	declare netwrite Net_LibFunBonus_PositionsUpdate for UI = -1;
	Net_LibFunBonus_Positions[_Element] = _Position;
	Net_LibFunBonus_PositionsUpdate = Now;
}

// ---------------------------------- //
/** Hide or display the team bonus UI
 *
 *	@param	_Visible									True to show, False to hide
 */
Void SetTeamBonusVisibility(Boolean _Visible) {
	declare netwrite Net_LibFunBonus_TeamBonusVisibility for Teams[0] = False;
	Net_LibFunBonus_TeamBonusVisibility = _Visible;
}

// ---------------------------------- //
/** Play a sound when the player cant
 *	pick up the bonus he's standing on
 *
 *	@param	_Player										The player who will hear the sound
 */
Void PlayCantTakeSound(CSmPlayer _Player) {
	if (_Player == Null) return;
	declare UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;
	
	declare netwrite Net_LibFunBonus_PlayCantTakeSound for UI = 0;
	Net_LibFunBonus_PlayCantTakeSound = Now;
}

// ---------------------------------- //
/** Set the active bonus for each team
 *
 *	@param	_BonusTeam1								The bonus of the first team
 *	@param	_BonusTeam2								The bonus of the second team
 */
Void SetTeamBonuses(Text _BonusTeam1, Text _BonusTeam2) {
  declare netwrite Net_LibFunBonus_BonusTeam1 for Teams[0] = "";
  declare netwrite Net_LibFunBonus_BonusTeam2 for Teams[0] = "";
	Net_LibFunBonus_BonusTeam1 = _BonusTeam1;
	Net_LibFunBonus_BonusTeam2 = _BonusTeam2;
}

// ---------------------------------- //
/** Set the list of available bonuses
 *	and the path to their icons
 *
 *	@param	_Bonuses									The bonuses that can be displayed in the UI
 *																		["BonusName" => "file://Path/To/Bonus/Icon.dds"]
 */
Void SetBonuses(Text[Text] _Bonuses) {
	declare netwrite Net_LibFunBonus_Bonuses for Teams[0] = Text[Text];
	Net_LibFunBonus_Bonuses = _Bonuses;
}

// ---------------------------------- //
/** Set the messages to display when
 *	activating a bonus
 *
 *	@param	_Messages									The bonuses and their messages
 *																		["BonusName" => "Description of the bonus"]
 */
Void SetMessages(Text[Text] _Messages) {
	declare netwrite Net_LibFunBonus_Messages for Teams[0] = Text[Text];
	Net_LibFunBonus_Messages = _Messages;
}

// ---------------------------------- //
/** Play the random bonus pick up animation
 *
 *	@param	_Player										The player who picked up the bonus
 *	@param	_Bonus										The picked up bonus
 *	@param	_ActivationTime						The server activation time of the bonus
 *	@param	_PickerName								The name of the player who picked up the bonus
 */
Void PickRandomBonus(CSmPlayer _Player, Text _Bonus, Integer _ActivationTime, Text _PickerName) {
	if (_Player == Null) return;
	
	declare netwrite Net_LibFunBonus_Bonus for _Player = "";
	declare netwrite Net_LibFunBonus_BonusActivationTime for _Player = -1;
	declare netwrite Net_LibFunBonus_PickerName for _Player = "";
	declare netwrite Net_LibFunBonus_BonusUpdate for _Player = -1;
	Net_LibFunBonus_Bonus = _Bonus;
	Net_LibFunBonus_PickerName = _PickerName;
	Net_LibFunBonus_BonusActivationTime = _ActivationTime;
	Net_LibFunBonus_BonusUpdate = Now;
}

// ---------------------------------- //
/** Start the timer of a timed bonus
 *
 *	@param	_Player										The player receiving the timed bonus
 *	@param	_Bonus										The timed bonus
 *	@param	_EndTime									The server end time of the bonus
 */
Void ActivateTimedBonus(CSmPlayer _Player, Text _Bonus, Integer _EndTime) {
	if (_Player == Null) return;
	
	declare netwrite Net_LibFunBonus_TimedBonus for _Player = "";
	declare netwrite Net_LibFunBonus_TimedBonusEndTime for _Player = -1;
	declare netwrite Net_LibFunBonus_TimedBonusUpdate for _Player = -1;
	Net_LibFunBonus_TimedBonus = _Bonus;
	Net_LibFunBonus_TimedBonusEndTime = _EndTime;
	Net_LibFunBonus_TimedBonusUpdate = Now;
}

// ---------------------------------- //
/** Cancel the timer of a timed bonus
 *
 *	@param	_Player										The player to update
 */
Void CancelTimedBonus(CSmPlayer _Player) {
	if (_Player == Null) return;
	
	declare netwrite Net_LibFunBonus_TimedBonus for _Player = "";
	declare netwrite Net_LibFunBonus_TimedBonusEndTime for _Player = -1;
	declare netwrite Net_LibFunBonus_TimedBonusUpdate for _Player = -1;
	Net_LibFunBonus_TimedBonus = "";
	Net_LibFunBonus_TimedBonusEndTime = -1;
	Net_LibFunBonus_TimedBonusUpdate = Now;
}

// ---------------------------------- //
/// Reset the animations in the UI
Void ResetAnimations() {
	declare netwrite Net_LibFunBonus_ResetAnimation for Teams[0] = -1;
	Net_LibFunBonus_ResetAnimation = Now;
}

// ---------------------------------- //
/// Unload the library
Void Unload() {
	foreach (Player in AllPlayers) {
		declare UI <=> UIManager.GetUI(Player);
		if (UI != Null) {
			declare netwrite Net_LibFunBonus_Positions for UI = C_DefaultPositions;
			declare netwrite Net_LibFunBonus_PositionsUpdate for UI = -1;
			declare netwrite Net_LibFunBonus_PlayCantTakeSound for UI = 0;
			Net_LibFunBonus_Positions = C_DefaultPositions;
			Net_LibFunBonus_PositionsUpdate = -1;
			Net_LibFunBonus_PlayCantTakeSound = 0;
		}
		
		declare netwrite Net_LibFunBonus_Bonus for Player = "";
		declare netwrite Net_LibFunBonus_BonusActivationTime for Player = -1;
		declare netwrite Net_LibFunBonus_PickerName for Player = "";
		declare netwrite Net_LibFunBonus_BonusUpdate for Player = -1;
		Net_LibFunBonus_Bonus = "";
		Net_LibFunBonus_PickerName = "";
		Net_LibFunBonus_BonusActivationTime = -1;
		Net_LibFunBonus_BonusUpdate = -1;
		
		declare netwrite Net_LibFunBonus_TimedBonus for Player = "";
		declare netwrite Net_LibFunBonus_TimedBonusEndTime for Player = -1;
		declare netwrite Net_LibFunBonus_TimedBonusUpdate for Player = -1;
		Net_LibFunBonus_TimedBonus = "";
		Net_LibFunBonus_TimedBonusEndTime = -1;
		Net_LibFunBonus_TimedBonusUpdate = -1;
	}
	
	declare netwrite Net_LibFunBonus_Visibility for Teams[0] = False;
	declare netwrite Net_LibFunBonus_TeamBonusVisibility for Teams[0] = False;
	Net_LibFunBonus_Visibility = False;
	Net_LibFunBonus_TeamBonusVisibility = False;
	
	declare netwrite Net_LibFunBonus_Bonuses for Teams[0] = Text[Text];
	declare netwrite Net_LibFunBonus_Messages for Teams[0] = Text[Text];
	Net_LibFunBonus_Bonuses = Text[Text];
	Net_LibFunBonus_Messages = Text[Text];
	
	declare netwrite Net_LibFunBonus_ResetAnimation for Teams[0] = -1;
	Net_LibFunBonus_ResetAnimation = -1;
	
	declare netwrite Net_LibFunBonus_BonusTeam1 for Teams[0] = "";
  declare netwrite Net_LibFunBonus_BonusTeam2 for Teams[0] = "";
	Net_LibFunBonus_BonusTeam1 = "";
	Net_LibFunBonus_BonusTeam2 = "";
}

// ---------------------------------- //
/// Load the library
Void Load() {
	Unload();
}