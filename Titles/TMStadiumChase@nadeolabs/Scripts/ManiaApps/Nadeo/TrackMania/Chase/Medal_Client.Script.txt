/**
 * Chase medal UI
 */
#Const Version    "2018-06-25"
#Const ScriptName "ManiaApps/Nadeo/TrackMania/Chase/Medal_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "ManiaApps/Nadeo/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/TrackMania/Chase/Constants2.Script.txt" as Const

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Layer_Medal "ChaseAttack_Medal"
#Const C_Layer_ScoresTableVisibility "ChaseAttack_ScoresTableVisibility"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Private
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the manialink of the medal UI
 *
 *  @return                           Medal UI manialink
 */
Text Private_GetMedalML() {
	declare Img_Medal = "file://Media/Manialinks/Nadeo/TrackMania/Chase/Medal.dds";
	declare Img_FootLine = "file://Media/Manialinks/Nadeo/TrackMania/Ingame/FootLine_RoundRanking.dds";
	//L16N [Chase Attack] Title of a window that display the medals that the player won on the current map
	declare Text_Medals = TL::ToUpperCase(_("Medals"));
	//L16N [Chase Attack] Legend displayed next to the race time the player just did
	declare Text_YourTime = _("Your time");
	//L16N [Chase Attack] Legend displayed next to the best race time of the player
	declare Text_BestTime = _("Best time");
	//L16N [Chase Attack] Legend displayed next to the time of the next medal to unlock. If player won the silver medal, then the gold medal time will be displayed.
	declare Text_NextMedal = _("Next medal");
	declare Text_Gold = _("Gold");
	declare Text_Silver = _("Silver");
	declare Text_Bronze = _("Bronze");
	declare Color_Gold = TL::ColorToText(Const::C_MedalColor_Gold);
	declare Color_Silver = TL::ColorToText(Const::C_MedalColor_Silver);
	declare Color_Bronze = TL::ColorToText(Const::C_MedalColor_Bronze);
	declare Sound_Path = "file://Media/Manialinks/Nadeo/Trackmania/Ingame/Sound/";
	declare Sound_CheckpointNeutral = Sound_Path^"RaceCheckPoint_Experimental.wav";
	declare Sound_CheckpointWorse = Sound_Path^"RaceCheckPointLate_Experimental.wav";
	declare Sound_CheckpointBetter = Sound_Path^"RaceCheckPointAhead_Experimental.wav";

	declare TableSize = <165., 23.5>;
	declare MedalSize = 12.;
	declare TitleSize = (MedalSize * 3.) + 2.;

	declare MedalsML = "";
	for (I, 0, 2) {
		declare PosX = I * (MedalSize + 1);
		MedalsML ^= """<frameinstance pos="{{{PosX}}} 0" modelid="framemodel-medal"/>""";
	}

	return """
<manialink version="3" name="{{{C_Layer_Medal}}}">
<stylesheet>
  <style class="text-default" textfont="OswaldMono" textcolor="ffffff" textsize="3" textemboss="1" />
</stylesheet>
<framemodel id="framemodel-medal">
	<quad z-index="0" size="{{{MedalSize}}} {{{MedalSize*1.6}}}" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1" />
	<quad z-index="1" size="{{{MedalSize}}} {{{MedalSize*1.6}}}" bgcolor="111" opacity="0.7" />
	<quad pos="{{{MedalSize*0.5}}} -1" z-index="2" size="{{{MedalSize}}} {{{MedalSize}}}" halign="center" image="{{{Img_Medal}}}" keepratio="fit" id="quad-medal" />
	<label pos="{{{MedalSize*0.5}}} {{{-MedalSize*1.35}}}" z-index="3" size="{{{MedalSize-1}}} 6" halign="center" valign="center2" class="text-default" id="label-medal-total" />
	<label pos="{{{MedalSize*0.85}}} {{{-MedalSize*1.05}}}" z-index="4" size="3 6" halign="center" valign="center2" textcolor="{{{Const::C_TextColor_Yellow}}}" textsize="2" class="text-default" id="label-medal-add" />
</framemodel>
<frame z-index="1" id="frame-global">
	<frame z-index="0" pos="0 0" id="frame-travelling-medals">
		<quad pos="-3 0" z-index="0" size="17 17" halign="center" keepratio="fit" colorize="{{{TL::ColorToText(Const::C_MedalColor_Bronze)}}}" image="{{{Img_Medal}}}" hidden="1"/>
		<quad pos="0 0" z-index="1" size="17 17" halign="center" keepratio="fit" colorize="{{{TL::ColorToText(Const::C_MedalColor_Silver)}}}" image="{{{Img_Medal}}}" hidden="1"/>
		<quad pos="3 0" z-index="2" size="17 17" halign="center" keepratio="fit" colorize="{{{TL::ColorToText(Const::C_MedalColor_Gold)}}}" image="{{{Img_Medal}}}" hidden="1"/>
	</frame>
	<frame pos="{{{TableSize.X*-0.5-0.1}}} 65" id="frame-race-medal">
		<frame size="{{{TableSize.X}}} {{{TableSize.Y}}}">
			<frame pos="0 -{{{TableSize.Y+5}}}" id="frame-slide">
				<frame z-index="0">
			  	<quad z-index="0" size="{{{TableSize.X}}} {{{TableSize.Y}}}" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1" />
					<quad z-index="1" size="{{{TableSize.X}}} {{{TableSize.Y}}}" bgcolor="111" opacity="0.7" />
				</frame>
				<frame z-index="1">
					<frame z-index="0" pos="18 -1" id="frame-race-medals">
						<quad z-index="0" size="17 17" halign="center" keepratio="fit" colorize="{{{TL::ColorToText(Const::C_MedalColor_Bronze)}}}" image="{{{Img_Medal}}}" hidden="1"/>
						<quad z-index="1" size="17 17" halign="center" keepratio="fit" colorize="{{{TL::ColorToText(Const::C_MedalColor_Silver)}}}" image="{{{Img_Medal}}}" hidden="1"/>
						<quad z-index="2" size="17 17" halign="center" keepratio="fit" colorize="{{{TL::ColorToText(Const::C_MedalColor_Gold)}}}" image="{{{Img_Medal}}}" hidden="1"/>
					</frame>
					<label z-index="1" pos="18 -20.3" size="20 6" halign="center" valign="center2" class="text-default" id="label-medal-name" />
					<quad pos="36 -1" size="0.5 {{{TableSize.Y-2}}}" bgcolor="ffffff" />
					<frame pos="40 0" id="frame-times">
						<frame pos="0 -{{{TableSize.Y*0.25}}}">
							<label size="25 6" valign="center2" class="text-default" text="{{{Text_YourTime}}}" />
							<label pos="50 0" size="24 6" halign="right" valign="center2" class="text-default" id="label-race-time" />
						</frame>
						<frame pos="0 -{{{TableSize.Y*0.5}}}">
							<label size="24 6" valign="center2" class="text-default" text="{{{Text_BestTime}}}" />
							<label pos="50 0" size="24 6" halign="right" valign="center2" class="text-default" id="label-time-diff" />
						</frame>
						<frame pos="0 -{{{TableSize.Y*0.75}}}">
							<label size="24 6" valign="center2" class="text-default" text="{{{Text_NextMedal}}}" />
							<label pos="50 0" size="24 6" halign="right" valign="center2" class="text-default" id="label-next-medal" />
						</frame>
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
	<frame pos="-158 50" id="frame-medal-counter">
		<frame pos="{{{-TitleSize-5}}} 0" id="frame-slide">
			<frame z-index="0">
		    <quad pos="0 -3" z-index="0" size="{{{TitleSize}}} 1" valign="center" opacity="0.3" image="{{{Img_FootLine}}}" />
		    <label z-index="1" size="{{{TitleSize*0.7}}} 5" valign="center2" text="{{{Text_Medals}}}" class="text-default" />
		    <label pos="{{{TitleSize*0.95}}} 0" z-index="3" size="{{{TitleSize*0.25}}} 6" halign="right" valign="center2" class="text-default" id="label-medals-total" />
				<label pos="{{{TitleSize*0.95}}} 3" z-index="4" size="5 5" valign="center2" textcolor="{{{Const::C_TextColor_Yellow}}}" textsize="2" class="text-default" id="label-medals-add" />
		  </frame>
		  <frame pos="0 -4" z-index="1" id="frame-medals">
		  	{{{MedalsML}}}
			</frame>
		</frame>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "MathLib" as ML
#Const Medals [{{{Const::C_Medal_Bronze}}}, {{{Const::C_Medal_Silver}}}, {{{Const::C_Medal_Gold}}}]

declare CMlQuad[] G_TravellingMedals;
declare Integer G_TimeWaitTrav;
declare Integer G_TimeTravAnim;
declare Boolean G_TravAllow;
declare Integer G_TimeIncrementMedal;
declare Integer TempMedalsCount;

Void Init(){
	declare Frame_TravellingMedals <=> (Page.GetFirstChild("frame-travelling-medals") as CMlFrame);
	G_TimeWaitTrav = 7000;
	G_TimeIncrementMedal = 250;
	TempMedalsCount = 0;
	foreach (Key => Control in Frame_TravellingMedals.Controls){
		declare Quad_Trav <=> (Control as CMlQuad);
		G_TravellingMedals.add(Quad_Trav);
	}
}

Void HideTravMedals(){
	foreach (Key => Control in G_TravellingMedals){
		Control.Visible = False;
	}
}

CTmMlPlayer GetOwner() {
  if (GUIPlayer != Null) return GUIPlayer;
  return InputPlayer;
}

Void MakeMedalTravel(){
	declare Owner <=> GetOwner();
	if (Owner != Null) {

		declare netread Net_ChaseMedal_RaceMedal for Owner = {{{Const::C_Medal_Gold}}};

		declare Frame_RaceMedals <=> (Page.GetFirstChild("frame-race-medals") as CMlFrame);
			
		foreach (Key => Control in Frame_RaceMedals.Controls) {
			declare Quad_Medal <=> (Control as CMlQuad);
			if(Net_ChaseMedal_RaceMedal != {{{Const::C_Medal_None}}} && Medals.keyof(Net_ChaseMedal_RaceMedal) >= Key){
				Quad_Medal.Visible = False;
				G_TravellingMedals[Key].Visible = False;
			}
		}
		if(Net_ChaseMedal_RaceMedal != {{{Const::C_Medal_None}}}){
			declare Integer[Integer] MedalToKey = [{{{Const::C_Medal_Gold}}} => 2, {{{Const::C_Medal_Silver}}} => 1, {{{Const::C_Medal_Bronze}}} => 0];
			declare Integer Key = MedalToKey[Net_ChaseMedal_RaceMedal];
			G_TravellingMedals[Key].RelativePosition_V3 = Frame_RaceMedals.Controls[0].AbsolutePosition_V3;
			G_TravellingMedals[Key].Visible = True;
			G_TravellingMedals[Key].Size = <17., 17.>;
			G_TravellingMedals[Key].Opacity = 1.;
			if(Key == 0){
				AnimMgr.Add(G_TravellingMedals[Key], "<frame pos=\"-152 45\" hidden=\"1\" size=\"12 12\" />", G_TimeIncrementMedal, CAnimManager::EAnimManagerEasing::QuadOut);
			}
			else if(Key == 1){
				AnimMgr.Add(G_TravellingMedals[Key], "<frame pos=\"-139 45\" hidden=\"1\" size=\"12 12\"/>", G_TimeIncrementMedal, CAnimManager::EAnimManagerEasing::QuadOut);	
			}
			else if(Key == 2){
				AnimMgr.Add(G_TravellingMedals[Key], "<frame pos=\"-126 45\" hidden=\"1\" size=\"12 12\"/>", G_TimeIncrementMedal, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	}
}


Void ShowCounter(CMlFrame Frame_Medal){
		declare Label_MedalTotal <=> (Frame_Medal.GetFirstChild("label-medal-total") as CMlLabel);
		declare Label_MedalAdd <=> (Frame_Medal.GetFirstChild("label-medal-add") as CMlLabel);
		if(TempMedalsCount >= 0){
			Label_MedalTotal.Value = TempMedalsCount ^ "";
		}
		Label_MedalAdd.Visible = True;
}

Void HideCounter(CMlFrame[Integer] Frames_Medal){
	foreach (Medal => Frame_Medal in Frames_Medal) {
		declare Label_MedalTotal <=> (Frame_Medal.GetFirstChild("label-medal-total") as CMlLabel);
		declare Label_MedalAdd <=> (Frame_Medal.GetFirstChild("label-medal-add") as CMlLabel);
			Label_MedalAdd.Visible = False;
	}
}

main() {

	Init();

	declare Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
	declare Frame_RaceMedal <=> (Frame_Global.GetFirstChild("frame-race-medal") as CMlFrame);
	declare Frame_RaceMedalSlide <=> (Frame_RaceMedal.GetFirstChild("frame-slide") as CMlFrame);
	declare Frame_RaceMedals <=> (Frame_RaceMedal.GetFirstChild("frame-race-medals") as CMlFrame);
	declare Label_MedalName <=> (Frame_RaceMedal.GetFirstChild("label-medal-name") as CMlLabel);
	declare Frame_Times <=> (Frame_RaceMedal.GetFirstChild("frame-times") as CMlFrame);
	declare Frame_RaceTime <=> (Frame_Times.Controls[0] as CMlFrame);
	declare Label_RaceTime <=> (Frame_RaceTime.GetFirstChild("label-race-time") as CMlLabel);
	declare Frame_TimeDiff <=> (Frame_Times.Controls[1] as CMlFrame);
	declare Label_TimeDiff <=> (Frame_TimeDiff.GetFirstChild("label-time-diff") as CMlLabel);
	declare Frame_NextMedal <=> (Frame_Times.Controls[2] as CMlFrame);
	declare Label_NextMedal <=> (Frame_NextMedal.GetFirstChild("label-next-medal") as CMlLabel);
	declare Frame_MedalCounter <=> (Frame_Global.GetFirstChild("frame-medal-counter") as CMlFrame);
	declare Frame_MedalCounterSlide <=> (Frame_MedalCounter.GetFirstChild("frame-slide") as CMlFrame);
	declare Label_MedalsTotal <=> (Frame_MedalCounter.GetFirstChild("label-medals-total") as CMlLabel);
	declare Label_MedalsAdd <=> (Frame_MedalCounter.GetFirstChild("label-medals-add") as CMlLabel);
	declare Frame_Medals <=> (Frame_MedalCounter.GetFirstChild("frame-medals") as CMlFrame);

	declare Frames_Medal = CMlFrame[Integer];
	foreach (Key => Control in Frame_Medals.Controls) {
		if (Medals.existskey(Key)) {
			declare Medal = Medals[Key];
			declare Frame_Medal <=> (Control as CMlFrame);
			Frames_Medal[Medal] = Frame_Medal;
			declare Quad_Medal <=> (Frame_Medal.GetFirstChild("quad-medal") as CMlQuad);
			switch (Medal) {
				case {{{Const::C_Medal_Bronze}}}: Quad_Medal.Colorize = {{{Const::C_MedalColor_Bronze}}};
				case {{{Const::C_Medal_Silver}}}: Quad_Medal.Colorize = {{{Const::C_MedalColor_Silver}}};
				case {{{Const::C_Medal_Gold}}}: Quad_Medal.Colorize = {{{Const::C_MedalColor_Gold}}};
			}
		}
	}

	declare SoundCheckpointNeutral = Audio.CreateSound("{{{Sound_CheckpointNeutral}}}", 0.0, False, False, False);
  declare SoundCheckpointWorse = Audio.CreateSound("{{{Sound_CheckpointWorse}}}", 0.0, False, False, False);
  declare SoundCheckpointBetter = Audio.CreateSound("{{{Sound_CheckpointBetter}}}", 0.0, False, False, False);

  declare netread Net_ChaseMedal_UnlockLesserMedal for Teams[0] = False;

  declare ChaseAttack_ScoresTableIsVisible for This = False;

	declare PrevRaceMedalHideTime = -123;
	declare PrevMedalCounterHideTime = -123;
	declare DisplayRaceMedal = False;
	declare DisplayMedalCounter = False;

	while (True) {
		yield;

		declare Owner <=> GetOwner();
		if (Owner != Null) {
			declare netread Net_ChaseMedal_RaceMedal for Owner = {{{Const::C_Medal_Gold}}};
			if (!Frame_Global.Visible) {
				Frame_Global.Visible = True;
			}

			declare netread Net_ChaseMedal_RaceMedalHideTime for Owner = -1;
			if (PrevRaceMedalHideTime != Net_ChaseMedal_RaceMedalHideTime) {
				PrevRaceMedalHideTime = Net_ChaseMedal_RaceMedalHideTime;

				if (PrevRaceMedalHideTime > GameTime) {
					DisplayRaceMedal = True;
					HideTravMedals();
					AnimMgr.Add(Frame_RaceMedalSlide, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
					G_TimeTravAnim = Now + 250 + G_TimeWaitTrav;
					G_TravAllow = True;
					
					foreach (Key => Control in Frame_RaceMedals.Controls) {
						declare Quad_Medal <=> (Control as CMlQuad);
						Quad_Medal.Visible = (
							Net_ChaseMedal_RaceMedal != {{{Const::C_Medal_None}}} &&
							(
								(!Net_ChaseMedal_UnlockLesserMedal && Medals.keyof(Net_ChaseMedal_RaceMedal) == Key) ||
								(Net_ChaseMedal_UnlockLesserMedal && Medals.keyof(Net_ChaseMedal_RaceMedal) >= Key)
							)
						);
						// Align medals
						if (Net_ChaseMedal_UnlockLesserMedal) {
							Quad_Medal.RelativePosition_V3.X = -3. + (Key * 3.);
						} else {
							Quad_Medal.RelativePosition_V3.X = 0.;
						}
					}
					declare NextMedalTime = -1;
					switch (Net_ChaseMedal_RaceMedal) {
						case {{{Const::C_Medal_Bronze}}}: {
							Label_MedalName.Value = "{{{Text_Bronze}}}";
							Label_MedalName.TextColor = {{{Const::C_MedalColor_Bronze}}};
							if (Map != Null) NextMedalTime = Map.TMObjective_SilverTime;
						}
						case {{{Const::C_Medal_Silver}}}: {
							Label_MedalName.Value = "{{{Text_Silver}}}";
							Label_MedalName.TextColor = {{{Const::C_MedalColor_Silver}}};
							if (Map != Null) NextMedalTime = Map.TMObjective_GoldTime;
						}
						case {{{Const::C_Medal_Gold}}}: {
							Label_MedalName.Value = "{{{Text_Gold}}}";
							Label_MedalName.TextColor = {{{Const::C_MedalColor_Gold}}};
						}
						default: {
							Label_MedalName.Value = "";
							if (Map != Null) NextMedalTime = Map.TMObjective_BronzeTime;
						}
					}

					declare netread Net_ChaseMedal_RaceTime for Owner = -1;
					if (Net_ChaseMedal_RaceTime >= 0) {
						Label_RaceTime.Value = TL::TimeToText(Net_ChaseMedal_RaceTime, True)^(Net_ChaseMedal_RaceTime%10);
						Frame_RaceTime.Visible = True;

						declare netread Net_ChaseMedal_RaceTimeDiff for Owner = -1;
						declare TimeDiff = ML::Abs(Net_ChaseMedal_RaceTimeDiff);
						SoundCheckpointNeutral.Stop();
						SoundCheckpointWorse.Stop();
						SoundCheckpointBetter.Stop();
						if (Net_ChaseMedal_RaceTimeDiff == 0) {
							Frame_TimeDiff.Visible = False;
							SoundCheckpointNeutral.Play();
						} else {
							if (Net_ChaseMedal_RaceTimeDiff > 0) {
								Label_TimeDiff.Value = "+"^TL::TimeToText(TimeDiff, True)^(TimeDiff%10);
								Label_TimeDiff.TextColor = {{{Const::C_TimeColor_Worse}}};
								SoundCheckpointWorse.Play();
							} else {
								Label_TimeDiff.Value = "-"^TL::TimeToText(TimeDiff, True)^(TimeDiff%10);
								Label_TimeDiff.TextColor = {{{Const::C_TimeColor_Better}}};
								SoundCheckpointBetter.Play();
							}
							Frame_TimeDiff.Visible = True;
						}

						if (NextMedalTime >= 0) {
							Label_NextMedal.Value = TL::TimeToText(NextMedalTime, True)^(NextMedalTime%10);
							Frame_NextMedal.Visible = True;
						} else {
							Frame_NextMedal.Visible = False;
						}
					} else {
						Frame_RaceTime.Visible = False;
						Frame_TimeDiff.Visible = False;
						Frame_NextMedal.Visible = False;
					}
				}
			}

			declare netread Net_ChaseMedal_MedalCounterHideTime for Owner = -1;
			if (PrevMedalCounterHideTime != Net_ChaseMedal_MedalCounterHideTime) {
				PrevMedalCounterHideTime = Net_ChaseMedal_MedalCounterHideTime;

				if (PrevMedalCounterHideTime > GameTime) {
					DisplayMedalCounter = True;
					AnimMgr.Add(Frame_MedalCounterSlide, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);

					declare netread Net_ChaseMedal_MedalCounterMedals for Owner = Integer[Integer];
					declare netread Net_ChaseMedal_MedalCounterMedalUnlock for Owner = {{{Const::C_Medal_None}}};
					declare Total = 0;
					declare Add = 0;
					foreach (Medal => Frame_Medal in Frames_Medal) {
						declare Label_MedalTotal <=> (Frame_Medal.GetFirstChild("label-medal-total") as CMlLabel);
						declare Label_MedalAdd <=> (Frame_Medal.GetFirstChild("label-medal-add") as CMlLabel);
						if (Net_ChaseMedal_MedalCounterMedals.existskey(Medal)) {
							declare Count = Net_ChaseMedal_MedalCounterMedals[Medal];
							Total += Count;
							if((Medal == Net_ChaseMedal_RaceMedal) && TempMedalsCount != Count){
								TempMedalsCount = Count;
								Label_MedalTotal.Value = TL::ToText(Count - 1);
							}
							else{
								Label_MedalTotal.Value = TL::ToText(Count);
							}
						} 
						else if (Net_ChaseMedal_MedalCounterMedals.existskey(Medal)) {
							Label_MedalTotal.Value = "" ^ Net_ChaseMedal_MedalCounterMedals[Medal];
						} 
						else {
							Label_MedalTotal.Value = "0";
						}
						if (
							Net_ChaseMedal_MedalCounterMedalUnlock != {{{Const::C_Medal_None}}} && (
								(!Net_ChaseMedal_UnlockLesserMedal && Net_ChaseMedal_MedalCounterMedalUnlock == Medal) ||
								(Net_ChaseMedal_UnlockLesserMedal && Medals.keyof(Net_ChaseMedal_MedalCounterMedalUnlock) >= Medals.keyof(Medal))
							)
						) {
							Label_MedalAdd.Value = "+1";
							Add += 1;
						} else {
							Label_MedalAdd.Value = "";
						}
					}
					Label_MedalsTotal.Value = TL::ToText(Total);
					if (Add > 0) 
						Label_MedalsAdd.Value = "+"^Add;
					else 
						Label_MedalsAdd.Value = "";
				}
				HideCounter(Frames_Medal);
			}

			if(G_TimeTravAnim > 0 && (Now > G_TimeTravAnim && G_TravAllow)){
				G_TravAllow = False;
				MakeMedalTravel();
			}
			if((G_TimeTravAnim > 0 && Now > G_TimeTravAnim + G_TimeIncrementMedal)){
				G_TimeTravAnim = -1; //< Stop the anim or it will continue to run infinitely
				if (Net_ChaseMedal_RaceMedal == {{{Const::C_Medal_Gold}}}
					|| Net_ChaseMedal_RaceMedal == {{{Const::C_Medal_Silver}}}
					|| Net_ChaseMedal_RaceMedal == {{{Const::C_Medal_Bronze}}}) {
					ShowCounter(Frames_Medal[Net_ChaseMedal_RaceMedal]);
				}
			}
		}

		if (Owner == Null && Frame_Global.Visible) {
			Frame_Global.Visible = False;
		}

		if (DisplayRaceMedal && GameTime >= PrevRaceMedalHideTime) {
			G_TimeTravAnim = Now;
			G_TravAllow = False;
			DisplayRaceMedal = False;
			AnimMgr.Add(Frame_RaceMedalSlide, "<frame pos=\"0 -{{{TableSize.Y+5}}}\" hidden=\"1\" />", G_TimeIncrementMedal, CAnimManager::EAnimManagerEasing::QuadOut);
		}

		if (!DisplayMedalCounter && ChaseAttack_ScoresTableIsVisible) {
			DisplayMedalCounter = True;
			AnimMgr.Add(Frame_MedalCounterSlide, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}

		if (DisplayMedalCounter && GameTime >= PrevMedalCounterHideTime && !ChaseAttack_ScoresTableIsVisible) {
			DisplayMedalCounter = False;
			AnimMgr.Add(Frame_MedalCounterSlide, "<frame pos=\"-{{{TitleSize+5}}} 0\" hidden=\"1\" />", G_TimeIncrementMedal, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}
}
--></script>
</manialink>
""";
}

Text Private_GetScoresTableVisibilityML() {
	return """
<manialink version="3" name="{{{C_Layer_ScoresTableVisibility}}}">
<script><!--
main() {
	declare ChaseAttack_ScoresTableIsVisible for This = False;
	while (True) {
		yield;

		if (ChaseAttack_ScoresTableIsVisible != PageIsVisible) {
			ChaseAttack_ScoresTableIsVisible = PageIsVisible;
		}
	}
}
--></script>
</manialink>
""";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();

	Layers::Create(C_Layer_Medal, Private_GetMedalML());
	Layers::Create(C_Layer_ScoresTableVisibility, Private_GetScoresTableVisibilityML());
	Layers::SetType(C_Layer_ScoresTableVisibility, CUILayer::EUILayerType::ScoresTable);
}