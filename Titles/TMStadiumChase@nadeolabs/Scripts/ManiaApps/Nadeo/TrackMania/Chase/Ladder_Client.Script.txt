/**
 * Chase ladder UI
 */
#Const Version    "2018-06-22"
#Const ScriptName "ManiaApps/Nadeo/TrackMania/Chase/Ladder_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "ManiaApps/Nadeo/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/Manialink/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/TrackMania/Chase/Constants2.Script.txt" as Const

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Layer_Ladder "ChaseAttack_Ladder"
#Const C_Event_PlayLadderProgression "ChaseLadder_PlayLadderProgression"
#Const C_AnimDuration_LP 1000
#Const C_AnimDuration_Ranking 500

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Private
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the manialink of the Chase UI
 *
 *  @return                           Chase UI manialink
 */
Text Private_GetLadderML() {
	declare Img_EchelonPath = "file://Media/Manialinks/Common/Echelons/";
	declare Img_GaugeBg = Img_EchelonPath^"Gauge_Bg.dds";
	declare Img_GaugeFg = Img_EchelonPath^"Gauge_Overlay.dds";

	declare TemplateSize = <165., 23.5>;
	declare TemplateGutter = 1.;
	declare TemplateGridX = Grid::CreateConfig(TemplateSize.X, 40, TemplateGutter, True, Grid::C_Direction_Right);
	declare TemplateGridY = Grid::CreateConfig(TemplateSize.Y, 8, TemplateGutter, True, Grid::C_Direction_Bottom);

	declare EchelonLogoSizeX = Grid::GetSize(TemplateGridX, 4);
	declare EchelonLogoSizeY = Grid::GetSize(TemplateGridY, 6);
	declare EchelonLogoPosX = Grid::Push(TemplateGridX, 0, Grid::C_Align_Center, EchelonLogoSizeX);
	declare EchelonLogoPosY = Grid::Push(TemplateGridY, 1, Grid::C_Align_Center, EchelonLogoSizeY);

	declare EchelonNbPosY = EchelonLogoPosY - (EchelonLogoSizeY * 0.1);

	declare EchelonGaugeFgSizeX = Grid::GetSize(TemplateGridX, 16);
	declare EchelonGaugeFgSizeY = Grid::GetSize(TemplateGridY, 2);
	declare EchelonGaugeFgPosX = Grid::Push(TemplateGridX, 4, Grid::C_Align_Left, EchelonGaugeFgSizeX);
	declare EchelonGaugeFgPosY = Grid::Push(TemplateGridY, 5, Grid::C_Align_Top, EchelonGaugeFgSizeY);
	declare EchelonGaugeBgSizeX = EchelonGaugeFgSizeX;
	declare EchelonGaugeBgSizeY = EchelonGaugeFgSizeY * 0.2;
	declare EchelonGaugeBgPosX = EchelonGaugeFgPosX;
	declare EchelonGaugeBgPosY = EchelonGaugeFgPosY - (EchelonGaugeFgSizeY * 0.8);

	declare LPTitleSizeX = Grid::GetSize(TemplateGridX, 4);
	declare LPTitleSizeY = Grid::GetSize(TemplateGridY, 2);
	declare LPTitlePosX = Grid::Push(TemplateGridX, 4, Grid::C_Align_Left, LPTitleSizeX);
	declare LPTitlePosY = Grid::Push(TemplateGridY, 3, Grid::C_Align_Center, LPTitleSizeY);

	declare LPAddSizeX = Grid::GetSize(TemplateGridX, 8);
	declare LPAddSizeY = Grid::GetSize(TemplateGridY, 2);
	declare LPAddPosX = Grid::Push(TemplateGridX, 8, Grid::C_Align_Center, LPAddSizeX);
	declare LPAddPosY = Grid::Push(TemplateGridY, 3, Grid::C_Align_Center, LPAddSizeY);

	declare LPTotalSizeX = Grid::GetSize(TemplateGridX, 4);
	declare LPTotalSizeY = Grid::GetSize(TemplateGridY, 2);
	declare LPTotalPosX = Grid::Push(TemplateGridX, 16, Grid::C_Align_Right, LPTotalSizeX);
	declare LPTotalPosY = Grid::Push(TemplateGridY, 3, Grid::C_Align_Center, LPTotalSizeY);

	declare ZonesML = "";
	declare ZoneSizeY = Grid::GetSize(TemplateGridY, 2);
	for (I, 1, 4) {
		declare PosY = Grid::Push(TemplateGridY, 8 - (I * 2), Grid::C_Align_Center, ZoneSizeY);
		ZonesML ^= """<frameinstance pos="0 {{{PosY}}}" modelid="framemodel-zone" />""";
	}

	declare ZoneNameSizeX = Grid::GetSize(TemplateGridX, 6);
	declare ZoneNameSizeY = Grid::GetSize(TemplateGridY, 2);
	declare ZoneNamePosX = Grid::Push(TemplateGridX, 20, Grid::C_Align_Right, ZoneNameSizeX);

	declare ZoneAddSizeX = Grid::GetSize(TemplateGridX, 4);
	declare ZoneAddSizeY = Grid::GetSize(TemplateGridY, 2);
	declare ZoneAddPosX = Grid::Push(TemplateGridX, 26, Grid::C_Align_Right, ZoneAddSizeX);

	declare ZoneRankSizeX = Grid::GetSize(TemplateGridX, 4);
	declare ZoneRankSizeY = Grid::GetSize(TemplateGridY, 2);
	declare ZoneRankPosX = Grid::Push(TemplateGridX, 30, Grid::C_Align_Right, ZoneRankSizeX);

	declare ZoneDividerSizeX = Grid::GetSize(TemplateGridX, 1);
	declare ZoneDividerSizeY = Grid::GetSize(TemplateGridY, 2);
	declare ZoneDividerPosX = Grid::Push(TemplateGridX, 34, Grid::C_Align_Center, ZoneDividerSizeX);

	declare ZoneTotalSizeX = Grid::GetSize(TemplateGridX, 5);
	declare ZoneTotalSizeY = Grid::GetSize(TemplateGridY, 2);
	declare ZoneTotalPosX = Grid::Push(TemplateGridX, 35, Grid::C_Align_Left, ZoneTotalSizeX);

	return """	
<manialink version="3" name="{{{C_Layer_Ladder}}}">
<stylesheet>
  <style class="text-default" textfont="OswaldMono" textcolor="ffffff" textsize="3" textemboss="1" />
</stylesheet>
<framemodel id="framemodel-zone">
	<label pos="{{{ZoneNamePosX}}} 0" size="{{{ZoneNameSizeX}}} {{{ZoneNameSizeY}}}" halign="right" valign="center2" class="text-default" id="label-zone-name" />
	<label pos="{{{ZoneAddPosX}}} 0" size="{{{ZoneAddSizeX}}} {{{ZoneAddSizeY}}}" halign="right" valign="center2" textcolor="{{{Const::C_TextColor_Yellow}}}" class="text-default" id="label-zone-add" />
	<label pos="{{{ZoneRankPosX}}} 0" size="{{{ZoneRankSizeX}}} {{{ZoneRankSizeY}}}" halign="right" valign="center2" class="text-default" id="label-zone-rank" />
	<label pos="{{{ZoneDividerPosX}}} 0" size="{{{ZoneDividerSizeX}}} {{{ZoneDividerSizeY}}}" halign="center" valign="center2" text="/" class="text-default" />
	<label pos="{{{ZoneTotalPosX}}} 0" size="{{{ZoneTotalSizeX}}} {{{ZoneTotalSizeY}}}" valign="center2" class="text-default" id="label-zone-total" />
</framemodel>
<frame z-index="2" hidden="1" id="frame-global">
	<frame pos="{{{TemplateSize.X*-0.5-0.1}}} 75" id="frame-ladder">
		<frame z-index="0" hidden="1" id="frame-title"><!-- overlap with the map's name -->
			<quad size="0.6 9" bgcolor="ffffff" />
			<quad pos="1.6 -4.5" size="8 8" valign="center" keepratio="fit" id="quad-flag" />
			<label pos="11 -4.5" size="{{{TemplateSize.X-11}}} 8" valign="center2" textsize="6" class="text-default" id="label-name" />
		</frame>
		<frame pos="0 -10" z-index="1">
	  	<quad z-index="0" size="{{{TemplateSize.X}}} {{{TemplateSize.Y}}}" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1" />
			<quad z-index="1" size="{{{TemplateSize.X}}} {{{TemplateSize.Y}}}" bgcolor="111" opacity="0.7" />
		</frame>
		<frame pos="0 -10" z-index="2" id="frame-ladder-points">
			<quad pos="{{{EchelonLogoPosX}}} {{{EchelonLogoPosY}}}" z-index="0" size="{{{EchelonLogoSizeX}}} {{{EchelonLogoSizeY}}}" halign="center" valign="center" keepratio="fit" id="quad-echelon-logo" />
			<label pos="{{{EchelonLogoPosX}}} {{{EchelonNbPosY}}}" z-index="1" size="{{{EchelonLogoSizeX}}} {{{EchelonLogoSizeY}}}" halign="center" valign="center2" textsize="9" textemboss="0" class="text-default" id="label-echelon-number" />
			<quad pos="{{{EchelonGaugeBgPosX}}} {{{EchelonGaugeBgPosY}}}" z-index="0" size="{{{EchelonGaugeBgSizeX}}} {{{EchelonGaugeBgSizeY}}}" id="gauge-echelon-bg" />
			<quad pos="{{{EchelonGaugeFgPosX}}} {{{EchelonGaugeFgPosY}}}" z-index="1" size="{{{EchelonGaugeFgSizeX}}} {{{EchelonGaugeFgSizeY}}}" id="gauge-echelon-fg" />
			<quad pos="{{{LPTitlePosX}}} {{{LPTitlePosY}}}" size="15 15" valign="center2" style="BgRaceScore2" substyle="LadderPoints" />
			<label pos="{{{LPAddPosX}}} {{{LPAddPosY}}}" z-index="1" size="{{{LPAddSizeX}}} {{{LPAddSizeY}}}" halign="center" valign="center2" textsize="5" textcolor="{{{Const::C_TextColor_Yellow}}}" class="text-default" id="label-lp-add" />
			<label pos="{{{LPTotalPosX}}} {{{LPTotalPosY}}}" size="{{{LPTotalSizeX}}} {{{LPTotalSizeY}}}" halign="right" valign="center2" textsize="5" class="text-default" id="label-lp-total" />
		</frame>
		<frame pos="0 -10" z-index="2" id="frame-ranking">
			{{{ZonesML}}}
		</frame>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "AnimLib" as AL

#Const C_AnimDuration_LP {{{C_AnimDuration_LP}}}
#Const C_AnimDuration_Ranking {{{C_AnimDuration_Ranking}}}

declare CAudioSource G_EchelonGainSound;
declare CAudioSource G_ProgressStopSound;
declare Real G_AnimLP_NextTick;
declare Integer G_AnimLP_PrevEchelonNumber;
declare Integer G_AnimRanking_NextTick;

Void UpdateLadderPoints(CMlFrame _Frame_LadderPoints, Real _PrevLadderPoints, Real _NewLadderPoints, Boolean _PlaySound, Real _TickInterval) {
	declare Quad_EchelongLogo <=> (_Frame_LadderPoints.GetFirstChild("quad-echelon-logo") as CMlQuad);
	declare Label_EchelonNumber <=> (_Frame_LadderPoints.GetFirstChild("label-echelon-number") as CMlLabel);
	declare Gauge_EchelonBg <=> (_Frame_LadderPoints.GetFirstChild("gauge-echelon-bg") as CMlQuad);
	declare Gauge_EchelonFg <=> (_Frame_LadderPoints.GetFirstChild("gauge-echelon-fg") as CMlQuad);
	declare Label_LPAdd <=> (_Frame_LadderPoints.GetFirstChild("label-lp-add") as CMlLabel);
	declare Label_LPTotal <=> (_Frame_LadderPoints.GetFirstChild("label-lp-total") as CMlLabel);

	declare EchelonNumber = ML::FloorInteger(_NewLadderPoints / 10000.);
	if (EchelonNumber < 0) EchelonNumber = 0;
	else if (EchelonNumber > 9) EchelonNumber = 9;
	Quad_EchelongLogo.ImageUrl = "{{{Img_EchelonPath}}}echelon"^EchelonNumber^".dds";
	Label_EchelonNumber.Value = TL::ToText(EchelonNumber);
	if (_NewLadderPoints < 40000.) {
		Gauge_EchelonBg.BgColor = {{{Const::C_MedalColor_Bronze}}};
		Gauge_EchelonFg.BgColor = {{{Const::C_MedalColor_Bronze}}};
	} else if (_NewLadderPoints < 70000.) {
		Gauge_EchelonBg.BgColor = {{{Const::C_MedalColor_Silver}}};
		Gauge_EchelonFg.BgColor = {{{Const::C_MedalColor_Silver}}};
	} else {
		Gauge_EchelonBg.BgColor = {{{Const::C_MedalColor_Gold}}};
		Gauge_EchelonFg.BgColor = {{{Const::C_MedalColor_Gold}}};
	}
	declare GaugeRatio = 1.;
	if (_NewLadderPoints < 100000.) GaugeRatio = ML::Mod(_NewLadderPoints, 0., 10000.) / 10000.;
	Gauge_EchelonFg.Size.X = {{{EchelonGaugeFgSizeX}}} * GaugeRatio;
	declare Diff = _NewLadderPoints - _PrevLadderPoints;
	if (Diff > 0) {
		Label_LPAdd.Value = "+"^TL::FormatReal(Diff, 2, False, False);
	} else {
		Label_LPAdd.Value = "";
	}
	Label_LPTotal.Value = TL::ToText(ML::NearestInteger(_NewLadderPoints));

	if (_PlaySound && _TickInterval > 0.) {
		if (_NewLadderPoints >= G_AnimLP_NextTick) {
			Audio.PlaySoundEvent(CAudioManager::ELibSound::ScoreIncrease, 0, 0.);
		}
		if (G_AnimLP_PrevEchelonNumber != EchelonNumber) {
			Audio.PlaySoundEvent(G_EchelonGainSound, 0.);
		}
	}
	if (_NewLadderPoints >= G_AnimLP_NextTick) {
		if (_TickInterval > 0.) G_AnimLP_NextTick = _NewLadderPoints - ML::Mod(_NewLadderPoints, 0., _TickInterval) + _TickInterval;
		else G_AnimLP_NextTick = _NewLadderPoints + _TickInterval;
	}
	G_AnimLP_PrevEchelonNumber = EchelonNumber;
}

Void UpdateLadderRanking(CMlFrame _Frame_Ranking, Int3[Text] _PrevZoneRanking, Int3[Text] _NewZoneRanking) {
	declare Zones = Text[];
	declare PrevRank = Integer[];
	declare NewRank = Integer[];
	declare Total = Integer[];
	foreach (Zone => Rank in _NewZoneRanking) {
		Zones.add(Zone);
		NewRank.add(Rank.X);
		Total.add(Rank.Y);
		if (_PrevZoneRanking.existskey(Zone)) {
			PrevRank.add(_PrevZoneRanking[Zone].X);
		} else {
			PrevRank.add(Rank.X);
		}
	}

	foreach (Key => Control in _Frame_Ranking.Controls) {
		declare Frame_Zone <=> (Control as CMlFrame);
		if (Zones.existskey(Key)) {
			declare Label_ZoneName <=> (Frame_Zone.GetFirstChild("label-zone-name") as CMlLabel);
			declare Label_ZoneAdd <=> (Frame_Zone.GetFirstChild("label-zone-add") as CMlLabel);
			declare Label_ZoneRank <=> (Frame_Zone.GetFirstChild("label-zone-rank") as CMlLabel);
			declare Label_ZoneTotal <=> (Frame_Zone.GetFirstChild("label-zone-total") as CMlLabel);
			Label_ZoneName.Value = Zones[Key];
			declare Diff = PrevRank[Key] - NewRank[Key];
			if (Diff > 0) {
				Label_ZoneAdd.Value = "+"^Diff;
			} else {
				Label_ZoneAdd.Value = "";
			}
			Label_ZoneRank.Value = TL::ToText(NewRank[Key]);
			Label_ZoneTotal.Value = TL::ToText(Total[Key]);
			Frame_Zone.Visible = True;
		} else {
			Frame_Zone.Visible = False;
		}
	}
}

main() {
	declare Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
	declare Frame_Ladder <=> (Frame_Global.GetFirstChild("frame-ladder") as CMlFrame);
	declare Frame_Title <=> (Frame_Global.GetFirstChild("frame-title") as CMlFrame);
	declare Quad_Flag <=> (Frame_Title.GetFirstChild("quad-flag") as CMlQuad);
	declare Label_Name <=> (Frame_Title.GetFirstChild("label-name") as CMlLabel);
	declare Frame_LadderPoints <=> (Frame_Global.GetFirstChild("frame-ladder-points") as CMlFrame);
	declare Frame_Ranking <=> (Frame_Global.GetFirstChild("frame-ranking") as CMlFrame);

	declare Int3[Text] ChaseLadder_PrevZoneRanking for UI;
	declare Int3[Text] ChaseLadder_NewZoneRanking for UI;
	declare Real ChaseLadder_PrevLadderPoints for UI;
	declare Real ChaseLadder_NewLadderPoints for UI;
	
	declare netread Net_ChaseLadder_IsVisible for Teams[0] = False;

	G_EchelonGainSound <=> Audio.CreateSound("file://Media/Manialinks/Nadeo/TrackMania/Chase/EchelonGain.wav", 0., False, False, False);
	G_ProgressStopSound <=> Audio.CreateSound("file://Media/Manialinks/Nadeo/TrackMania/Chase/ProgressStop.wav", 0., False, False, False);
	G_AnimLP_NextTick = 0.;
	G_AnimLP_PrevEchelonNumber = 0;
	G_AnimRanking_NextTick = 0;

	declare AnimLP_StartTime = -1;
	declare AnimLP_EndTime = -1;
	declare AnimLP_Base = 0.;
	declare AnimLP_Change = 0.;
	declare AnimLP_Target = 0.;
	declare AnimRanking_StartTime = -1;
	declare AnimRanking_EndTime = -1;
	declare AnimRanking_Zone = "";
	declare AnimRanking_Base = Int3[Text];
	declare AnimRanking_Change = Int3[Text];
	declare AnimRanking_Target = Int3[Text];

	declare PrevVisible = Frame_Global.Visible;
	declare PrevFlagUrl = "";
	declare PrevName = "";

	while (True) {
		yield;

		if (PrevVisible != Net_ChaseLadder_IsVisible) {
			PrevVisible = Net_ChaseLadder_IsVisible;
			Frame_Global.Visible = PrevVisible;
		}

		if (LocalUser != Null) {
			if (PrevFlagUrl != LocalUser.AvatarUrl) {
				PrevFlagUrl = LocalUser.AvatarUrl;
				Quad_Flag.ImageUrl = PrevFlagUrl;
			}

			if (PrevName != LocalUser.Name) {
				PrevName = LocalUser.Name;
				Label_Name.Value = PrevName;
			}
		}

		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CMlScriptEvent::Type::PluginCustomEvent: {
					if (Event.CustomEventType == "{{{C_Event_PlayLadderProgression}}}") {
						AnimLP_StartTime = Now;
						AnimLP_EndTime = AnimLP_StartTime + C_AnimDuration_LP;
						AnimLP_Base = ChaseLadder_PrevLadderPoints;
						AnimLP_Change = ChaseLadder_NewLadderPoints - AnimLP_Base;
						AnimLP_Target = ChaseLadder_NewLadderPoints;
						G_AnimLP_NextTick = 0.;

						AnimRanking_StartTime = AnimLP_EndTime + 500;
						AnimRanking_EndTime = AnimRanking_StartTime + C_AnimDuration_Ranking;
						AnimRanking_Zone = "";
						AnimRanking_Base = ChaseLadder_PrevZoneRanking;
						AnimRanking_Change = Int3[Text];
						foreach (Zone => BaseRanking in AnimRanking_Base) {
							AnimRanking_Zone = Zone;
							G_AnimRanking_NextTick = BaseRanking.X;
							if (ChaseLadder_NewZoneRanking.existskey(Zone)) {
								declare NewRanking = ChaseLadder_NewZoneRanking[Zone];
								AnimRanking_Change[Zone] = NewRanking - BaseRanking;
							}
						}
						AnimRanking_Target = ChaseLadder_NewZoneRanking;
					}
				}
			}
		}

		if (AnimLP_StartTime >= 0) {
			if (Now < AnimLP_EndTime) {
				declare Current = AL::EaseOutQuad(Now - AnimLP_StartTime, AnimLP_Base, AnimLP_Change, C_AnimDuration_LP);
				UpdateLadderPoints(Frame_LadderPoints, AnimLP_Base, Current, Frame_Global.Visible, AnimLP_Change / 100.);
			} else {
				AnimLP_StartTime = -1;
				UpdateLadderPoints(Frame_LadderPoints, AnimLP_Base, AnimLP_Target, Frame_Global.Visible, AnimLP_Change / 100.);
				if (Frame_Global.Visible && AnimLP_Change != 0.) Audio.PlaySoundEvent(G_ProgressStopSound, 0.);
			}
		}

		if (AnimRanking_StartTime >= 0) {
			if (Now < AnimRanking_EndTime) {
				// Only animate one zone at a time
				declare Current = AnimRanking_Target;
				declare FoundZone = False;
				foreach (Zone => BaseRanking in AnimRanking_Base) {
					if (!FoundZone && Zone == AnimRanking_Zone) {
						FoundZone = True;
						declare NewValue = ML::NearestInteger(AL::EaseOutQuad(Now - AnimRanking_StartTime, BaseRanking.X * 1., AnimRanking_Change[Zone].X * 1., C_AnimDuration_Ranking));
						Current[Zone].X = NewValue;
						if (NewValue < G_AnimRanking_NextTick) {
							G_AnimRanking_NextTick = NewValue;
							if (Frame_Global.Visible) Audio.PlaySoundEvent(CAudioManager::ELibSound::ScoreIncrease, 0, 0.);
						}
					} else if (!FoundZone) {
						Current[Zone].X = BaseRanking.X;
					}
				}
				UpdateLadderRanking(Frame_Ranking, AnimRanking_Base, Current);
			} else {
				declare RemainingZones = AnimRanking_Base;
				// Loop on array to animate each zone
				declare StartToRemove = False;
				foreach (Zone => BaseRanking in AnimRanking_Base) {
					if (Zone == AnimRanking_Zone) {
						StartToRemove = True;
						// Play progress stop sound
						if (AnimRanking_Change.existskey(Zone) && AnimRanking_Change[Zone].X < 0) {
							if (Frame_Global.Visible) Audio.PlaySoundEvent(G_ProgressStopSound, 0.);
						}
					}
					if (StartToRemove) {
						declare Removed = RemainingZones.removekey(Zone);
					}
				}
				if (RemainingZones.count > 0) {
					foreach (Zone => BaseRanking in RemainingZones) {
						AnimRanking_Zone = Zone;
						G_AnimRanking_NextTick = BaseRanking.X;
					}
					AnimRanking_StartTime = Now;
					AnimRanking_EndTime = AnimRanking_StartTime + C_AnimDuration_Ranking;
				} else {
					AnimRanking_StartTime = -1;
					UpdateLadderRanking(Frame_Ranking, AnimRanking_Base, AnimRanking_Target);
				}
			}
		}
	}
}
--></script>
</manialink>
""";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the full path to every zone
 *	a player belong to
 *
 *	@param	_ZonePath									The complete zone path
 *
 *	@return														All zones paths
 */
Text[] GetAllZones(Text _ZonePath) {
	declare Text[] AllZones;
	declare SplitZones = TL::Split("|", _ZonePath);
	while (SplitZones.count > 0) {
		AllZones.add(TL::Join("|", SplitZones));
		declare Removed = SplitZones.removekey(SplitZones.count - 1);
	}
	declare Removed = AllZones.remove("World");
	return AllZones;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the library
Void PlayLadderProgression() {
	declare Int3[Text] ChaseLadder_PrevZoneRanking for UI;
	declare Int3[Text] ChaseLadder_NewZoneRanking for UI;
	ChaseLadder_PrevZoneRanking = ChaseLadder_NewZoneRanking;
	ChaseLadder_NewZoneRanking.clear();

	declare AllZones = GetAllZones(LocalUser.ZonePath);
	foreach (Zone in AllZones) {
		declare Rank = ScoreMgr.MultiplayerLeaderBoard_GetPlayerRanking(UserMgr.MainUser.Id, Zone);
		declare Total = ScoreMgr.MultiplayerLeaderBoard_GetPlayerCount(Zone);
		declare SplitZone = TL::Split("|", Zone);
		declare ZoneLeaf = SplitZone[SplitZone.count - 1];
		ChaseLadder_NewZoneRanking[ZoneLeaf] = <Rank, Total, 0>;
	}

	declare Real ChaseLadder_PrevLadderPoints for UI;
	declare Real ChaseLadder_NewLadderPoints for UI;
	ChaseLadder_PrevLadderPoints = ChaseLadder_NewLadderPoints;
	ChaseLadder_NewLadderPoints = LocalUser.LadderPoints;

	LayerCustomEvent(Layers::Get(C_Layer_Ladder), C_Event_PlayLadderProgression, Text[]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();

	Layers::Create(C_Layer_Ladder, Private_GetLadderML());
}