/**
 * Chase team UI
 */
#Const Version    "2018-06-27"
#Const ScriptName "ManiaApps/Nadeo/TrackMania/Chase/TeamSelection_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "ManiaApps/Nadeo/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/TrackMania/Chase/Constants2.Script.txt" as Const

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Layer_TeamSelection "ChaseAttack_TeamSelection"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Private
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the manialink of the Chase UI
 *
 *  @return                           Chase UI manialink
 */
Text Private_GetTeamSelectionML() {
	declare Text_Team = TL::ToUpperCase(_("Team"));
	//L16N [Chase Attack] A title displayed above a list of players where the player can pick a teammate.
	declare Text_SelectTeammate = TL::ToUpperCase(_("Select teammate"));
	//L16N [Chase Attack] Message displayed once a player sent an invite to another player and he/she is waiting for an answer. %1 is the name from the player who received the invitation.
	declare Text_WaitingConfirmation = _("Waiting confirmation from $<%1$>");
	//L16N [Chase Attack] Message displayed once the other player accepted your invitation to play together. %1 is the name of the teammate.
	declare Text_TeamReady = _("Your team with $<%1$> is ready");
	//L16N [Chase Attack] A click on this button cancel the invitation the player sent.
	declare Text_CancelInvite = _("Cancel invite");
	//L16N [Chase Attack] A click on this button cancel the automatic search for a teammate.
	declare Text_CancelSearch = _("Cancel search");
	//L16N [Chase Attack] Message displayed while the game mode is searching for a teammate for the player.
	declare Text_SearchingTeammate = _("Searching teammate");
	//L16N [Chase Attack] A click on this button starts an automatic search to find a teammate for the player.
	declare Text_FindTeammate = _("Find teammate");
	//L16N [Chase Attack] %1 is the name of a button. Pressing this button will open the tutorial explaining the rules of the mode.
	declare Text_PressToShowRules = _("Press %1 to show rules");
	// The key used to open the rules is defined in ChaseTuto_Client.Script.txt
	declare Text_PressF3ToShowRules = TL::Compose(Text_PressToShowRules, "F3");
	//L16N [Chase Attack] A click on this button sort the players that sent you an invite at the beginning of the list.
	declare Text_SortInvite = _("Sort invites first");
	declare Img_FootLine = "file://Media/Manialinks/Nadeo/TrackMania/Ingame/FootLine_Ranking.dds";
	declare Img_InvitationReceived = "file://Media/Manialinks/Nadeo/TrackMania/Chase/InvitationReceived.dds";
	declare Img_InvitationSent = "file://Media/Manialinks/Nadeo/TrackMania/Chase/InvitationSent.dds";
	declare Img_SortInvites = "file://Media/Manialinks/Nadeo/TrackMania/Chase/SortInvites.dds";

	declare Color_HasTeam = TL::ToColor("d30000");
	declare Color_InvitationReceived = TL::ToColor("ff7f00");
	declare Color_InvitationSent = TL::ToColor("3fc2ff");
	declare Vec3 White = TL::ToColor("FFFFFF");
	declare Vec3 Black = TL::ToColor("111111");

	declare PlayersML = "";
	for (I, 0, 7) {
		declare PosY = I * -6.5;
		PlayersML ^= """<frameinstance pos="0 {{{PosY}}}" modelid="framemodel-player" />""";
	}

	return """
<manialink version="3" name="{{{C_Layer_TeamSelection}}}">
<stylesheet>
	<style class="text-default" textfont="Oswald" textcolor="ffffff" textsize="3" textemboss="1" />
	<style class="buttontext-default" textfont="BiryaniDemiBold" textcolor="ffffff" textsize="3"  textprefix="$t"/>
</stylesheet>
<framemodel id="framemodel-player">
	<frame pos="-0.5 0" z-index="0" hidden="1" id="frame-status">
		<quad z-index="0" size="6 6" halign="right" valign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1" />
		<quad z-index="1" size="6 6" halign="right" valign="center" bgcolor="ffffff" hidden="1" id="quad-status-blink" />
		<quad z-index="2" size="6 6" halign="right" valign="center" bgcolor="111111" opacity="0.5" id="quad-status-color" />
		<quad pos="-3 0" z-index="3" size="5 5" halign="center" valign="center" id="quad-status-icon" />
		<label pos="-3 -0.4" z-index="4" size="5 5" halign="center" valign="center2" textsize="3" text="" id="label-has-team" />
	</frame>
	<quad z-index="0" size="52 6" valign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1" />
	<quad z-index="1" size="52 6" valign="center" bgcolor="111111" opacity="0.5" />
	<quad z-index="2" size="52 6" valign="center" bgcolor="11111100" bgcolorfocus="eeeeee" opacity="0.3" scriptevents="1" id="button-player" />
	<label pos="2.4 0" z-index="3" size="2 6" halign="center" valign="center2" textemboss="0" textcolor="ffffff" text="" class="text-default" id="label-bracket" />
	<label pos="4 0" z-index="3" size="47 6" valign="center2" class="text-default" id="label-name" />
	<quad pos="4 -2" z-index="2" size="47 0.5" hidden="1" id="quad-underline" />

</framemodel>
<frame hidden="1" id="frame-global">
	<frame pos="158 60" id="frame-team-selection">
		<frame pos="-27 0" z-index="0">
			<quad pos="0.1 -3.2" z-index="0" size="52 24" halign="center" valign="center" opacity="0.3" keepratio="Fit" image="{{{Img_FootLine}}}" />
			<label pos="-25.9 0" z-index="3" size="44 5" valign="center2" text="{{{Text_SelectTeammate}}}" class="text-default" />
			<frame pos="25.9 0" hidden="1" id="frame-invites-alert">
				<quad pos="0.1 0.2" z-index="0" size="8 5" halign="right" valign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1" />
				<quad pos="0.1 0.2" z-index="1" size="8 5" halign="right" valign="center" opacity="0.5" bgcolor="{{{TL::ColorToText(Color_InvitationReceived)}}}" />
				<quad pos="0.1 0.2" z-index="2" size="8 5" halign="right" valign="center" bgcolor="11111100" bgcolorfocus="eeeeee" opacity="0.3" scriptevents="1" id="button-sort-bis" />
				<quad pos="-3.5 0.3" z-index="3" size="4 4" halign="right" valign="center" image="{{{Img_InvitationReceived}}}" />
				<label z-index="3" size="3 5" halign="right" valign="center2" class="text-default" id="label-invites-nb" />
			</frame>
			<quad pos="-26.5 0" z-index="1" size="6 6" halign="right" valign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1" />
			<quad pos="-26.5 0" z-index="2" size="6 6" halign="right" valign="center" bgcolor="111111" opacity="0.5" />
			<quad pos="-26.5 0" z-index="3" size="6 6" halign="right" valign="center" bgcolor="11111100" bgcolorfocus="eeeeee" opacity="0.3" scriptevents="1" id="button-sort" />
			<quad pos="-29.5 0" z-index="4" size="5 5" halign="center" valign="center" image="{{{Img_SortInvites}}}" />
			<label pos="-33.5 0" z-index="5" size="30 20" halign="right" valign="center2" autonewline="1" text="{{{Text_SortInvite}}}" hidden="1" class="text-default" id="label-sort" />
		</frame>
		<frame pos="-53 -7" id="frame-list-players">
			{{{PlayersML}}}
		</frame>
		<frame pos="-26.5 -60" id="frame-pager">
			<quad pos="-10 0" size="10 10" halign="right" valign="center" style="Icons64x64_1" substyle="ArrowPrev" scriptevents="1" id="button-page-prev" />
			<label size="20 10" halign="center" valign="center2" text="0/0" class="text-default" id="label-page" />
			<quad pos="10 0" size="10 10" valign="center" style="Icons64x64_1" substyle="ArrowNext" scriptevents="1" id="button-page-next" />
		</frame>
	</frame>
	<frame pos="0 65" id="frame-lobby">
		<label size="150 10" halign="center" valign="center2" textsize="8" class="text-default" id="label-info" />
		<frame id="frame-spinner" pos="-1. 0.5">
			<quad size="12 12" halign="center" valign="center" style="UIConstruction_Buttons" substyle="Reload" id="quad-spinner" />
			<quad pos="0.5 -0.5" size="12 12" halign="center" valign="center" style="UIConstruction_Buttons" substyle="Reload" colorize="000000" id="quad-spinner-2" />
		</frame>

		<quad pos="0 -4.5" z-index="1" size="80 0.666" bgcolor="FFFFFF" halign="center" valign="center"/>
		<quad pos="35 -5" z-index="1" size="10 1" bgcolor="FFFFFF" halign="center" valign="center"/>

		<label id="button-label" z-index="1" pos="0 -12.5" scale="1.3" halign="center" valign="center2" textsize="4"  class="buttontext-default"/>	
		<quad id="button-action" z-index="0" pos="0 -12" size="82 8"  bgcolor="111111" opacity="0.3" halign="center" valign="center" scriptevents="1"/>
		<frame id="baBorders"  z-index="5">
			<quad pos="0 -8.15" id="baBorderUp"  size="82.666 0.333" bgcolor="FFFFFF" scriptevents="1" halign="center" valign="center"/>
			<quad pos="0 -15.85" id="baBorderDown" size="82.666 0.333" bgcolor="FFFFFF" scriptevents="1" halign="center" valign="center"/>
			<quad pos="-41.15 -12" id="baBorderLeft" size="0.333 7.333" bgcolor="FFFFFF" scriptevents="1" halign="center" valign="center"/>
			<quad pos="41.15 -12" id="baBorderRight" size="0.333 7.333" bgcolor="FFFFFF" scriptevents="1" halign="center" valign="center"/>
		</frame>
	</frame>
	<frame id="frameF1">
		<frame id="F1" halign="center" valign="center" pos="0 -70" size="80 10"> 
			<quad id="BackgroundText" pos="0 0" size="80 10" bgcolor="111111" opacity="0.5" halign="center" valign="center" z-index="0"/>
			<label z-index="1" pos="0 0" text="{{{Text_PressF3ToShowRules}}}" textcolor="FFF" textsize="3" textfont="BiryaniDemiBold" halign="center" valign="center2" textprefix="$s"/>
		</frame>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "MathLib" as ML

#Const C_Status_FindTeammate 0
#Const C_Status_SearchingTeammate 1
#Const C_Status_WaitingTeammate 2
#Const C_Status_TeamReady 3

#Const C_Action_None ""
#Const C_Action_FindTeammate "{{{Const::C_UIEvent_TeamSelection_FindTeammate}}}"
#Const C_Action_CancelSearch "{{{Const::C_UIEvent_TeamSelection_CancelSearch}}}"
#Const C_Action_CancelInvite "{{{Const::C_UIEvent_TeamSelection_CancelInvite}}}"

CTmMlPlayer GetOwner() {
	if (GUIPlayer != Null) return GUIPlayer;
	return InputPlayer;
}

Integer UpdatePager(CMlFrame _Frame_Pager, Integer _ItemsPerPage, Integer _ItemsCount, Integer _CurrentPage) {
	if (_ItemsPerPage <= 0) return 1;

	// Find page max
	declare PageMax = _ItemsCount / _ItemsPerPage;
	if (_ItemsCount % _ItemsPerPage != 0) PageMax += 1;
	declare CurrentPage = _CurrentPage;
	if (CurrentPage < 1) CurrentPage = 1;
	if (CurrentPage > PageMax) CurrentPage = PageMax;

	// Update pager UI
	if (_Frame_Pager != Null) {
		if (PageMax <= 1) {
			_Frame_Pager.Visible = False;
		} else {
			declare Label_Page <=> (_Frame_Pager.GetFirstChild("label-page") as CMlLabel);
			declare Button_PagePrev <=> (_Frame_Pager.GetFirstChild("button-page-prev") as CMlQuad);
			declare Button_PageNext <=> (_Frame_Pager.GetFirstChild("button-page-next") as CMlQuad);
			Label_Page.Value = CurrentPage^"/"^PageMax;
			if (CurrentPage <= 1) {
				Button_PagePrev.Substyle = "ArrowDisabled";
			} else {
				Button_PagePrev.Substyle = "ArrowPrev";
			}
			if (CurrentPage >= PageMax) {
				Button_PageNext.Substyle = "ArrowDisabled";
			} else {
				Button_PageNext.Substyle = "ArrowNext";
			}
			_Frame_Pager.Visible = True;
		}
	}

	return CurrentPage;
}

Void SetStatus(
	CMlFrame _Frame_Lobby,
	Integer _Status,
	Text _PlayerName
) {
	assert(_Frame_Lobby != Null, "The function need the lobby frame");

	declare Label_Info <=> (_Frame_Lobby.GetFirstChild("label-info") as CMlLabel);
	declare Button_Label <=> (_Frame_Lobby.GetFirstChild("button-label") as CMlLabel);
	declare Button_Action <=> (_Frame_Lobby.GetFirstChild("button-action") as CMlQuad);
	declare Frame_Spinner <=> (_Frame_Lobby.GetFirstChild("frame-spinner") as CMlFrame);
	declare Quad_Spinner <=> (Frame_Spinner.GetFirstChild("quad-spinner") as CMlQuad);

	declare Action for Button_Action = C_Action_None;
	declare HelpMessage = "";

	switch (_Status) {
		case C_Status_SearchingTeammate: {
			HelpMessage = TL::Compose("{{{Text_SearchingTeammate}}}", _PlayerName);
			Button_Label.Value = "{{{Text_CancelSearch}}}";
			Button_Action.Visible = True;
			Action = C_Action_CancelSearch;
			Frame_Spinner.Visible = True;
		}
		case C_Status_WaitingTeammate: {
			HelpMessage = TL::Compose("{{{Text_WaitingConfirmation}}}", _PlayerName);
			Button_Label.Value = "{{{Text_CancelInvite}}}";
			Button_Action.Visible = True;
			Action = C_Action_CancelInvite;
			Frame_Spinner.Visible = True;
		}
		/*case C_Status_TeamReady: {
			HelpMessage = TL::Compose("{{{Text_TeamReady}}}", _PlayerName);
			Button_Action.Value = "";
			Button_Action.Visible = False;
			Action = C_Action_None;
			Frame_Spinner.Visible = False;
		}*/
		//case C_Status_FindTeammate: {
		default: {
			Button_Label.Value = "{{{Text_FindTeammate}}}";
			Button_Action.Visible = True;
			Action = C_Action_FindTeammate;
			Frame_Spinner.Visible = False;
		}
	}

	Label_Info.Value = HelpMessage;
	declare SizeX = ML::Min(Label_Info.Size.X, Label_Info.ComputeWidth(HelpMessage, True));
	Frame_Spinner.RelativePosition_V3.X = (Quad_Spinner.Size.X * 0.5) + 1. + (SizeX * 0.5);
}

Void UpdatePlayerList(
	CMlFrame _Frame_ListPlayers,
	CMlFrame _Frame_Lobby,
	CMlLabel _FocusedBracket,
	Integer _Page,
	Ident[] _PlayerIds,
	Text[Text] _PlayerSelection,
	Text[] _PlayersInLobby,
	Boolean _SearchingTeammate
) {
	assert(_Frame_ListPlayers != Null, "The function need the frame containing the list of players");

	declare TeamIsReadyWith = "";
	declare WaitingConfirmationFrom = "";

	declare KeyShift = (_Page - 1) * _Frame_ListPlayers.Controls.count;
	foreach (Key => Control in _Frame_ListPlayers.Controls) {
		declare Frame_Player <=> (Control as CMlFrame);
		if (_PlayerIds.existskey(Key + KeyShift) && Players.existskey(_PlayerIds[Key + KeyShift])) {
			declare Player <=> Players[_PlayerIds[Key + KeyShift]];

			declare Label_Name <=> (Frame_Player.GetFirstChild("label-name") as CMlLabel);
			declare Button_Player <=> (Frame_Player.GetFirstChild("button-player") as CMlQuad);
			declare Frame_Status <=> (Frame_Player.GetFirstChild("frame-status") as CMlFrame);
			declare Quad_StatusColor <=> (Frame_Status.GetFirstChild("quad-status-color") as CMlQuad);
			declare Quad_StatusBlink <=> (Frame_Status.GetFirstChild("quad-status-blink") as CMlQuad);
			declare Quad_StatusIcon <=> (Frame_Status.GetFirstChild("quad-status-icon") as CMlQuad);
			declare Label_HasTeam <=> (Frame_Status.GetFirstChild("label-has-team") as CMlLabel);
			declare Quad_Underline <=> (Frame_Player.GetFirstChild("quad-underline") as CMlQuad);
			declare Label_Bracket <=> (Frame_Player.GetFirstChild("label-bracket") as CMlLabel);
			Label_Name.Value = Player.User.Name;
			Frame_Player.Visible = True;

			declare ISelectedThem = (
				!IsSpectatorClient &&
				_PlayerSelection.existskey(LocalUser.Login) &&
				_PlayerSelection[LocalUser.Login] == Player.User.Login
			);
			declare TheySelectedMe = (
				!IsSpectatorClient &&
				_PlayerSelection.existskey(Player.User.Login) &&
				_PlayerSelection[Player.User.Login] == LocalUser.Login
			);

			declare StatusColor for Label_Bracket = <1., 1., 1.>;

			// This player is already in a team
			// We form a team with this player
			if (!_PlayersInLobby.exists(Player.User.Login) || (ISelectedThem && TheySelectedMe)) {
				Quad_StatusColor.BgColor = {{{Color_HasTeam}}};
				Quad_StatusBlink.Visible = False;
				Quad_StatusIcon.Visible = False;
				Label_HasTeam.Visible = True;
				Frame_Status.Visible = True;
				Quad_Underline.BgColor = {{{Color_HasTeam}}};
				Quad_Underline.Visible = True;
				if (ISelectedThem && TheySelectedMe) TeamIsReadyWith = Player.User.Name;
				if (_FocusedBracket != Label_Bracket) Label_Bracket.TextColor = {{{Color_HasTeam}}};
				StatusColor = {{{Color_HasTeam}}};
				Button_Player.Visible = False;
				Label_Bracket.Visible = False;
			}
			// This player selected me as teammate
			else if (TheySelectedMe) {
				Quad_StatusColor.BgColor = {{{Color_InvitationReceived}}};
				Quad_StatusBlink.Visible = True;
				Quad_StatusIcon.ImageUrl = "{{{Img_InvitationReceived}}}";
				Quad_StatusIcon.Visible = True;
				Label_HasTeam.Visible = False;
				Frame_Status.Visible = True;
				Quad_Underline.BgColor = {{{Color_InvitationReceived}}};
				Quad_Underline.Visible = True;
				if (_FocusedBracket != Label_Bracket) Label_Bracket.TextColor = {{{Color_InvitationReceived}}};
				StatusColor = {{{Color_InvitationReceived}}};
				Button_Player.Visible = True;
				Label_Bracket.Visible = True;
			}
			// I selected this player as teammate
			else if (ISelectedThem) {
				Quad_StatusColor.BgColor = {{{Color_InvitationSent}}};
				Quad_StatusBlink.Visible = False;
				Quad_StatusIcon.ImageUrl = "{{{Img_InvitationSent}}}";
				Quad_StatusIcon.Visible = True;
				Label_HasTeam.Visible = False;
				Frame_Status.Visible = True;
				Quad_Underline.BgColor = {{{Color_InvitationSent}}};
				Quad_Underline.Visible = True;
				WaitingConfirmationFrom = Player.User.Name;
				if (_FocusedBracket != Label_Bracket) Label_Bracket.TextColor = {{{Color_InvitationSent}}};
				StatusColor = {{{Color_InvitationSent}}};
				Button_Player.Visible = False;
				Label_Bracket.Visible = False;
			}
			// This player does nothing special
			else {
				Quad_StatusBlink.Visible = False;
				Frame_Status.Visible = False;
				Quad_Underline.Visible = False;
				if (_FocusedBracket != Label_Bracket) Label_Bracket.TextColor = <1., 1., 1.>;
				StatusColor = <1., 1., 1.>;
				Button_Player.Visible = True;
				Label_Bracket.Visible = True;
			}

			// This player is already in a team
			Label_HasTeam.Visible = !_PlayersInLobby.exists(Player.User.Login);

			declare ChaseTeamSelection_Login for Button_Player = "";
			ChaseTeamSelection_Login = Player.User.Login;
		} else {
			Frame_Player.Visible = False;
		}
		
		if (TeamIsReadyWith != "") {
			SetStatus(_Frame_Lobby, C_Status_TeamReady, TeamIsReadyWith);
		} else if (WaitingConfirmationFrom != "") {
			SetStatus(_Frame_Lobby, C_Status_WaitingTeammate, WaitingConfirmationFrom);
		} else if (_SearchingTeammate) {
			SetStatus(_Frame_Lobby, C_Status_SearchingTeammate, "");
		} else {
			SetStatus(_Frame_Lobby, C_Status_FindTeammate, "");
		}
	}
}

// Sort the players that sent an invite first
Ident[] SortPlayers(Ident[] _PlayersIds, Text[Text] _PlayerSelection) {
	declare Ident[] SortedPlayers;
	declare Ident[] SortSecond;
	declare Ident[] SortThird;

	foreach (PlayerId in _PlayersIds) {
		if (Players.existskey(PlayerId)) {
			declare Player <=> Players[PlayerId];
			if (
				!IsSpectatorClient &&
				_PlayerSelection.existskey(Player.User.Login) &&
				_PlayerSelection[Player.User.Login] == LocalUser.Login
			) {
				SortedPlayers.add(PlayerId);
			} else if (
				!IsSpectatorClient &&
				_PlayerSelection.existskey(LocalUser.Login) &&
				_PlayerSelection[LocalUser.Login] == Player.User.Login
			) {
				SortSecond.add(PlayerId);
			} else {
				SortThird.add(PlayerId);
			} 
		}
	}

	foreach (PlayerId in SortSecond) {
		SortedPlayers.add(PlayerId);
	}
	foreach (PlayerId in SortThird) {
		SortedPlayers.add(PlayerId);
	}

	return SortedPlayers;
}

Integer GetInvitationReceivedNb(Ident[] _PlayersIds, Text[Text] _PlayerSelection) {
	if (IsSpectatorClient) return 0;

	declare Count = 0;
	foreach (PlayerId in _PlayersIds) {
		if (Players.existskey(PlayerId)) {
			declare Player <=> Players[PlayerId];
			if (
				_PlayerSelection.existskey(Player.User.Login) &&
				_PlayerSelection[Player.User.Login] == LocalUser.Login
			) {
				Count += 1;
			}
		}
	}

	return Count;
}

main() {
	declare Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
	declare Frame_TeamSelection <=> (Frame_Global.GetFirstChild("frame-team-selection") as CMlFrame);
	declare Label_Sort <=> (Frame_TeamSelection.GetFirstChild("label-sort") as CMlLabel);
	declare Frame_InvitesAlert <=> (Frame_TeamSelection.GetFirstChild("frame-invites-alert") as CMlFrame);
	declare Label_InvitesNb <=> (Frame_InvitesAlert.GetFirstChild("label-invites-nb") as CMlLabel);
	declare Frame_ListPlayers <=> (Frame_TeamSelection.GetFirstChild("frame-list-players") as CMlFrame);
	declare Frame_Pager <=> (Frame_TeamSelection.GetFirstChild("frame-pager") as CMlFrame);
	declare Frame_Lobby <=> (Frame_Global.GetFirstChild("frame-lobby") as CMlFrame);
	declare Frame_Spinner <=> (Frame_Lobby.GetFirstChild("frame-spinner") as CMlFrame);
	declare Quad_Spinner <=> (Frame_Lobby.GetFirstChild("quad-spinner") as CMlQuad);
	declare Quad_Spinner2 <=> (Frame_Lobby.GetFirstChild("quad-spinner-2") as CMlQuad);

	declare CMlQuad[] Quads_StatusBlink;
	foreach (Control in Frame_ListPlayers.Controls) {
		Quads_StatusBlink.add(((Control as CMlFrame).GetFirstChild("quad-status-blink") as CMlQuad));
	}

	declare netread Text[Text] Net_ChaseTeamSelection_PlayerSelection for Teams[0];
	declare netread Net_ChaseTeamSelection_PlayerSelectionUpdate for Teams[0] = -1;
	declare netread Text[] Net_ChaseTeamSelection_PlayersInLobby for Teams[0];
	declare netread Net_ChaseTeamSelection_PlayersInLobbyUpdate for Teams[0] = -1;

	declare CMlQuad[] BlinkingQuads;
	declare CMlLabel FocusedBracket;
	declare Ident[] PlayerList;
	declare PlayerListUpdate = False;
	declare Page = UpdatePager(Frame_Pager, Frame_ListPlayers.Controls.count, PlayerList.count, 1);
	declare PrevPlayerSelectionUpdate = -123;
	declare PrevVisible = Frame_Global.Visible;
	declare PrevIsSpectator = IsSpectatorClient;
	declare PrevUseRandomTeam = False;
	declare PrevPlayersInLobbyUpdate = -123;
	declare PrevIsSpectatorClient = False;

	while (True) {
		yield;

		declare Owner <=> GetOwner();
		if (Owner != Null) {
			declare netread Net_ChaseTeamSelection_UseRandomTeammate for Owner = False;
			if (PrevUseRandomTeam != Net_ChaseTeamSelection_UseRandomTeammate) {
				PrevUseRandomTeam = Net_ChaseTeamSelection_UseRandomTeammate;
				PlayerListUpdate = True;
			}

			declare netread Net_ChaseTeamSelection_IsEnabled for Owner = False;
			if (PrevVisible != Net_ChaseTeamSelection_IsEnabled || PrevIsSpectatorClient != IsSpectatorClient) {
				PrevVisible = Net_ChaseTeamSelection_IsEnabled;
				PrevIsSpectatorClient = IsSpectatorClient;
				Frame_Global.Visible = PrevVisible && !PrevIsSpectatorClient;
				if (!Frame_Global.Visible) {
					FocusedBracket = Null;
				}
			}
		}

		if (Frame_Global.Visible && Owner == Null) {
			Frame_Global.Visible = False;
			FocusedBracket = Null;
		}

		if (Frame_Global.Visible) {
			declare Ident[] PlayerIdsToRemove;
			foreach (PlayerId in PlayerList) {
				if (!Players.existskey(PlayerId) || Players[PlayerId].RequestsSpectate) {
					PlayerIdsToRemove.add(PlayerId);
				}
			}
			foreach (PlayerId in PlayerIdsToRemove) {
				declare Removed = PlayerList.remove(PlayerId);
				PlayerListUpdate = True;
			}
			foreach (Player in Players) {
				if (
					!Player.RequestsSpectate &&
					Player.User.Login != LocalUser.Login &&
					!PlayerList.exists(Player.Id)
				) {
					PlayerList.add(Player.Id);
					PlayerListUpdate = True;
				}
			}

			foreach (Event in PendingEvents) {
				switch (Event.Type) {
					case CMlScriptEvent::Type::MouseClick: {
						if (Event.ControlId == "button-player") {
							declare ChaseTeamSelection_Login for Event.Control = "";
							if (LocalUser.Login != ChaseTeamSelection_Login) {
								SendCustomEvent("{{{Const::C_UIEvent_TeamSelection_SelectPlayer}}}", [ChaseTeamSelection_Login]);
							}
						} else if (Event.ControlId == "button-page-next") {
							Page = UpdatePager(Frame_Pager, Frame_ListPlayers.Controls.count, PlayerList.count, Page + 1);
							PlayerListUpdate = True;
						} else if (Event.ControlId == "button-page-prev") {
							Page = UpdatePager(Frame_Pager, Frame_ListPlayers.Controls.count, PlayerList.count, Page - 1);
							PlayerListUpdate = True;
						} else if (Event.ControlId == "button-action") {
							declare Action for Event.Control = C_Action_None;
							SendCustomEvent(Action, Text[]);
						} else if (Event.ControlId == "button-sort" || Event.ControlId == "button-sort-bis") {
							PlayerList = SortPlayers(PlayerList, Net_ChaseTeamSelection_PlayerSelection);
							Page = UpdatePager(Frame_Pager, Frame_ListPlayers.Controls.count, PlayerList.count, 1);
							PlayerListUpdate = True;
						}
					}
					case CMlScriptEvent::Type::MouseOver: {
						if (Event.ControlId == "button-player") {
							if (FocusedBracket != Null) {
								declare StatusColor for FocusedBracket = <1., 1., 1.>;
								FocusedBracket.TextColor = StatusColor;
							}
							FocusedBracket <=> (Event.Control.Parent.GetFirstChild("label-bracket") as CMlLabel);
							FocusedBracket.TextColor = <0.1, 0.1, 0.1>;
						} else if (Event.ControlId == "button-sort") {
							Label_Sort.Visible = True;
						}
						else if (Event.ControlId == "button-action") {
							declare CMlQuad BoutonAction <=> (Event.Control as CMlQuad);
							BoutonAction.BgColor = {{{White}}};
						}
					}
					case CMlScriptEvent::Type::MouseOut: {
						if (Event.ControlId == "button-player") {
							if (FocusedBracket != Null) {
								declare StatusColor for FocusedBracket = <1., 1., 1.>;
								FocusedBracket.TextColor = StatusColor;
								FocusedBracket = Null;
							}
						} else if (Event.ControlId == "button-sort") {
							Label_Sort.Visible = False;
						}
						else if (Event.ControlId == "button-action") {
							declare CMlQuad BoutonAction <=> (Event.Control as CMlQuad);
							BoutonAction.BgColor = {{{Black}}};
						}
					}
				}
			}

			if (
				PlayerListUpdate ||
				PrevPlayerSelectionUpdate != Net_ChaseTeamSelection_PlayerSelectionUpdate ||
				PrevPlayersInLobbyUpdate != Net_ChaseTeamSelection_PlayersInLobbyUpdate ||
				PrevIsSpectator != IsSpectatorClient
			) {
				PlayerListUpdate = False;
				PrevPlayerSelectionUpdate = Net_ChaseTeamSelection_PlayerSelectionUpdate;
				PrevPlayersInLobbyUpdate = Net_ChaseTeamSelection_PlayersInLobbyUpdate;
				PrevIsSpectator = IsSpectatorClient;
				Page = UpdatePager(Frame_Pager, Frame_ListPlayers.Controls.count, PlayerList.count, Page);
				UpdatePlayerList(Frame_ListPlayers, Frame_Lobby, FocusedBracket, Page, PlayerList, Net_ChaseTeamSelection_PlayerSelection, Net_ChaseTeamSelection_PlayersInLobby, PrevUseRandomTeam);
				declare InvitesNb = GetInvitationReceivedNb(PlayerList, Net_ChaseTeamSelection_PlayerSelection);
				if (InvitesNb > 0) {
					Label_InvitesNb.Value = TL::ToText(InvitesNb);
					Frame_InvitesAlert.Visible = True;
				} else {
					Frame_InvitesAlert.Visible = False;
				}
			}

			foreach (Quad_StatusBlink in Quads_StatusBlink) {
				if (Quad_StatusBlink.Visible) {
					Quad_StatusBlink.Opacity = ML::Abs(ML::Cos(((Now % 1000) / 1000.) * ML::PI() * 2.));
				}
			}

			if (Frame_Spinner.Visible) {
				Quad_Spinner.RelativeRotation = ML::Mod((Quad_Spinner.RelativeRotation + (Period / 3.)), 0., 360.);
				Quad_Spinner2.RelativeRotation = Quad_Spinner.RelativeRotation;
			}
		}
	}
}
--></script>
</manialink>
""";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update library
Void Yield() {
	foreach (Event in PendingEvents) {
		if (Event.Type == CManiaAppPlaygroundEvent::Type::LayerCustomEvent) {
			if (
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_SelectPlayer ||
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_FindTeammate ||
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_CancelSearch ||
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_CancelInvite
			) {
				declare EventData = Text[];
				foreach (Value in Event.CustomEventData) EventData.add(Value);
				SendCustomEvent(Event.CustomEventType, EventData);
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();

	Layers::Create(C_Layer_TeamSelection, Private_GetTeamSelectionML());
}