/**
 * Chase checkpoint ranking UI
 */
#Const Version    "2018-07-04"
#Const ScriptName "ManiaApps/Nadeo/TrackMania/Chase/CheckpointRanking_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Enable or disable the display
 *	of the checkpoint ranking UI
 *
 *	@param	_Enable										True to enable
 *																		False to disable
 */
Void Enable(Boolean _Enabled, CTmPlayer _Player) {
	if (_Player == Null) return;
	declare netwrite Net_CheckpointRanking_IsEnabled for _Player = False;
	Net_CheckpointRanking_IsEnabled = _Enabled;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Send their checkpoint ranking to a
 *	player
 *
 *	@param	_Ranks										The rank of the players
 *	@param	_Names										The name of the players
 *	@param	_Times										The time of the players
 *	@param	_PlayerKey								The key of the updated player in the previous arrays
 *	@param	_Player										The player to update
 */
Void UpdateCheckpointRanking(Integer[] _Ranks, Text[] _Names, Integer[] _Times, Integer _PlayerKey, CTmPlayer _Player) {
	if (_Player == Null) return;
	
	declare netwrite Net_CheckpointRanking_Ranks for _Player = Integer[];
	declare netwrite Net_CheckpointRanking_Names for _Player = Text[];
	declare netwrite Net_CheckpointRanking_Times for _Player = Integer[];
	declare netwrite Net_CheckpointRanking_PlayerKey for _Player = -1;
	declare netwrite Net_CheckpointRanking_RankingUpdate for _Player = -1;
	Net_CheckpointRanking_Ranks = _Ranks;
	Net_CheckpointRanking_Names = _Names;
	Net_CheckpointRanking_Times = _Times;
	Net_CheckpointRanking_PlayerKey = _PlayerKey;
	Net_CheckpointRanking_RankingUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Reset tje checkpoint ranking of a
 *	player
 *
 *	@param	_Player										The player to reset
 */
Void ResetCheckpointRanking(CTmPlayer _Player) {
	UpdateCheckpointRanking(Integer[], Text[], Integer[], -1, _Player);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player state when
 *	they join the server
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CTmPlayer _Player) {
	Enable(False, _Player);
	ResetCheckpointRanking(_Player);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}