/**
 * Chase medal UI
 */
#Const Version    "2018-06-25"
#Const ScriptName "ManiaApps/Nadeo/TrackMania/Chase/Medal_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/TrackMania/Chase/Constants2.Script.txt" as Const

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Enable or disable the unlock of 
 *	medals below the one that was just
 *	unlocked.
 *	eg: winning the gold medal also
 *	give the silver and bronze medal
 */
Void UnlockLesserMedal(Boolean _Enabled) {
	declare netwrite Net_ChaseMedal_UnlockLesserMedal for Teams[0] = False;
	Net_ChaseMedal_UnlockLesserMedal = _Enabled;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Display the medal awarded for the race
 *
 *	@param	_Duration								The display duration of the pop up
 *	@param	_Medal									The medal (Const::C_Medal_XXX)
 *	@param	_Time										The race time
 *	@param	_TimeDiff								The time difference with the best race
 *	@param	_Player									The player seeing the pop up
 */
Void PopRaceMedal(Integer _Duration, Integer _Medal, Integer _Time, Integer _TimeDiff, CTmPlayer _Player) {
	if (_Player == Null) return;
	
	declare netwrite Net_ChaseMedal_RaceMedal for _Player = Const::C_Medal_Gold;
	declare netwrite Net_ChaseMedal_RaceTime for _Player = -1;
	declare netwrite Net_ChaseMedal_RaceTimeDiff for _Player = -1;
	declare netwrite Net_ChaseMedal_RaceMedalHideTime for _Player = -1;
	Net_ChaseMedal_RaceMedal = _Medal;
	Net_ChaseMedal_RaceTime = _Time;
	Net_ChaseMedal_RaceTimeDiff = _TimeDiff;
	Net_ChaseMedal_RaceMedalHideTime = Now + _Duration;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Cancel the display of the race medal
 *
 *	@param	_Player										The player receiving the cancelation
 */
Void CancelRaceMedal(CTmPlayer _Player) {
	if (_Player == Null) return;
	
	declare netwrite Net_ChaseMedal_RaceMedalHideTime for _Player = -1;
	Net_ChaseMedal_RaceMedalHideTime = -1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Display the medal counter
 *
 *	@param	_Duration									The display duration of the pop up
 *	@param	_Medal										Display the +1 for this medal
 *	@param	_Medals										The numbers of medals [Const::C_Medal_XXX => NbOfMedals]
 *	@param	_Player										The player seeing the pop up
 */
Void PopMedalCounter(Integer _Duration, Integer _Medal, Integer[Integer] _Medals, CTmPlayer _Player) {
	if (_Player == Null) return;
	
	declare netwrite Net_ChaseMedal_MedalCounterMedalUnlock for _Player = Const::C_Medal_None;
	declare netwrite Net_ChaseMedal_MedalCounterMedals for _Player = Integer[Integer];
	declare netwrite Net_ChaseMedal_MedalCounterHideTime for _Player = -1;
	Net_ChaseMedal_MedalCounterMedalUnlock = _Medal;
	Net_ChaseMedal_MedalCounterMedals = _Medals;
	Net_ChaseMedal_MedalCounterHideTime = Now + _Duration;
}
Void PopMedalCounter(Integer _Duration, Integer[Integer] _Medals, CTmPlayer _Player) {
	PopMedalCounter(_Duration, Const::C_Medal_None, _Medals, _Player);
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Cancel the display of the medal counter
 *
 *	@param	_Player										The player receiving the cancelation
 */
Void CancelMedalCounter(CTmPlayer _Player) {
	if (_Player == Null) return;
	
	declare netwrite Net_ChaseMedal_MedalCounterHideTime for _Player = -1;
	Net_ChaseMedal_MedalCounterHideTime = -1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize the given player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CTmPlayer _Player) {
	CancelRaceMedal(_Player);
	CancelMedalCounter(_Player);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	UnlockLesserMedal(False);
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}