/**
 * Chase team confirm UI
 */
#Const Version    "2018-06-27"
#Const ScriptName "ManiaApps/Nadeo/TrackMania/TeamConfirm_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "ManiaApps/Nadeo/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/TrackMania/Chase/Constants2.Script.txt" as Const

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Layer_TeamConfirm "ChaseAttack_TeamConfirm"
#Const C_VoteDurationRatio 0.6 ///< Ratio between the vote and the result duration. eg: 10000ms display, 6000ms for the vote, 4000ms for the result

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Private
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the manialink of the Chase UI
 *
 *  @return                           Chase UI manialink
 */
Text Private_GetTeamConfirmML() {
	//L16N [Chase Attack] Message displayed at the end of the map. The player can choose to stay with its current teammate or leave them.
	declare Text_StayTogether = _("Stay as team?");
	declare Text_Yes = _("Yes");
	declare Text_No = _("No");
	//L16N [Chase Attack] Message displayed if all players of the team confirm that they want to stay in the team.
	declare Text_TeamConfirmed = _("Team confirmed");
	//L16N [Chase Attack] Message displayed if one player of the team dedided to leave.
	declare Text_TeamDisdanded = _("Team disbanded");
	declare Img_FootLine = "file://Media/Manialinks/Nadeo/TrackMania/Ingame/FootLine_RoundRanking.dds";

	declare GaugeSizeX = 70.;

	return """
<manialink version="3" name="{{{C_Layer_TeamConfirm}}}">
<stylesheet>
  <style class="text-default" textfont="Oswald" textcolor="ffffff" textsize="3" textemboss="1" />
  <style class="text-button" textfont="BiryaniDemiBold" textcolor="ffffff" textsize="3" textemboss="1" />
</stylesheet>
<frame id="frame-global">
	<frame pos="-158 25" id="frame-team-confirm">
		<frame size="70 27" id="frame-vote">
			<frame pos="-71 0" id="frame-vote-slide">
				<frame pos="0 -2" z-index="0">
			    <quad pos="0 -3" z-index="0" size="70 1" valign="center" opacity="0.3" image="{{{Img_FootLine}}}" />
			    <label z-index="1" size="70 5" valign="center2" text="{{{Text_StayTogether}}}" class="text-default" />
			  </frame>
			  <frame pos="0 -6.5" z-index="1">
			  	<quad z-index="0" size="{{{GaugeSizeX}}} 4" bgcolor="111111" />
			  	<quad z-index="1" size="{{{GaugeSizeX}}} 4" bgcolor="eeeeee" id="gauge-remaining-time" />
			  </frame>
				<frame pos="0 -15" z-index="2" id="frame-buttons">
					<quad z-index="1" size="70 6" valign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1" />
					<quad z-index="2" size="70 6" valign="center" bgcolor="111111" opacity="0.5" id="quad-yes-selected" />
					<quad z-index="2" size="70 6" valign="center" bgcolor="ffffff" hidden="1" id="quad-yes-blink" />
					<quad z-index="3" size="70 6" valign="center" bgcolor="11111100" bgcolorfocus="eeeeee" opacity="0.3" scriptevents="1" id="button-yes" />
					<label pos="1 0" z-index="4" size="68 6" valign="center2" text="{{{Text_Yes}}}" class="text-button" />
					<quad pos="0 -7" z-index="1" size="70 6" valign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1" />
					<quad pos="0 -7" z-index="2" size="70 6" valign="center" bgcolor="111111" opacity="0.5" id="quad-no-selected" />
					<quad pos="0 -7" z-index="2" size="70 6" valign="center" bgcolor="ffffff" opacity="0.5" id="quad-no-blink" />
					<quad pos="0 -7" z-index="3" size="70 6" valign="center" bgcolor="11111100" bgcolorfocus="eeeeee" opacity="0.3" scriptevents="1" id="button-no" />
					<label pos="1 -7" z-index="4" size="70 6" valign="center2" text="{{{Text_No}}}" class="text-button" />
			    <quad pos="0 -11.5" z-index="0" size="70 1" valign="center" opacity="0.3" image="{{{Img_FootLine}}}" />
				</frame>
			</frame>
		</frame>
		<frame pos="0 -28" z-index="0" size="70 12" id="frame-result" >
			<frame pos="-71 0" id="frame-result-slide">
				<quad z-index="1" size="70 12" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1" />
				<quad z-index="2" size="70 12" bgcolor="111111" opacity="0.5" />
				<label pos="1 -3" z-index="3" size="57 6" valign="center2" class="text-default" id="label-teammate-name" />
				<label pos="69 -3" z-index="3" size="10 6" halign="right" valign="center2" class="text-default" id="label-teammate-selection" />
				<label pos="1 -9" z-index="3" size="57 6" valign="center2" class="text-default" id="label-result" />
 			</frame>
	  </frame>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "MathLib" as ML

CTmMlPlayer GetOwner() {
	if (GUIPlayer != Null) return GUIPlayer;
	return InputPlayer;
}

Integer Select(CMlFrame _Frame_Buttons, Integer _Selection) {
	assert(_Frame_Buttons != Null, "You need to send the frame containing the buttons");

	declare Quad_YesSelected <=> (_Frame_Buttons.GetFirstChild("quad-yes-selected") as CMlQuad);
	declare Quad_BlinkYes <=> (_Frame_Buttons.GetFirstChild("quad-yes-blink") as CMlQuad);
	declare Quad_NoSelected <=> (_Frame_Buttons.GetFirstChild("quad-no-selected") as CMlQuad);
	declare Quad_BlinkNo <=> (_Frame_Buttons.GetFirstChild("quad-no-blink") as CMlQuad);

	if (_Selection == {{{Const::C_StayAsTeam_Yes}}}) {
		Quad_YesSelected.BgColor = TL::ToColor("{{{Const::C_TextColor_Yellow}}}");
		Quad_BlinkYes.Visible = True;
		Quad_NoSelected.BgColor = TL::ToColor("111111");
		Quad_BlinkNo.Visible = False;
	} else {
		Quad_YesSelected.BgColor = TL::ToColor("111111");
		Quad_BlinkYes.Visible = False;
		Quad_NoSelected.BgColor = TL::ToColor("{{{Const::C_TextColor_Yellow}}}");
		Quad_BlinkNo.Visible = True;
	}

	return _Selection;
}

Void EnableButtons(CMlFrame _Frame_Buttons, Boolean _Enabled) {
	assert(_Frame_Buttons != Null, "You need to send the frame containing the buttons");

	declare Button_Yes <=> (_Frame_Buttons.GetFirstChild("button-yes") as CMlQuad);
	declare Button_No <=> (_Frame_Buttons.GetFirstChild("button-no") as CMlQuad);
	Button_Yes.Visible = _Enabled;
	Button_No.Visible = _Enabled;

	if (!_Enabled) {
		declare Quad_BlinkYes <=> (_Frame_Buttons.GetFirstChild("quad-yes-blink") as CMlQuad);
		declare Quad_BlinkNo <=> (_Frame_Buttons.GetFirstChild("quad-no-blink") as CMlQuad);
		Quad_BlinkYes.Visible = False;
		Quad_BlinkNo.Visible = False;
	}
}

Void SetResult(CMlFrame _Frame_Result, Integer _MySelection, Integer _TeammateSelection, Text _TeammateName) {
	assert(_Frame_Result != Null, "You need to send the frame containing the result");

	declare Frame_ResultSlide <=> (_Frame_Result.GetFirstChild("frame-result-slide") as CMlFrame);
	declare Label_TeammateName <=> (_Frame_Result.GetFirstChild("label-teammate-name") as CMlLabel);
	declare Label_TeammateSelection <=> (_Frame_Result.GetFirstChild("label-teammate-selection") as CMlLabel);
	declare Label_Result <=> (_Frame_Result.GetFirstChild("label-result") as CMlLabel);

	Label_TeammateName.Value = _TeammateName;
	if (_TeammateSelection == {{{Const::C_StayAsTeam_No}}}) {
		Label_TeammateSelection.Value = "{{{Text_No}}}";
	} else {
		Label_TeammateSelection.Value = "{{{Text_Yes}}}";
	}
	if (_TeammateSelection == {{{Const::C_StayAsTeam_No}}} || _MySelection == {{{Const::C_StayAsTeam_No}}}) {
		Label_Result.Value = "{{{Text_TeamDisdanded}}}";
	} else {
		Label_Result.Value = "{{{Text_TeamConfirmed}}}";
	}

	if (_TeammateSelection == {{{Const::C_StayAsTeam_No}}} || _TeammateSelection == {{{Const::C_StayAsTeam_Yes}}}) {
		AnimMgr.Add(Frame_ResultSlide, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(Frame_ResultSlide, "<frame pos=\"-71 0\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

main() {
	declare Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
	declare Frame_TeamConfirm <=> (Frame_Global.GetFirstChild("frame-team-confirm") as CMlFrame);
	declare Frame_Vote <=> (Frame_Global.GetFirstChild("frame-vote") as CMlFrame);
	declare Frame_VoteSlide <=> (Frame_Vote.GetFirstChild("frame-vote-slide") as CMlFrame);
	declare Gauge_RemainingTime <=> (Frame_Vote.GetFirstChild("gauge-remaining-time") as CMlQuad);
	declare Frame_Buttons <=> (Frame_Vote.GetFirstChild("frame-buttons") as CMlFrame);
	declare Quad_BlinkYes <=> (Frame_Buttons.GetFirstChild("quad-yes-blink") as CMlQuad);
	declare Quad_BlinkNo <=> (Frame_Buttons.GetFirstChild("quad-no-blink") as CMlQuad);
	declare Frame_Result <=> (Frame_TeamConfirm.GetFirstChild("frame-result") as CMlFrame);
	declare Frame_ResultSlide <=> (Frame_Result.GetFirstChild("frame-result-slide") as CMlFrame);

	declare netread Net_ChaseTeamConfirm_HideTime for Teams[0] = -1;
	declare netread Net_ChaseTeamConfirm_Duration for Teams[0] = -1;

	declare IsVisible = False;
	declare VoteEndTime = -1;
	declare VoteDuration = -1;
	declare Selection = Select(Frame_Buttons, {{{Const::C_StayAsTeam_Yes}}});

	declare PrevHideTime = -123;
	declare PrevDuration = -123;
	declare PrevTeammateSelection = {{{Const::C_StayAsTeam_None}}};
	declare PrevHasTeammate = False;

	while (True) {
		yield;

		declare Owner <=> GetOwner();
		if (Owner != Null) {
			declare netread Net_ChaseTeamConfirm_HasTeammate for Owner = False;
			if (PrevHasTeammate != Net_ChaseTeamConfirm_HasTeammate) {
				PrevHasTeammate = Net_ChaseTeamConfirm_HasTeammate;
				PrevHideTime = -123;
			}
		}

		if (PrevHideTime != Net_ChaseTeamConfirm_HideTime || PrevDuration != Net_ChaseTeamConfirm_Duration) {
			PrevHideTime = Net_ChaseTeamConfirm_HideTime;
			PrevDuration = Net_ChaseTeamConfirm_Duration;
			
			if (PrevHideTime > GameTime && PrevDuration > 0 && PrevHasTeammate) {
				VoteDuration = ML::NearestInteger(PrevDuration * {{{C_VoteDurationRatio}}});
				VoteEndTime = PrevHideTime - PrevDuration + VoteDuration;
				Selection = Select(Frame_Buttons, {{{Const::C_StayAsTeam_Yes}}}); //< Select "Yes" by default
				EnableButtons(Frame_Buttons, True);
				IsVisible = True;
				Frame_ResultSlide.RelativePosition_V3.X = -71.;
				Frame_ResultSlide.Visible = False;
				AnimMgr.Add(Frame_VoteSlide, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				IsVisible = False;
				AnimMgr.Add(Frame_ResultSlide, "<frame pos=\"-71 0\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Frame_VoteSlide, "<frame pos=\"-71 0\" hidden=\"1\" />", Now + 125, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}

		if (IsVisible && GameTime >= PrevHideTime) {
			IsVisible = False;
			AnimMgr.Add(Frame_ResultSlide, "<frame pos=\"-71 0\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(Frame_VoteSlide, "<frame pos=\"-71 0\" hidden=\"1\" />", Now + 125, 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}

		if (IsVisible) {
			if (VoteEndTime >= 0) {
				if (VoteEndTime > GameTime) {
					// Gauge animation
					declare RemainingTime = VoteEndTime - GameTime;
					declare Ratio = 0.;
					if (VoteDuration > 0) Ratio = RemainingTime / (VoteDuration * 1.);
					Gauge_RemainingTime.Size.X = {{{GaugeSizeX}}} * Ratio;
					Gauge_RemainingTime.Opacity = 0.4 + (0.6 * ML::Abs(ML::Cos(((Now % 2000) / 2000.) * ML::PI() * 2.)));
					// Button blink
					if (Quad_BlinkYes.Visible) Quad_BlinkYes.Opacity = ML::Abs(ML::Cos(((Now % 2000) / 2000.) * ML::PI() * 2.));
					if (Quad_BlinkNo.Visible) Quad_BlinkNo.Opacity = ML::Abs(ML::Cos(((Now % 2000) / 2000.) * ML::PI() * 2.));
				} else {
					// Stop vote
					VoteEndTime = -1;
					VoteDuration = -1;
					Gauge_RemainingTime.Size.X = 0.;
					EnableButtons(Frame_Buttons, False);
					SendCustomEvent("{{{Const::C_UIEvent_TeamConfirm_Selection}}}", [""^Selection]);
				}
			} else {
				// Display result
				if (Owner != Null) {
					declare netread Net_ChaseTeamConfirm_TeammateSelection for Owner = {{{Const::C_StayAsTeam_None}}};
					if (PrevTeammateSelection != Net_ChaseTeamConfirm_TeammateSelection) {
						PrevTeammateSelection = Net_ChaseTeamConfirm_TeammateSelection;
						declare netread Net_ChaseTeamConfirm_TeammateName for Owner = "";
						SetResult(Frame_Result, Selection, PrevTeammateSelection, Net_ChaseTeamConfirm_TeammateName);
					}
				}
			}

			foreach (Event in Input.PendingEvents) {
				switch (Event.Type) {
					case CInputEvent::EType::PadButtonPress: {
						if (Event.Button == CInputEvent::EButton::Up || Event.Button == CInputEvent::EButton::LeftStick_Up) {
							Selection = Select(Frame_Buttons, {{{Const::C_StayAsTeam_Yes}}});
						} else if (Event.Button == CInputEvent::EButton::Down || Event.Button == CInputEvent::EButton::LeftStick_Down) {
							Selection = Select(Frame_Buttons, {{{Const::C_StayAsTeam_No}}});
						}
					}
				}
			}

			foreach (Event in PendingEvents) {
				switch (Event.Type) {
					case CMlScriptEvent::Type::MouseClick: {
						if (Event.ControlId == "button-no") {
							Selection = Select(Frame_Buttons, {{{Const::C_StayAsTeam_No}}});
						} else if (Event.ControlId == "button-yes") {
							Selection = Select(Frame_Buttons, {{{Const::C_StayAsTeam_Yes}}});
						}
					}
				}
			}
		}
	}
}
--></script>
</manialink>
""";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update library
Void Yield() {
	foreach (Event in PendingEvents) {
		if (Event.Type == CManiaAppPlaygroundEvent::Type::LayerCustomEvent) {
			if (
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_LeaveTeam ||
				Event.CustomEventType == Const::C_UIEvent_TeamConfirm_Selection
			) {
				declare EventData = Text[];
				foreach (Value in Event.CustomEventData) EventData.add(Value);
				SendCustomEvent(Event.CustomEventType, EventData);
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();

	Layers::Create(C_Layer_TeamConfirm, Private_GetTeamConfirmML());
}