/**
 * Chase relay UI
 */
#Const Version    "2018-06-27"
#Const ScriptName "ManiaApps/Nadeo/TrackMania/Chase/Relay_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "ManiaApps/Nadeo/Layers.Script.txt" as Layers

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Layer_Relay "ChaseAttack_Relay"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Private
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the manialink of the Chase UI
 *
 *  @return                           Chase UI manialink
 */
Text Private_GetRelayML() {
	declare Text_RelayFailed = _("|Chase mode|Relay failed");
	declare Text_WaitForTeammates = _("|Chase mode|Wait for your teammates");
	
	declare WidthMax = 100.;

	return """
<manialink version="3" name="{{{C_Layer_Relay}}}">
<stylesheet>
  <style class="text-default" textfont="Oswald" textcolor="ffffff" textsize="3" textemboss="1" />
</stylesheet>
<frame hidden="1" id="frame-global">
	<frame pos="0 0" id="frame-relay" halign="center">
		<label id="label-relay-failed" size="{{{WidthMax}}} 6" halign="center" textsize="8" textcolor="FF0000" class="text-default" text="{{{Text_RelayFailed}}}" />
		<frame pos="0 -2">
			<quad id="label-underline" pos="0 -8.5" z-index="1" size="{{{WidthMax}}} 0.666" bgcolor="FF0000" halign="center" valign="center"/>
			<quad id="label-underunderline" pos="0 -9.333" z-index="1" size="10 1" bgcolor="FF0000" halign="right" valign="center"/>
		</frame>
		<label pos="0 -12.5" size="{{{WidthMax}}} 6" halign="center" textsize="8" textcolor="FF0000" text="{{{Text_WaitForTeammates}}}" class="text-default" id="label-wait-for-teammates" />
	</frame>
</frame>
<script><!--
#Include "MathLib" as ML

CTmMlPlayer GetOwner() {
  if (GUIPlayer != Null) return GUIPlayer;
  return InputPlayer;
}

main() {
	declare Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
	declare Frame_Relay <=> (Frame_Global.GetFirstChild("frame-relay") as CMlFrame);
	declare Label_RelayFailed <=> (Frame_Relay.GetFirstChild("label-relay-failed") as CMlLabel);
	declare Label_WaitForTeammates <=> (Frame_Relay.GetFirstChild("label-wait-for-teammates") as CMlLabel);
	declare Label_Underline <=> (Frame_Relay.GetFirstChild("label-underline") as CMlLabel);
	declare Label_UnderUnderline <=> (Frame_Relay.GetFirstChild("label-underunderline") as CMlLabel);

	Label_Underline.Size.X = ML::Min({{{WidthMax}}}, Label_RelayFailed.ComputeWidth(Label_RelayFailed.Value, True));
	Label_UnderUnderline.RelativePosition_V3.X = Label_Underline.Size.X * 0.5;

	declare PrevHideTime = -123;
	while (True) {
		yield;

		declare Owner <=> GetOwner();
		if (Owner != Null) {
			declare netread Net_ChaseAttack_Relay_HideTime for Owner = -1;
			if (PrevHideTime != Net_ChaseAttack_Relay_HideTime) {
				PrevHideTime = Net_ChaseAttack_Relay_HideTime;

				if (PrevHideTime > GameTime) {
					declare netread Net_ChaseAttack_Relay_DisplayWaitForTeammates for Owner = False;
					Label_WaitForTeammates.Visible = Net_ChaseAttack_Relay_DisplayWaitForTeammates;
					Frame_Global.Visible = True;
				}
			}
		}

		if (Frame_Global.Visible && GameTime >= PrevHideTime) {
			Frame_Global.Visible = False;
		}
	}
}
--></script>
</manialink>
""";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();

	Layers::Create(C_Layer_Relay, Private_GetRelayML());
}