/**
 *	Exp Upgrades
 *
 *	Manage upgrades effects
 */
#Const Version    "2017-02-14"
#Const ScriptName "Libs/Nadeo/ShootMania/Exp/Upgrades.Script.txt"

// ---------------------------------- //
// Libraries
// ---------------------------------- //
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/Log.Script.txt" as Log
#Include "Libs/Nadeo/ShootMania/Attributes.Script.txt" as Attributes
#Include "Libs/Nadeo/ShootMania/Exp/Utils.Script.txt" as Utils
#Include "Libs/Nadeo/ShootMania/Exp/Store.Script.txt" as Store

// ---------------------------------- //
// Constants
// ---------------------------------- //
// Upgrades
#Const C_ActionPath						"Nadeo/ShootMania/Exp/"
#Const C_Action_ArmorMax				"Armor.Action.Gbx"
#Const C_Action_CaptureSpeed		"CaptureSpeed.Action.Gbx"
#Const C_Action_Stamina				"Stamina.Action.Gbx"
#Const C_Action_RocketAmmo			"RocketAmmo.Action.Gbx"
#Const C_Action_RocketAmmoGain	"RocketAmmoGain.Action.Gbx"
#Const C_Action_LaserAmmo			"LaserAmmo.Action.Gbx"
#Const C_Action_NucleusAmmo		"NucleusAmmo.Action.Gbx"
#Const C_Action_ArrowAmmo			"ArrowAmmo.Action.Gbx"
// Actions effects
#Const C_ActionEffect_ArmorMax [ //< Bonus
	1 => 100.,
	2 => 200.,
	3 => 300.,
	4 => 500.,
	5 => 700.
]
#Const C_ActionEffect_CaptureSpeed [ //< Bonus
	1 => 1.,
	2 => 2.,
	3 => 3.,
	4 => 4.,
	5 => 5.
]
#Const C_ActionEffect_Stamina [ //< Bonus
	1 => 0.50,
	2 => 0.75,
	3 => 1.0,
	4 => 1.50,
	5 => 2.0
]
#Const C_ActionEffect_RocketAmmo [ //< Bonus
	1 => 2.,
	2 => 4.,
	3 => 6.,
	4 => 8.,
	5 => 10.
]
#Const C_ActionEffect_RocketAmmoGain [ //< Bonus
	1 => 0.60,
	2 => 0.70,
	3 => 0.80,
	4 => 1.10,
	5 => 1.20
]
#Const C_ActionEffect_LaserAmmo [ //< Bonus
	1 => 1.,
	2 => 2.,
	3 => 3.
]
#Const C_ActionEffect_NucleusAmmo [ //< Bonus
	1 => 1.,
	2 => 2.,
	3 => 3.
]
#Const C_ActionEffect_ArrowAmmo [ //< Bonus
	1 => 1.,
	2 => 2.,
	3 => 3.
]
#Const C_Effect_ArmorMax				"Exp_Action_ArmorMax"
#Const C_Effect_CaptureSpeed		"Exp_Action_CaptureSpeed"
#Const C_Effect_Stamina				"Exp_Action_Stamina"
#Const C_Effect_RocketAmmo			"Exp_Action_RocketAmmo"
#Const C_Effect_RocketAmmoGain	"Exp_Action_RocketAmmoGain"
#Const C_Effect_LaserAmmo			"Exp_Action_LaserAmmo"
#Const C_Effect_NucleusAmmo		"Exp_Action_NucleusAmmo"
#Const C_Effect_ArrowAmmo			"Exp_Action_ArrowAmmo"

// Skills
#Const C_SkillPath						"Nadeo/ShootMania/Exp/Skills/"
#Const C_Skill_ArrowExpert		"ArrowExpert.Action.Gbx"
#Const C_Skill_LaserExpert		"LaserExpert.Action.Gbx"
#Const C_Skill_NucleusExpert	"NucleusExpert.Action.Gbx"
#Const C_Skill_ArmorExpert		"ArmorExpert.Action.Gbx"
#Const C_Skill_Missile				"Locks/Missile.Action.Gbx"
#Const C_Skill_Shield				"Locks/Shield.Action.Gbx"
// Skills effects
#Const C_SkillEffect_ArrowExpert [ //< Bonus
	1 => 1.,
	2 => 3.,
	3 => 6.
]
#Const C_SkillEffect_LaserExpert [ //< Bonus
	1 => 1.,
	2 => 2.,
	3 => 3.
]
#Const C_SkillEffect_NucleusExpert [ //< Bonus
	1 => 1.,
	2 => 2.,
	3 => 4.
]
#Const C_SkillEffect_ArmorExpert [ // Bonus
	1 => 750.,
	2 => 1300.
]
#Const C_SkillEffect_Missile [ //< Bonus
	1 => 0.,
	2 => 4.,
	3 => 8.
]
#Const C_SkillEffect_Shield [ //< Bonus
	1 => 0.,
	2 => 400.,
	3 => 500.
]
#Const C_Effect_ArrowExpert		"Exp_Skill_ArrowExpert"
#Const C_Effect_LaserExpert		"Exp_Skill_LaserExpert"
#Const C_Effect_NucleusExpert	"Exp_Skill_NucleusExpert"
#Const C_Effect_ArmorExpert		"Exp_Skill_ArmorExpert"
#Const C_Effect_Missile				"Exp_Skill_Missile"
#Const C_Effect_Shield					"Exp_Skill_Shield"

// Items
#Const C_ItemPath				"Nadeo/ShootMania/Exp/"
#Const C_Item_Missile	"Missile.Item.Gbx"
#Const C_Item_Shield		"Shield.Item.Gbx"
// Items effects
#Const C_Effect_ActiveMissile	"Exp_Item_Missile"
#Const C_Effect_ActiveShield		"Exp_Item_Shield"

#Const C_Effect_WeaponPad			"Exp_WeaponPad"
#Const C_AutoSwitchWeapon True ///< Allow players to use map's weapons
#Const C_DefaultWeapon CSmMode::EWeapon::Rocket ///< Weapon to give when active skill weapon ammo are deplated
// Actions
#Const C_LoadedActionPath "Nadeo/ShootMania/Exp/"
#Const C_LoadedAction_Shield "ShieldAlways.Action.Gbx"
#Const C_LoadedAction_ShieldRemover "ShieldRemover.Action.Gbx"
#Const C_Slots_Shield CSmMode::EActionSlot::Slot_H

// ---------------------------------- //
// Globales
// ---------------------------------- //
declare Ident G_ActionId_Shield; ///< Id of the shield action
declare Ident G_ActionId_ShieldRemover; ///< Id of the shield remover action

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Private
// ---------------------------------- //
// ---------------------------------- //
/** Get the value assigned to a given level
 *
 *	@param	_Values										The list of values to search in
 *	@param	_Level										The level to search for
 *
 *	@return														The value found
 */
Real Private_GetValueForLevel(Real[Integer] _Values, Integer _Level) {
	if (_Values.count <= 0) return 0.;
	
	// Find the nearest value
	if (!_Values.existskey(_Level)) {
		declare Result = 0.;
		declare Default = True;
		foreach (Level => Value in _Values) {
			if (Default) {
				Result = Value;
				Default = False;
			} else if (Level <= _Level) {
				Result = Value;
			}
		}
		return Result;
	} else {
		return _Values[_Level];
	}
	
	return 0.;
}

// ---------------------------------- //
/** Set a player's weapon
 *
 *	@param	_Player										The player to update
 *	@param	_Weapon										The weapon to assign
 *	@param	_AutoSwitchWeapon					Auto switch weapon
 */
Void Private_Assign(CSmPlayer _Player, CSmMode::EWeapon _Weapon, Boolean _AutoSwitchWeapon) {
	SetPlayerWeapon(_Player, _Weapon, _AutoSwitchWeapon);
	
	declare WeaponNum = GetWeaponNum(_Weapon);
	declare LibExpUpgrades_AssignedWeaponNum for _Player = -1;
	LibExpUpgrades_AssignedWeaponNum = WeaponNum;
}

// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/** Return the version number of the script
 *
 *  @return   The version number of the script
 */
Text GetScriptVersion() {
  return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *  @return   The name of the script
 */
Text GetScriptName() {
  return ScriptName;
}

// ---------------------------------- //
/// Load fun actions
Void LoadActions() {
	G_ActionId_Shield = ActionList_Add(C_LoadedAction_Shield);
	G_ActionId_ShieldRemover = ActionList_Add(C_LoadedActionPath^C_LoadedAction_ShieldRemover);
}

// ---------------------------------- //
/** Set the default weapon of a player
 *	This is the weapon that will be equipped
 *	once an active skill weapon ammo is
 *	depleted
 *
 *	@param	_Player										The player to update
 *	@param	_Weapon										The weapon to use
 */
Void SetDefaultWeapon(CSmPlayer _Player, CSmMode::EWeapon _Weapon, Boolean _AutoSwitchWeapon) {
	if (_Player == Null) return;
	
	declare LibExpUpgrades_DefaultWeapon for _Player = C_DefaultWeapon;
	declare LibExpUpgrades_DefaultAutoSwitchWeapon for _Player = C_AutoSwitchWeapon;
	LibExpUpgrades_DefaultWeapon = _Weapon;
	LibExpUpgrades_DefaultAutoSwitchWeapon = _AutoSwitchWeapon;
}

// ---------------------------------- //
/** Get the store url of an upgrade
 *
 *	@param	_Upgrade									The upgrade to check
 *
 *	@return														The store url of the upgrade
 */
Text GetStoreUrl(Text _Upgrade) {
	return """\Actions\{{{TL::Replace(_Upgrade, "/", "\\")}}}""";
}

// ---------------------------------- //
/** Get the armor expert value for a
 *	given player
 *
 *	@param	_Player										The player to check
 *
 *	@return														The armor expert value
 */
Real GetArmorExpertValue(CSmPlayer _Player) {
	if (_Player == Null) return 0.;
	declare LibExpUpgrades_ArmorExpertValue for _Player = 0.;
	return LibExpUpgrades_ArmorExpertValue;
}

// ---------------------------------- //
/** Apply the effects of a list of
 *	actions to a player
 *
 *	@param	_Player										The player receiving the effects
 *	@param	_Actions									The actions to apply
 */
Void Set(CSmPlayer _Player, Text[] _Actions) {
	if (_Player == Null) return;
	
	// Remove effects
	Attributes::RemoveBonus(_Player, Attributes::C_Attribute_ArmorMax, C_Effect_ArmorMax);
	Attributes::RemoveBonus(_Player, Attributes::C_Attribute_StaminaMax, C_Effect_Stamina);
	Attributes::RemoveBonus(_Player, Attributes::C_Attribute_CaptureSpeed, C_Effect_CaptureSpeed);
	Attributes::RemoveBonus(_Player, Attributes::C_Attribute_RocketAmmoMax, C_Effect_RocketAmmo);
	Attributes::RemoveBonus(_Player, Attributes::C_Attribute_AmmoGain, C_Effect_RocketAmmoGain);
	Attributes::RemoveBonus(_Player, Attributes::C_Attribute_LaserAmmoMax, C_Effect_LaserAmmo);
	Attributes::RemoveBonus(_Player, Attributes::C_Attribute_NucleusAmmoMax, C_Effect_NucleusAmmo);
	Attributes::RemoveBonus(_Player, Attributes::C_Attribute_ArrowAmmoMax, C_Effect_ArrowAmmo);
	Attributes::RemoveBonus(_Player, Attributes::C_Attribute_ArrowAmmoMax, C_Effect_ArrowExpert);
	Attributes::RemoveBonus(_Player, Attributes::C_Attribute_LaserAmmoMax, C_Effect_LaserExpert);
	Attributes::RemoveBonus(_Player, Attributes::C_Attribute_NucleusAmmoMax, C_Effect_NucleusExpert);
	Attributes::RemoveBonus(_Player, Attributes::C_Attribute_MissileAmmoMax, C_Effect_Missile);
	Attributes::RemoveBonus(_Player, Attributes::C_Attribute_ShieldArmorMax, C_Effect_Shield);
	Attributes::RemoveLock(_Player, Attributes::C_Attribute_AmmoGain, C_Effect_ActiveMissile);
	
	// Assign default weapon
	declare LibExpUpgrades_DefaultWeapon for _Player = C_DefaultWeapon;
	declare LibExpUpgrades_DefaultAutoSwitchWeapon for _Player = C_AutoSwitchWeapon;
	Private_Assign(_Player, LibExpUpgrades_DefaultWeapon, LibExpUpgrades_DefaultAutoSwitchWeapon);
	
	// Remove shield
	ActionLoad(_Player, C_Slots_Shield, G_ActionId_ShieldRemover);
	
	declare LibExpUpgrades_ArmorExpertValue for _Player = 0.;
	LibExpUpgrades_ArmorExpertValue = 0.;
	
	Log::Log("""[Upgrades] {{{_Player.User.Login}}} get the following upgrades {{{_Actions}}}""");
	
	// Add effects
	foreach (Action in _Actions) {
		declare CleanUrl = Utils::CleanStoreUrl(Action);
		switch (CleanUrl) {
			case C_ActionPath^C_Action_ArmorMax: {
				declare ArmorMax = Private_GetValueForLevel(C_ActionEffect_ArmorMax, Store::GetActionLevel(_Player, Action));
				Attributes::AddBonus(_Player, Attributes::C_Attribute_ArmorMax, C_Effect_ArmorMax, ArmorMax);
			}
			case C_ActionPath^C_Action_Stamina: {
				declare StaminaMax = Private_GetValueForLevel(C_ActionEffect_Stamina, Store::GetActionLevel(_Player, Action));
				Attributes::AddBonus(_Player, Attributes::C_Attribute_StaminaMax, C_Effect_Stamina, StaminaMax);
			}
			case C_ActionPath^C_Action_CaptureSpeed: {
				declare CaptureSpeed = Private_GetValueForLevel(C_ActionEffect_CaptureSpeed, Store::GetActionLevel(_Player, Action));
				Attributes::AddBonus(_Player, Attributes::C_Attribute_CaptureSpeed, C_Effect_CaptureSpeed, CaptureSpeed);
			}
			case C_ActionPath^C_Action_RocketAmmo: {
				declare RocketAmmo = Private_GetValueForLevel(C_ActionEffect_RocketAmmo, Store::GetActionLevel(_Player, Action));
				Attributes::AddBonus(_Player, Attributes::C_Attribute_RocketAmmoMax, C_Effect_RocketAmmo, RocketAmmo);
			}
			case C_ActionPath^C_Action_RocketAmmoGain: {
				declare RocketAmmoGain = Private_GetValueForLevel(C_ActionEffect_RocketAmmoGain, Store::GetActionLevel(_Player, Action));
				Attributes::AddBonus(_Player, Attributes::C_Attribute_AmmoGain, C_Effect_RocketAmmoGain, RocketAmmoGain);
			}
			case C_ActionPath^C_Action_LaserAmmo: {
				declare LaserAmmo = Private_GetValueForLevel(C_ActionEffect_LaserAmmo, Store::GetActionLevel(_Player, Action));
				Attributes::AddBonus(_Player, Attributes::C_Attribute_LaserAmmoMax, C_Effect_LaserAmmo, LaserAmmo);
			}
			case C_ActionPath^C_Action_NucleusAmmo: {
				declare NucleusAmmo = Private_GetValueForLevel(C_ActionEffect_NucleusAmmo, Store::GetActionLevel(_Player, Action));
				Attributes::AddBonus(_Player, Attributes::C_Attribute_NucleusAmmoMax, C_Effect_NucleusAmmo, NucleusAmmo);
			}
			case C_ActionPath^C_Action_ArrowAmmo: {
				declare ArrowAmmo = Private_GetValueForLevel(C_ActionEffect_ArrowAmmo, Store::GetActionLevel(_Player, Action));
				Attributes::AddBonus(_Player, Attributes::C_Attribute_ArrowAmmoMax, C_Effect_ArrowAmmo, ArrowAmmo);
			}
			case C_SkillPath^C_Skill_ArrowExpert: {
				declare ArrowAmmo = Private_GetValueForLevel(C_SkillEffect_ArrowExpert, Store::GetActionLevel(_Player, Action));
				Attributes::AddBonus(_Player, Attributes::C_Attribute_ArrowAmmoMax, C_Effect_ArrowExpert, ArrowAmmo);
			}
			case C_SkillPath^C_Skill_LaserExpert: {
				declare LaserAmmo = Private_GetValueForLevel(C_SkillEffect_LaserExpert, Store::GetActionLevel(_Player, Action));
				Attributes::AddBonus(_Player, Attributes::C_Attribute_LaserAmmoMax, C_Effect_LaserExpert, LaserAmmo);
			}
			case C_SkillPath^C_Skill_NucleusExpert: {
				declare NucleusAmmo = Private_GetValueForLevel(C_SkillEffect_NucleusExpert, Store::GetActionLevel(_Player, Action));
				Attributes::AddBonus(_Player, Attributes::C_Attribute_NucleusAmmoMax, C_Effect_NucleusExpert, NucleusAmmo);
			}
			case C_SkillPath^C_Skill_ArmorExpert: {
				declare LibExpUpgrades_ArmorExpertValue for _Player = 0.;
				LibExpUpgrades_ArmorExpertValue = Private_GetValueForLevel(C_SkillEffect_ArmorExpert, Store::GetActionLevel(_Player, Action));
			}
			case C_SkillPath^C_Skill_Missile: {
				declare MissileAmmo = Private_GetValueForLevel(C_SkillEffect_Missile, Store::GetActionLevel(_Player, Action));
				Attributes::AddBonus(_Player, Attributes::C_Attribute_MissileAmmoMax, C_Effect_Missile, MissileAmmo);
			}
			case C_SkillPath^C_Skill_Shield: {
				declare ShieldArmorMax = Private_GetValueForLevel(C_SkillEffect_Shield, Store::GetActionLevel(_Player, Action));
				Attributes::AddBonus(_Player, Attributes::C_Attribute_ShieldArmorMax, C_Effect_Shield, ShieldArmorMax);
			}
			case C_ItemPath^C_Item_Missile: {
				Private_Assign(_Player, CSmMode::EWeapon::Missile, LibExpUpgrades_DefaultAutoSwitchWeapon);
				Attributes::AddLock(_Player, Attributes::C_Attribute_AmmoGain, C_Effect_ActiveMissile, 1.);
			}
			case C_ItemPath^C_Item_Shield: {
				ActionLoad(_Player, C_Slots_Shield, G_ActionId_Shield);
			}
		}
	}
	Attributes::Apply(_Player);
}

// ---------------------------------- //
/// Update library
Void Yield() {
	foreach (Player in Players) {
		if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) continue;
		
		// Player is entering or leaving a weapon pad
		declare LibExpUpgrades_WeaponNum for Player = -1;
		if (LibExpUpgrades_WeaponNum != Player.CurWeapon) {
			LibExpUpgrades_WeaponNum = Player.CurWeapon;
			
			declare LibExpUpgrades_AssignedWeaponNum for Player = -1;
			if (LibExpUpgrades_AssignedWeaponNum != Player.CurWeapon) {
				Attributes::AddLock(Player, Attributes::C_Attribute_AmmoGain, C_Effect_WeaponPad, 1.);
				Log::Log("""[Upgrades] {{{Player.User.Login}}} walks on a weapon pad""");
			} else {
				Attributes::RemoveLock(Player, Attributes::C_Attribute_AmmoGain, C_Effect_WeaponPad);
				Log::Log("""[Upgrades] {{{Player.User.Login}}} left a weapon pad""");
			}
			Attributes::Apply(Player);
		}
	}
}

// ---------------------------------- //
/// Unload the library
Void Unload() {
	foreach (Player in AllPlayers) {
		declare LibExpUpgrades_ArmorExpertValue for Player = 0.;
		LibExpUpgrades_ArmorExpertValue = 0.;
	}
}

// ---------------------------------- //
/// Load the library
Void Load() {
	Unload();
}