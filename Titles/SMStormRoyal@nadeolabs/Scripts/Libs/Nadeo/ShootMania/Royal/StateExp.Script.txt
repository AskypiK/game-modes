/**
 *	Save royal Exp scores
 */
#Const	Version			"2016-11-28"
#Const	ScriptName	"Modes/ShootMania/Royal/Save.Script.txt"

// ---------------------------------- //
// Libraries
// ---------------------------------- //
#Include "Libs/Nadeo/Log.Script.txt" as Log
#Include "Libs/Nadeo/ShootMania/Scores.Script.txt" as Scores

// ---------------------------------- //
// Constants
// ---------------------------------- //
// Points type
// /!\ Shared with ManiaApps/Nadeo/ShootMania/Royal/StateExp.Script.txt /!\
#Const C_Points_Map 							0
#Const C_Points_MapHit						1
#Const C_Points_MapSurvival			2
#Const C_Points_MapPole					3
#Const C_Points_Round						4
#Const C_Points_RoundHit					5
#Const C_Points_RoundSurvival		6
#Const C_Points_RoundPole				7
#Const C_Points_Session 					8
#Const C_Points_SessionHit				9
#Const C_Points_SessionSurvival	10
#Const C_Points_SessionPole			11
#Const C_Points_Game							12
#Const C_Points_GameHit					13
#Const C_Points_GameSurvival			14
#Const C_Points_GamePole					15
#Const C_Points_All							16

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/**	Return the version number of the script
 *
 *	@return														The version number of the script
 */
Text GetScriptVersion() {
	return Version;
}

// ---------------------------------- //
/**	Return the name of the script
 *
 *	@return														The name of the script
 */
Text GetScriptName() {
	return ScriptName;
}

// ---------------------------------- //
/// Get the points constants
Integer Points_Map() { return C_Points_Map; }
Integer Points_MapHit() { return C_Points_MapHit; }
Integer Points_MapSurvival() { return C_Points_MapSurvival; }
Integer Points_MapPole() { return C_Points_MapPole; }
Integer Points_Round() { return C_Points_Round; }
Integer Points_RoundHit() { return C_Points_RoundHit; }
Integer Points_RoundSurvival() { return C_Points_RoundSurvival; }
Integer Points_RoundPole() { return C_Points_RoundPole; }
Integer Points_Session() { return C_Points_Session; }
Integer Points_SessionHit() { return C_Points_SessionHit; }
Integer Points_SessionSurvival() { return C_Points_SessionSurvival; }
Integer Points_SessionPole() { return C_Points_SessionPole; }
Integer Points_Game() { return C_Points_Game; }
Integer Points_GameHit() { return C_Points_GameHit; }
Integer Points_GameSurvival() { return C_Points_GameSurvival; }
Integer Points_GamePole() { return C_Points_GamePole; }
Integer Points_All() { return C_Points_All; }

// ---------------------------------- //
/** Set the score of a player
 *
 *	@param	_Score										The player's score to set
 *	@param	_Type											The type of score to set
 *	@param	_Points										The number of points to set
 */
Void SetScore(CSmScore _Score, Integer _Type, Integer _Points) {
	if (_Score == Null) return;
	
	declare RoundHit for _Score = 0;
	declare RoundSurvival for _Score = 0;
	declare RoundPole for _Score = 0;
	
	if (_Type == C_Points_MapHit || _Type == C_Points_Map || _Type == C_Points_All) {
		declare MapHit for _Score = 0;
		MapHit = _Points;
	}
	if (_Type == C_Points_MapSurvival || _Type == C_Points_Map || _Type == C_Points_All) {
		declare MapSurvival for _Score = 0;
		MapSurvival = _Points;
	}
	if (_Type == C_Points_MapPole || _Type == C_Points_Map || _Type == C_Points_All) {
		declare MapPole for _Score = 0;
		MapPole = _Points;
	}
	
	if (_Type == C_Points_RoundHit || _Type == C_Points_Round || _Type == C_Points_All) {
		RoundHit = _Points;
		if (Hud != Null && Hud.ScoresTable != Null) {
			if (RoundHit > 0) Hud.ScoresTable.SetColumnValue(_Score, "Hit", RoundHit);
		}
	}
	if (_Type == C_Points_RoundSurvival || _Type == C_Points_Round || _Type == C_Points_All) {
		RoundSurvival = _Points;
		if (Hud != Null && Hud.ScoresTable != Null) {
			if (RoundSurvival > 0) Hud.ScoresTable.SetColumnValue(_Score, "Srv", RoundSurvival);
		}
	}
	if (_Type == C_Points_RoundPole || _Type == C_Points_Round || _Type == C_Points_All) {
		RoundPole = _Points;
		if (Hud != Null && Hud.ScoresTable != Null) {
			if (RoundPole > 0) Hud.ScoresTable.SetColumnValue(_Score, "Pole", RoundPole);
		}
	}
	
	if (_Type == C_Points_SessionHit || _Type == C_Points_Session || _Type == C_Points_All) {
		declare SessionHit for _Score = 0;
		SessionHit = _Points;
	}
	if (_Type == C_Points_SessionSurvival || _Type == C_Points_Session || _Type == C_Points_All) {
		declare SessionSurvival for _Score = 0;
		SessionSurvival = _Points;
	}
	if (_Type == C_Points_SessionPole || _Type == C_Points_Session || _Type == C_Points_All) {
		declare SessionPole for _Score = 0;
		SessionPole = _Points;
	}
	
	if (_Type == C_Points_GameHit || _Type == C_Points_Game || _Type == C_Points_All) {
		declare GameHit for _Score = 0;
		GameHit = _Points;
	}
	if (_Type == C_Points_GameSurvival || _Type == C_Points_Game || _Type == C_Points_All) {
		declare GameSurvival for _Score = 0;
		GameSurvival = _Points;
	}
	if (_Type == C_Points_GamePole || _Type == C_Points_Game || _Type == C_Points_All) {
		declare GamePole for _Score = 0;
		GamePole = _Points;
	}
	
	Scores::SetPlayerRoundPoints(_Score, RoundHit + RoundSurvival + RoundPole);
}

// ---------------------------------- //
/** Get the score of a player
 *
 *	@param	_Score										The score of the player to check
 *	@param	_Type											The type of score to get
 */
Integer GetScore(CSmScore _Score, Integer _Type) {
	if (_Score == Null) return 0;
	
	switch (_Type) {
		case C_Points_MapHit: {
			declare MapHit for _Score = 0;
			return MapHit;
		}
		case C_Points_MapSurvival: {
			declare MapSurvival for _Score = 0;
			return MapSurvival;
		}
		case C_Points_MapPole: {
			declare MapPole for _Score = 0;
			return MapPole;
		}
		case C_Points_RoundHit: {
			declare RoundHit for _Score = 0;
			return RoundHit;
		}
		case C_Points_RoundSurvival: {
			declare RoundSurvival for _Score = 0;
			return RoundSurvival;
		}
		case C_Points_RoundPole: {
			declare RoundPole for _Score = 0;
			return RoundPole;
		}
		case C_Points_SessionHit: {
			declare SessionHit for _Score = 0;
			return SessionHit;
		}
		case C_Points_SessionSurvival: {
			declare SessionSurvival for _Score = 0;
			return SessionSurvival;
		}
		case C_Points_SessionPole: {
			declare SessionPole for _Score = 0;
			return SessionPole;
		}
		case C_Points_GameHit: {
			declare GameHit for _Score = 0;
			return GameHit;
		}
		case C_Points_GameSurvival: {
			declare GameSurvival for _Score = 0;
			return GameSurvival;
		}
		case C_Points_GamePole: {
			declare GamePole for _Score = 0;
			return GamePole;
		}
	}
	
	return 0;
}

// ---------------------------------- //
/** Update the score of a player
 *
 *	@param	_Score										The player's score to update
 *	@param	_Type											The type of score to update
 *	@param	_Points										The number of points to add
 */
Void UpdateScore(CSmScore _Score, Integer _Type, Integer _Points) {
	if (_Score == Null) return;
	
	if (_Type == C_Points_MapHit || _Type == C_Points_Map || _Type == C_Points_All) {
		SetScore(_Score, _Type, GetScore(_Score, C_Points_MapHit) + _Points);
	}
	if (_Type == C_Points_MapSurvival || _Type == C_Points_Map || _Type == C_Points_All) {
		SetScore(_Score, _Type, GetScore(_Score, C_Points_MapSurvival) + _Points);
	}
	if (_Type == C_Points_MapPole || _Type == C_Points_Map || _Type == C_Points_All) {
		SetScore(_Score, _Type, GetScore(_Score, C_Points_MapPole) + _Points);
	}
	if (_Type == C_Points_RoundHit || _Type == C_Points_Round || _Type == C_Points_All) {
		SetScore(_Score, _Type, GetScore(_Score, C_Points_RoundHit) + _Points);
	}
	if (_Type == C_Points_RoundSurvival || _Type == C_Points_Round || _Type == C_Points_All) {
		SetScore(_Score, _Type, GetScore(_Score, C_Points_RoundSurvival) + _Points);
	}
	if (_Type == C_Points_RoundPole || _Type == C_Points_Round || _Type == C_Points_All) {
		SetScore(_Score, _Type, GetScore(_Score, C_Points_RoundPole) + _Points);
	}
	if (_Type == C_Points_SessionHit || _Type == C_Points_Session || _Type == C_Points_All) {
		SetScore(_Score, _Type, GetScore(_Score, C_Points_SessionHit) + _Points);
	}
	if (_Type == C_Points_SessionSurvival || _Type == C_Points_Session || _Type == C_Points_All) {
		SetScore(_Score, _Type, GetScore(_Score, C_Points_SessionSurvival) + _Points);
	}
	if (_Type == C_Points_SessionPole || _Type == C_Points_Session || _Type == C_Points_All) {
		SetScore(_Score, _Type, GetScore(_Score, C_Points_SessionPole) + _Points);
	}
	if (_Type == C_Points_GameHit || _Type == C_Points_Game || _Type == C_Points_All) {
		SetScore(_Score, _Type, GetScore(_Score, C_Points_GameHit) + _Points);
	}
	if (_Type == C_Points_GameSurvival || _Type == C_Points_Game || _Type == C_Points_All) {
		SetScore(_Score, _Type, GetScore(_Score, C_Points_GameSurvival) + _Points);
	}
	if (_Type == C_Points_GamePole || _Type == C_Points_Game || _Type == C_Points_All) {
		SetScore(_Score, _Type, GetScore(_Score, C_Points_GamePole) + _Points);
	}
}

// ---------------------------------- //
/// Synchronize the persisted data to the UI
Void SyncUI() {
	declare persistent RoyalExpState_Scores for This = Integer[Integer][Text];
	declare netwrite Net_RoyalExpState_Scores for Teams[0] = Integer[Integer][Text];
	Net_RoyalExpState_Scores = RoyalExpState_Scores;
	
	declare netwrite Net_RoyalExpState_Update for Teams[0] = Now;
	Net_RoyalExpState_Update = Now;
}

// ---------------------------------- //
/** Load a score metadata
 *
 *	@param	_Score										The score to load
 */
Void LoadState(CSmScore _Score) {
	if (_Score == Null) return;
	
	declare persistent RoyalExpState_Scores for This = Integer[Integer][Text];
	if (RoyalExpState_Scores.existskey(_Score.User.Login)) {
		declare SavedScore = RoyalExpState_Scores[_Score.User.Login];
		SetScore(_Score, C_Points_SessionHit, SavedScore[C_Points_SessionHit]);
		SetScore(_Score, C_Points_SessionSurvival, SavedScore[C_Points_SessionSurvival]);
		SetScore(_Score, C_Points_SessionPole, SavedScore[C_Points_SessionPole]);
		SetScore(_Score, C_Points_GameHit, SavedScore[C_Points_GameHit]);
		SetScore(_Score, C_Points_GameSurvival, SavedScore[C_Points_GameSurvival]);
		SetScore(_Score, C_Points_GamePole, SavedScore[C_Points_GamePole]);
	}
	
	declare RoyalExpState_IsLoaded for _Score = False;
	RoyalExpState_IsLoaded = True;
	
	Log::Log("""[StateExp] Load "{{{_Score.User.Login}}}" """);
}

// ---------------------------------- //
/** Check if the score metadata are loaded
 *
 *	@param	_Score										The score to check
 *
 *	@return														True if the metadata are loaded
 *																		False otherwise
 */
Boolean IsLoaded(CSmScore _Score) {
	if (_Score == Null) return True;
	
	declare RoyalExpState_IsLoaded for _Score = False;
	return RoyalExpState_IsLoaded;
}

// ---------------------------------- //
/** Save a score metadata
 *
 *	@param	_Score										The score to save
 */
Void SaveState(CSmScore _Score) {
	if (_Score == Null) return;
	
	declare persistent RoyalExpState_Scores for This = Integer[Integer][Text];
	if (!RoyalExpState_Scores.existskey(_Score.User.Login)) {
		RoyalExpState_Scores[_Score.User.Login] = Integer[Integer];
	}
	RoyalExpState_Scores[_Score.User.Login] = [
		C_Points_SessionHit => GetScore(_Score, C_Points_SessionHit),
		C_Points_SessionSurvival => GetScore(_Score, C_Points_SessionSurvival),
		C_Points_SessionPole => GetScore(_Score, C_Points_SessionPole),
		C_Points_GameHit => GetScore(_Score, C_Points_GameHit),
		C_Points_GameSurvival => GetScore(_Score, C_Points_GameSurvival),
		C_Points_GamePole => GetScore(_Score, C_Points_GamePole)
	];
	
	SyncUI();
	
	Log::Log("""[StateExp] Save "{{{_Score.User.Login}}}" """);
}

// ---------------------------------- //
/** Delete or reset the persisted data
 *
 *	@param	_Level										The level of data to delete/reset
 */
Void ClearState(Integer _Level) {
	declare persistent RoyalExpState_Scores for This = Integer[Integer][Text];
	declare TmpScores = RoyalExpState_Scores;
	
	if (_Level == C_Points_Game) {
		RoyalExpState_Scores = Integer[Integer][Text];
	} else if (_Level == C_Points_Session) {
		foreach (Login => PlayerPoints in TmpScores) {
			declare TmpPoints = PlayerPoints;
			TmpPoints[C_Points_SessionHit] = 0;
			TmpPoints[C_Points_SessionSurvival] = 0;
			TmpPoints[C_Points_SessionPole] = 0;
			RoyalExpState_Scores[Login] = TmpPoints;
		}
	}
	
	SyncUI();
	
	Log::Log("""[StateExp] Clear save level {{{_Level}}}""");
}

// ---------------------------------- //
/// Unload the library
Void Unload() {
  
}

// ---------------------------------- //
/// Load the library
Void Load() {
  Unload();
	SyncUI();
}