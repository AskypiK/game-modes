/**
 *	ManiaView library
 */
#Const	Version			"2016-11-17"
#Const	ScriptName	"Libs/Nadeo/Manialink/ManiaView.Script.txt"

#Include "TextLib" as TL

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_Slot_Manialink 0
#Const C_Slot_Includes	1
#Const C_Slot_Constants	2
#Const C_Slot_Globales	3
#Const C_Slot_Functions	4
#Const C_Slot_MainStart	5
#Const C_Slot_MainLoop	6
#Const C_Slot_MainEnd		7

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/**	Return the version number of the script
 *
 *	@return														The version number of the script
 */
Text GetScriptVersion() {
	return Version;
}

// ---------------------------------- //
/**	Return the name of the script
 *
 *	@return														The name of the script
 */
Text GetScriptName() {
	return ScriptName;
}

Integer Slot_Manialink() { return C_Slot_Manialink; }
Integer Slot_Includes() { return C_Slot_Includes; }
Integer Slot_Constants() { return C_Slot_Constants; }
Integer Slot_Globales() { return C_Slot_Globales; }
Integer Slot_Functions() { return C_Slot_Functions; }
Integer Slot_MainStart() { return C_Slot_MainStart; }
Integer Slot_MainLoop() { return C_Slot_MainLoop; }
Integer Slot_MainEnd() { return C_Slot_MainEnd; }

// ---------------------------------- //
/** Extract the requested attributes from
 *	a node with the given class
 *
 */
Text[Text] ExtractAttributes(CXmlNode _Node, Text _Class, Text[] _Attributes) {
	declare Text[Text] Attributes;
	
	if (_Node == Null) return Attributes;
	
	// Check that the node has the requested class
	if (_Class != "") {
		declare Classes = _Node.GetAttributeText("class", "");
		if (Classes == "") return Attributes;
		declare SplittedClasses = TL::Split(" ", Classes);
		if (!SplittedClasses.exists(_Class)) return Attributes;
	}
	
	// Extract the requested attributes
	foreach (Attribute in _Attributes) {
		declare Value = _Node.GetAttributeText(Attribute, "");
		if (Value != "") {
			Attributes[Attribute] = Value;
		}
	}
	
	return Attributes;
}

// ---------------------------------- //
/** Create a new array of parts
 *
 *	@param	_Manialink								The manialink xml
 *	@param	_Includes									The libraries to include into the script
 *	@param	_Constants								The script constants
 *	@param	_Globales									The script globales
 *	@param	_Functions								The script functions
 *	@param	_MainStart								The part of the script in the main() before the loop
 *	@param	_MainLoop									The part of the script in the main() inside the loop
 *	@param	_MainEnd									The part of the script in the main() after the loop
 */
/*
"", //< Manialink
"", //< Includes
"", //< Constants
"", //< Globales
"", //< Functions
"", //< Main start
"", //< Main loop
"" //< Main end
*/
Text[][Integer] Create(
	Text _Manialink,
	Text _Includes,
	Text _Constants,
	Text _Globales,
	Text _Functions,
	Text _MainStart,
	Text _MainLoop,
	Text _MainEnd
) {
	return [
		C_Slot_Manialink => [_Manialink],
		C_Slot_Includes => [_Includes],
		C_Slot_Constants => [_Constants],
		C_Slot_Globales => [_Globales],
		C_Slot_Functions => [_Functions],
		C_Slot_MainStart => [_MainStart],
		C_Slot_MainLoop => [_MainLoop],
		C_Slot_MainEnd => [_MainEnd]
	];
}

// ---------------------------------- //
/** Append new parts to an already
 *	existing array of parts
 *
 *	@param	_Source										The original array of parts
 *	@param	_Manialink								The manialink xml
 *	@param	_Includes									The libraries to include into the script
 *	@param	_Constants								The script constants
 *	@param	_Globales									The script globales
 *	@param	_Functions								The script functions
 *	@param	_MainStart								The part of the script in the main() before the loop
 *	@param	_MainLoop									The part of the script in the main() inside the loop
 *	@param	_MainEnd									The part of the script in the main() after the loop
 */
Text[][Integer] Append(
	Text[][Integer] _Source,
	Text _Manialink,
	Text _Includes,
	Text _Constants,
	Text _Globales,
	Text _Functions,
	Text _MainStart,
	Text _MainLoop,
	Text _MainEnd
) {
	declare Result = _Source;
	
	if (Result.existskey(C_Slot_Manialink)) Result[C_Slot_Manialink].add(_Manialink);
	else Result[C_Slot_Manialink] = [_Manialink];
	if (Result.existskey(C_Slot_Includes)) Result[C_Slot_Includes].add(_Includes);
	else Result[C_Slot_Includes] = [_Includes];
	if (Result.existskey(C_Slot_Constants)) Result[C_Slot_Constants].add(_Constants);
	else Result[C_Slot_Constants] = [_Constants];
	if (Result.existskey(C_Slot_Globales)) Result[C_Slot_Globales].add(_Globales);
	else Result[C_Slot_Globales] = [_Globales];
	if (Result.existskey(C_Slot_Functions)) Result[C_Slot_Functions].add(_Functions);
	else Result[C_Slot_Functions] = [_Functions];
	if (Result.existskey(C_Slot_MainStart)) Result[C_Slot_MainStart].add(_MainStart);
	else Result[C_Slot_MainStart] = [_MainStart];
	if (Result.existskey(C_Slot_MainLoop)) Result[C_Slot_MainLoop].add(_MainLoop);
	else Result[C_Slot_MainLoop] = [_MainLoop];
	if (Result.existskey(C_Slot_MainEnd)) Result[C_Slot_MainEnd].add(_MainEnd);
	else Result[C_Slot_MainEnd] = [_MainEnd];
	
	return Result;
}

// ---------------------------------- //
/** Merge two arrays of manialink parts
 *
 *	@return														A new array with the merged parts
 */
Text[][Integer] Merge(Text[][Integer] _Manialink1, Text[][Integer] _Manialink2) {
	declare Result = _Manialink1;
	
	if (_Manialink2.existskey(C_Slot_Manialink)) {
		if (Result.existskey(C_Slot_Manialink)) {
			foreach (Manialink in _Manialink2[C_Slot_Manialink]) Result[C_Slot_Manialink].add(Manialink);
		} else {
			Result[C_Slot_Manialink] = _Manialink2[C_Slot_Manialink];
		}
	}
	if (_Manialink2.existskey(C_Slot_Includes)) {
		if (Result.existskey(C_Slot_Includes)) {
			foreach (Includes in _Manialink2[C_Slot_Includes]) Result[C_Slot_Includes].add(Includes);
		} else {
			Result[C_Slot_Includes] = _Manialink2[C_Slot_Includes];
		}
	}
	if (_Manialink2.existskey(C_Slot_Constants)) {
		if (Result.existskey(C_Slot_Constants)) {
			foreach (Constants in _Manialink2[C_Slot_Constants]) Result[C_Slot_Constants].add(Constants);
		} else {
			Result[C_Slot_Constants] = _Manialink2[C_Slot_Constants];
		}
	}
	if (_Manialink2.existskey(C_Slot_Globales)) {
		if (Result.existskey(C_Slot_Globales)) {
			foreach (Globales in _Manialink2[C_Slot_Globales]) Result[C_Slot_Globales].add(Globales);
		} else {
			Result[C_Slot_Globales] = _Manialink2[C_Slot_Globales];
		}
	}
	if (_Manialink2.existskey(C_Slot_Functions)) {
		if (Result.existskey(C_Slot_Functions)) {
			foreach (Functions in _Manialink2[C_Slot_Functions]) Result[C_Slot_Functions].add(Functions);
		} else {
			Result[C_Slot_Functions] = _Manialink2[C_Slot_Functions];
		}
	}
	if (_Manialink2.existskey(C_Slot_MainStart)) {
		if (Result.existskey(C_Slot_MainStart)) {
			foreach (MainStart in _Manialink2[C_Slot_MainStart]) Result[C_Slot_MainStart].add(MainStart);
		} else {
			Result[C_Slot_MainStart] = _Manialink2[C_Slot_MainStart];
		}
	}
	if (_Manialink2.existskey(C_Slot_MainLoop)) {
		if (Result.existskey(C_Slot_MainLoop)) {
			foreach (MainLoop in _Manialink2[C_Slot_MainLoop]) Result[C_Slot_MainLoop].add(MainLoop);
		} else {
			Result[C_Slot_MainLoop] = _Manialink2[C_Slot_MainLoop];
		}
	}
	if (_Manialink2.existskey(C_Slot_MainEnd)) {
		if (Result.existskey(C_Slot_MainEnd)) {
			foreach (MainEnd in _Manialink2[C_Slot_MainEnd]) Result[C_Slot_MainEnd].add(MainEnd);
		} else {
			Result[C_Slot_MainEnd] = _Manialink2[C_Slot_MainEnd];
		}
	}
	return Result;
}

// ---------------------------------- //
/** Concatenate the Text of an array in
 *	one Text variable
 *
 *	@param	_Array										The source of Text
 *
 *	@return														The concatenated Text
 */
Text CompileSlot(Text[] _Array) {
	declare Concat = "";
	foreach (Item in _Array) {
		Concat ^= Item;
	}
	return Concat;
}

// ---------------------------------- //
/** #Compile()
 *	Compile a manialink from an array of parts
 *	and include the ManiaView library
 *
 */
Text Compile(Text _Name, Text[][Integer] _Manialink) {
	declare Manialink = "";
	Manialink ^= """
<manialink version="3" name="{{{TL::MLEncode(_Name)}}}">
""";
	
	if (_Manialink.existskey(C_Slot_Manialink)) Manialink ^= CompileSlot(_Manialink[C_Slot_Manialink]);
	
	Manialink ^= """
	<script><!--	
""";
	
	if (_Manialink.existskey(C_Slot_Includes)) Manialink ^= CompileSlot(_Manialink[C_Slot_Includes]);
	
	if (_Manialink.existskey(C_Slot_Constants)) Manialink ^= CompileSlot(_Manialink[C_Slot_Constants]);

	if (_Manialink.existskey(C_Slot_Globales)) Manialink ^= CompileSlot(_Manialink[C_Slot_Globales]);
	
	if (_Manialink.existskey(C_Slot_Functions)) Manialink ^= CompileSlot(_Manialink[C_Slot_Functions]);
	
	Manialink ^= """
main() {
""";

	if (_Manialink.existskey(C_Slot_MainStart)) Manialink ^= CompileSlot(_Manialink[C_Slot_MainStart]);
	
	Manialink ^= """
	while (True) {
		yield;
""";

	if (_Manialink.existskey(C_Slot_MainLoop)) Manialink ^= CompileSlot(_Manialink[C_Slot_MainLoop]);
	
	Manialink ^= """
	}
""";
	
	if (_Manialink.existskey(C_Slot_MainEnd)) Manialink ^= CompileSlot(_Manialink[C_Slot_MainEnd]);
	
	Manialink ^= """
}
	--></script>
</manialink>	
""";
	
	return Manialink;
}