/**
 * 
 */
#Const Version    "2018-09-03"
#Const ScriptName "ManiaApps/MatesMarkers.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ManiaApps/Nadeo/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/Shootmania/Royal/Constants2.Script.txt" as Const


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Layer_MatesMarkers "RoyalSquad_MatesMarkers"

Text Ml_MatesMarkers (){

	declare Integer	Marker_GaugesBars 	= 3;
	declare Real		Marker_GaugeSize		= 10.;
	declare Real		XOffSet							= 0.;
	declare Real		Marker_BarSize			= (Marker_GaugeSize / Marker_GaugesBars) - (XOffSet/2.);
	declare Text		Marker_GaugeBarsManialink = "";
	declare Text		MatesMarkersML						= "";
	declare Real PoleImgSize = 10.;
	declare Real PlayersImgSize = 6.;
	declare Real WideScreenRatio = 9./16.;
	declare Text PoleMarkerImg = "file://Media/Manialinks/Shootmania/Common/goal_cap.dds";

	for(Marker_GaugesBarsIndex, 0, Marker_GaugesBars-1) {
		Marker_GaugeBarsManialink	^= """
		
			<frame id="RepositioningFrame" pos ="{{{-XOffSet/2.}}} 3">
				<quad id="{{{"GaugeBarFill"^Marker_GaugesBarsIndex}}}"  autoscale="false" pos="{{{-(Marker_GaugeSize/2.)+((Marker_BarSize+XOffSet)*Marker_GaugesBarsIndex)}}} -18" z-index="0" size="{{{Marker_BarSize}}} 2" bgcolor="FFFA" halign="left" valign="center"/>
				<quad id="{{{"GaugeBarBackground"^Marker_GaugesBarsIndex}}}" autoscale="false" pos="{{{-(Marker_GaugeSize/2.)+((Marker_BarSize+XOffSet)*Marker_GaugesBarsIndex)}}} -18" z-index="0" size="{{{Marker_BarSize}}} 2" bgcolor="FFFA" halign="left" valign="center"/>
			</frame>
			
			""";
	}

	for(i, 0, 10){
		MatesMarkersML ^= """
			<frame id="MarkersMates{{{i}}}" hidden="1" >
				<frame id="PlayerInfo">
					<label pos="2 -17" textprefix="$o" z-index="10" autoscale="false" size="35 10" text="Pseudo" halign="center" valign="center" textsize="3.5" id="label-mates"/>
					<quad id="quad-background-mates" pos="2 -17" z-index="-10" size="35 8" bgcolor="000000FF" halign="center" valign="center" opacity="0.1"/>
					<quad id="quad-backgroundcontour-mates" pos="2 -17" z-index="-10" size="37 32" bgcolor="FFFF" halign="center" valign="center" image="file://Media/Manialinks/Nadeo/ShootMania/Royal/ASSETS_512x512_SquadRoyal_Cadre_MarkerNameContour.dds" opacity="0.4"/>
					<label pos="10 -7" autoscale="false" size="40 40" text="➔" halign="center" rot="-90" valign="center" textsize="9" textcolor="9fdeff" hidden="1" id="label-ishealing-icon" />
					<quad id="quad-ishealed" pos="-7 0" z-index="10" size="20 20" halign="left" valign="center" hidden="1" image="file://Media/Manialinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_HealIcon_V2.dds" />
					<frame id="ArmorIndicator">
						<quad id="Armor_FullOpacity" pos="-5 0" z-index="-10" size="20 20" bgcolor="FFFF" halign="left" valign="center" opacity="1." image="file://Media/Manialinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_BrokenArmor.dds" />
						<quad id="quad-alert-heal" pos="-5 13" z-index="10" size="25 25" halign="left" valign="center" image="file://Media/Manialinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_Alerte.dds"/>
						<!-- <quad id="Armor_LowOpacity" pos="-5 -2" z-index="-10" size="15 15" bgcolor="FFFF" halign="left" valign="center" opacity=".3" image="file://Media/Manialinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_BrokenArmor_NoContour.dds" /> -->
						<frame id="ClipFrame" pos="-5 -2">
							<quad id="Armor_FullOpacitybackup" pos="0 0" hidden="1" z-index="-10" size="15 15" bgcolor="FFFF" halign="left" valign="center" opacity="1." image="file://Media/Manialinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_BrokenArmor.dds" />
						</frame>
					</frame>
					<frame id="frame-arrow" z-index="10" pos="0 0">
						<label id="Arrow" pos="2 -12" autoscale="false" z-index="10" size="15 5" text="" halign="center" valign="center" textsize="2"/>
					</frame>
				</frame>
			</frame>
		""";
	}
	
	return """			

	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
		<manialink version="3" name="L_Markers">
		<frame id="frame-global" pos="0 12">
			{{{MatesMarkersML}}}
		</frame>
		<frame>
		<frame id="PoleMarkerFrameId" hidden="1">
			<quad halign="center" id="quad-polemarker" hidden="1" posn="0 0 0" sizen="{{{PoleImgSize*WideScreenRatio}}} {{{PoleImgSize}}}" image="{{{PoleMarkerImg}}}" autoscale="False" colorize="0. 0. 0." />
		</frame>
	</frame>
<script><!--
#Include "TextLib" as TL
#Include "MathLib" as ML
declare Real G_X;
CSmPlayer GetCSmPlayerFromName(Text _PlayerName){
	foreach(Player in Players){
		if (Player.User.Name == _PlayerName) {
			
			return Player;
		}
	}
	return Null;
}

CSmPlayer GetCSmPlayerFromLogin(Text _PlayerLogin){
	foreach(Player in Players){
		if (Player.User.Login == _PlayerLogin) {
			
			return Player;
		}
	}
	return Null;
}

CSmPlayer GetOwner() {
	if (GUIPlayer != Null) return GUIPlayer;
	return InputPlayer;
}

Text CheckMarkerPositionOnScreen(CMlFrame _FrameMarker, CMlLabel _ArrowIcon, Real _DistanceFromMates, Text _Login, Text[] _PlayersNeedHelp){

if(!_PlayersNeedHelp.exists(_Login)){
	if(_FrameMarker.AbsolutePosition_V3.X < -115. && _DistanceFromMates > 2.){
		return "Left";
	} else if (_FrameMarker.AbsolutePosition_V3.X > 115. && _DistanceFromMates > 2.){
		return "Right";
	} else if (_FrameMarker.AbsolutePosition_V3.Y < -25. && _DistanceFromMates > 2.){
		return "Down";
	} else if (_FrameMarker.AbsolutePosition_V3.Y > 70. && _DistanceFromMates > 2.){
		return "Top";
	} else return "InFrustum";
} else if (_PlayersNeedHelp.exists(_Login)){
	if(_FrameMarker.AbsolutePosition_V3.X < -102. && _DistanceFromMates > 2.){
		return "Left";
	} else if (_FrameMarker.AbsolutePosition_V3.X > 102. && _DistanceFromMates > 2.){
		return "Right";
	} else if (_FrameMarker.AbsolutePosition_V3.Y < -25. && _DistanceFromMates > 2.){
		return "Down";
	} else if (_FrameMarker.AbsolutePosition_V3.Y > 50. && _DistanceFromMates > 2.){
		return "Top";
	} else return "InFrustum";
}
	
	return "InFrustum";
}

declare CMlFrame Frame_Globale;

Void ManageLayers(CMlFrame _FrameGlobale, Integer _PlayersPerTeam, Text[] PlayerSquad, Real[Text] _DistancesFrom_Mates, Text[] _PlayersNeedHelp, Text[] _PlayersHealed, Boolean _IsHealEnabled){
	foreach(FrameIndex => Control in Frame_Globale.Controls){
		declare FrameMarker <=> (Control as CMlFrame);
		declare FrameInfo <=> (FrameMarker.GetFirstChild("PlayerInfo") as CMlFrame);
		declare FrameArrow <=> (FrameMarker.GetFirstChild("frame-arrow") as CMlFrame);
		
		FrameMarker.Visible = False;
		FrameInfo.Visible = False;
		declare LocalPlayer <=> GetCSmPlayerFromLogin(LocalUser.Login);
		if(LocalPlayer.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned){
			Frame_Globale.Visible = False;
			FrameInfo.Visible = False;
		} else Frame_Globale.Visible = True;
		if(FrameIndex < PlayerSquad.count){
			declare LabelOfPlayer <=> (FrameMarker.GetFirstChild("label-mates") as CMlLabel);
			declare Quad_Background <=> (FrameMarker.GetFirstChild("quad-background-mates") as CMlQuad);
			declare Quad_BackgroundContour <=> (FrameMarker.GetFirstChild("quad-backgroundcontour-mates") as CMlQuad);
			declare Arrow_Icon <=> (FrameMarker.GetFirstChild("Arrow") as CMlLabel);
			declare IsHealed_Icon <=> (FrameMarker.GetFirstChild("label-ishealing-icon") as CMlLabel);
			//declare ClipFrame <=> (FrameMarker.GetFirstChild("ClipFrame") as CMlFrame);
			declare ArmorIndicator <=> (FrameMarker.GetFirstChild("ArmorIndicator") as CMlFrame);
			declare Armor_FullOpacity <=> (FrameMarker.GetFirstChild("Armor_FullOpacity") as CMlQuad);
			//declare Armor_LowOpacity <=> (FrameMarker.GetFirstChild("Armor_LowOpacity") as CMlQuad);
			declare Alerte_Heal <=> (FrameMarker.GetFirstChild("quad-alert-heal") as CMlQuad);
			declare Quad_ArmorHealed <=> (FrameMarker.GetFirstChild("quad-ishealed") as CMlQuad);
			declare CSmMateFromLogin <=> GetCSmPlayerFromLogin(PlayerSquad[FrameIndex]);
			declare DistanceFromMates = _DistancesFrom_Mates[PlayerSquad[FrameIndex]];
			declare NewPlayersNeedHelp = _PlayersNeedHelp;
			if(CSmMateFromLogin != Null){
				declare IsMarkerInFrustum = CheckMarkerPositionOnScreen(FrameMarker, Arrow_Icon, DistanceFromMates, CSmMateFromLogin.User.Login, _PlayersNeedHelp);
				if(IsMarkerInFrustum == "InFrustum"){
					if(CSmMateFromLogin != Null){
						//ClipFrame.ClipWindowActive = True;
						//ClipFrame.ClipWindowRelativePosition = <0., 0.>; 
						//ClipFrame.ClipWindowSize = <30., 30.>; 
						//Armor_LowOpacity.Size.X = 15.;
						//Armor_LowOpacity.Size.Y = 15.;
						FrameMarker.Visible = True;
						Armor_FullOpacity.Size.X = 15.;
						Armor_FullOpacity.Size.Y = 15.;
						Alerte_Heal.RelativePosition_V3.X = -10.;
						Alerte_Heal.RelativePosition_V3.Y = 13.;
						Quad_ArmorHealed.Size.X = 20.;
						Quad_ArmorHealed.Size.Y = 20.;
						LabelOfPlayer.Visible = True;
						Quad_Background.Visible = True;
						Quad_BackgroundContour.Visible = True;
						if(DistanceFromMates > 250.){
							Arrow_Icon.Visible = False;
						} else Arrow_Icon.Visible = True;
						if(_PlayersHealed.exists(CSmMateFromLogin.User.Login) && CSmMateFromLogin.Armor < CSmMateFromLogin.ArmorMax && _IsHealEnabled){
							ArmorIndicator.Visible = True; 
							Quad_BackgroundContour.ModulateColor = <0.62, 0.87, 1.>;
							Armor_FullOpacity.Visible = False;
							Armor_FullOpacity.ModulateColor = <0.62, 0.87, 1.>;
							Quad_BackgroundContour.Opacity = 1.;
							IsHealed_Icon.Visible = True;
							Quad_ArmorHealed.Visible = True;
						} else {
							Quad_ArmorHealed.Visible = False;
							IsHealed_Icon.Visible = False;
							Armor_FullOpacity.ModulateColor = <1., 1., 1.>;
							Quad_BackgroundContour.ModulateColor = <1., 1., 1.>;
							Quad_BackgroundContour.Opacity = 0.4;
						}
						if(_PlayersNeedHelp.exists(CSmMateFromLogin.User.Login) && _IsHealEnabled){
							Alerte_Heal.Visible = True;
							
						} else Alerte_Heal.Visible = False;
						if(Alerte_Heal.Visible){
							G_X = Now * 0.003;
							Alerte_Heal.Opacity = ML::Abs(ML::Sin(G_X))/1.5 + 0.3;
						}
						if(IsHealed_Icon.Visible == True){
							G_X = Now * 0.003;
							IsHealed_Icon.Opacity = ML::Abs(ML::Sin(G_X))/1.5 + 0.3;
						}
						LabelOfPlayer.Value = CSmMateFromLogin.User.Name;
						if(DistanceFromMates < 1.){
							DistanceFromMates = 1.;
						}
						FrameArrow.RelativeRotation = 0.;
						FrameArrow.RelativePosition_V3.Y = -12.;
						FrameArrow.RelativePosition_V3.X = 0.;
						Arrow_Icon.RelativeScale = ML::Clamp(1.5 - DistanceFromMates/98, 0.5, 2.);
						FrameMarker.RelativeScale = ML::Clamp(0.9 - DistanceFromMates/60, 0.5, 0.95);
						if(CSmMateFromLogin.Armor < CSmMateFromLogin.ArmorMax && CSmMateFromLogin.Armor > 0 && !_PlayersHealed.exists(CSmMateFromLogin.User.Login) && _IsHealEnabled){
							if(LocalUser.Login != CSmMateFromLogin.User.Login){ 
								Armor_FullOpacity.Visible = True;
								declare Real XPos = (((200. - CSmMateFromLogin.Armor * 1.) / 13.) * -1.);
								//ClipFrame.ClipWindowRelativePosition = <XPos, 0.>;
							}
							ArmorIndicator.Visible = True; 
						} else {
							ArmorIndicator.Visible = False;
							FrameMarker.Visible = False;
							FrameInfo.Visible = False;
						} 
						if(CSmMateFromLogin.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && CSmMateFromLogin != Null){
							FrameMarker.Visible = True;
							FrameInfo.Visible = True;
						} else {
							FrameInfo.Visible = False;
							FrameMarker.Visible = False;
						} 
						if(PlayerSquad[FrameIndex] == LocalUser.Login){
							FrameMarker.Visible = False;
							FrameInfo.Visible = False;
						}
					} else FrameMarker.Visible = False;
				} else { 
					if(CSmMateFromLogin != Null){
						//ClipFrame.ClipWindowActive = True;
						Quad_Background.Visible = False;
						Quad_BackgroundContour.Visible = False;
						//ClipFrame.ClipWindowRelativePosition = <0., 0.>; 
						//ClipFrame.ClipWindowSize = <60., 60.>; 
						//Armor_LowOpacity.Size.X = 30.;
						//Armor_LowOpacity.Size.Y = 30.;
						Armor_FullOpacity.Size.X = 30.;
						Armor_FullOpacity.Size.Y = 30.;
						Armor_FullOpacity.Visible = False;
						LabelOfPlayer.Visible = False;
						IsHealed_Icon.Visible = False;
						Quad_ArmorHealed.Visible = False;
						Arrow_Icon.RelativeScale = 1.5;
						Armor_FullOpacity.ModulateColor = <1., 1., 1.>;
						Quad_BackgroundContour.ModulateColor = <1., 1., 1.>;
						if(CSmMateFromLogin.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && _IsHealEnabled){
							if(!_PlayersHealed.exists(CSmMateFromLogin.User.Login) && CSmMateFromLogin.Armor < CSmMateFromLogin.ArmorMax && _PlayersNeedHelp.exists(CSmMateFromLogin.User.Login)){
								FrameMarker.RelativeScale = 1.;
								Frame_Globale.Visible = True;
								Alerte_Heal.Visible = True;
								Armor_FullOpacity.Visible = True;
								FrameInfo.Visible = True;
								if(DistanceFromMates < 250.){
									Arrow_Icon.Visible = True;
									FrameMarker.Visible = True;
									ArmorIndicator.Visible = True;
									if(Alerte_Heal.Visible){
										G_X = Now * 0.003;
										Alerte_Heal.Opacity = ML::Abs(ML::Sin(G_X))/1.5 + 0.3;
									}
									declare Real XPos = (((200. - CSmMateFromLogin.Armor * 1.) / 6.8) * -1.);
									//ClipFrame.ClipWindowRelativePosition = <XPos, 0.>;
									switch(IsMarkerInFrustum){
										case "Left": {
											FrameArrow.RelativeRotation = 90.;
											FrameArrow.RelativePosition_V3.Y = -6.;
											FrameArrow.RelativePosition_V3.X = 0.;
											Alerte_Heal.RelativePosition_V3.X = 0.;
											Alerte_Heal.RelativePosition_V3.Y = 17.;
										}
										case "Right": {
											FrameArrow.RelativeRotation = -90.;
											FrameArrow.RelativePosition_V3.Y = -6.;
											FrameArrow.RelativePosition_V3.X = 18.;
											Alerte_Heal.RelativePosition_V3.X = 0.;
											Alerte_Heal.RelativePosition_V3.Y = 17.;
										}
										case "Top": {
											FrameArrow.RelativeRotation = 180.;
											FrameArrow.RelativePosition_V3.Y = 8.;
											FrameArrow.RelativePosition_V3.X = 12.;
											Alerte_Heal.RelativePosition_V3.X = 0.;
											Alerte_Heal.RelativePosition_V3.Y = 17.;
										}
										case "Down": {
											FrameArrow.RelativeRotation = 0.;
											FrameArrow.RelativePosition_V3.Y = -12.;
											FrameArrow.RelativePosition_V3.X = 10.;
											Alerte_Heal.RelativePosition_V3.X = 0.;
											Alerte_Heal.RelativePosition_V3.Y = 17.;
										}
									}
								} else Arrow_Icon.Visible = False;
							} else FrameMarker.Visible = False;
						} else FrameMarker.Visible = False;
						if(PlayerSquad[FrameIndex] == LocalUser.Login){
							FrameMarker.Visible = False;
							FrameInfo.Visible = False;
						}
					} 
				}
			}
			
		} else {
			FrameMarker.Visible = False;
			FrameInfo.Visible = False;
		} 
	}
}

CSmPlayer GetPlayerFromName (Text _PlayerName) {
	foreach(Player in Players){
		if (Player.User.Name == _PlayerName) {
			
			return Player;
		}
	}
	return Null;
}

main() {

	Frame_Globale <=> (Page.GetFirstChild("frame-global") as CMlFrame);
	declare Frame_PoleMarker <=> (Page.GetFirstChild("PoleMarkerFrameId") as CMlFrame);
	declare Quad_PoleMaker <=> (Frame_PoleMarker.GetFirstChild("quad-polemarker") as CMlQuad);

	declare netread Integer Net_S_PlayersPerTeam for UI;
	declare netread Text[] SquadForClient for UI;
	declare netread Text[] MatesHealed for UI;
	
	declare Real[Text] DistancesFrom_Mates;
	declare CSmPlayer PlayerOwner;
	declare netread Text[] Net_PlayersNeedHelp for UI;
	declare Text[] MatesNeedHelp;
	declare Integer ListPlayersNeedHelpReceivedTimer;
	declare Integer PrevListPlayersNeedHelpReceivedTimer;
	declare netread Boolean Net_IsHealEnabled for UI;
	
	
	while (True) {
		yield;
		declare Owner <=> GetOwner();
		PlayerOwner <=> GetCSmPlayerFromLogin(LocalUser.Login);
		MatesNeedHelp = Net_PlayersNeedHelp;
		if(PlayerOwner != Null){
			if(PlayerOwner.Armor >= PlayerOwner.ArmorMax){
				SendCustomEvent("{{{Const::C_UIEvent_TeamSelection_PlayersNeedHelpReceived}}}", [LocalUser.Login]);
			}
		}
		foreach(Member in SquadForClient){
			declare Vec3 Mate_Position;
			declare Real DistanceFrom_Mate;
			declare CSmMatePlayer <=> GetCSmPlayerFromLogin(Member);
			if(CSmMatePlayer != Null && PlayerOwner != Null){
				Mate_Position = CSmMatePlayer.Position;
				DistanceFrom_Mate = ML::Distance(PlayerOwner.Position, Mate_Position);	
			}
			DistancesFrom_Mates[Member] = DistanceFrom_Mate;
		}
		if(PlayerOwner != Null){
			if(PlayerOwner.RequestsSpectate){
				Frame_PoleMarker.Visible = False;
			}
			if(PlayerOwner != Null){
				if(PlayerOwner.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned){
					Quad_PoleMaker.Visible = True;
					Frame_PoleMarker.Visible = True;
				} else {
					Frame_PoleMarker.Visible = False;
					Quad_PoleMaker.Visible = False;
				} 
			}
		}

		foreach(Mates => Distances in DistancesFrom_Mates){
			if(!SquadForClient.exists(Mates)){
				DistancesFrom_Mates.removekey(Mates);
			}
		}
		if(PlayerOwner != Null){
			if(PlayerOwner == InputPlayer && PlayerOwner.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned){
				Frame_Globale.Visible = False;
			} else {
				if(PlayerOwner != Null){
					if(PlayerOwner.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned){
						ManageLayers(Frame_Globale, Net_S_PlayersPerTeam, SquadForClient, DistancesFrom_Mates, MatesNeedHelp, MatesHealed, Net_IsHealEnabled);
					} else Frame_Globale.Hide();
				}
			}
		}
	}
}
--></script>
</manialink>""";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update library
Void Yield() {
	foreach (Event in PendingEvents) {
		if (Event.Type == CManiaAppPlaygroundEvent::Type::LayerCustomEvent) {
			if (
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_PlayersNeedHelpReceived
			) {
				declare EventData = Text[];
				foreach (Value in Event.CustomEventData) EventData.add(Value);
				SendCustomEvent(Event.CustomEventType, EventData);
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	Layers::Destroy(C_Layer_MatesMarkers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
	Layers::Create(C_Layer_MatesMarkers, Ml_MatesMarkers());
	Layers::SetType(C_Layer_MatesMarkers, CUILayer::EUILayerType::Markers);
}