/**
 * Royal UI common
 */

#Const Version    "2016-10-07"
#Const ScriptName "ManiaApps/Nadeo/ShootMania/Royal/Common.Script.txt"

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_MarkerId_Pole "Marker_Pole"
#Const RoundInfoModule_Eliminator 0
#Const RoundInfoModule_Mode				1
#Const RoundInfoModule_Remaining	2
#Const RoundInfoModule_Power			3

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/** Return the version number of the script
 *
 *  @return   The version number of the script
 */
Text GetScriptVersion() {
  return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *  @return   The name of the script
 */
Text GetScriptName() {
  return ScriptName;
}

// ---------------------------------- //
/** Get the manialink frame id of the pole
 *
 *	@return														The manialink frame id of the pole
 */
Text MarkerId_Pole() {
	return C_MarkerId_Pole;
}

// ---------------------------------- //
/** Enable or disable the 3d markers display
 *
 *	@param	_Team											The declare for support
 *	@param	_Display									True to enable, False to disable
 */
Void SetMarkersVisibility(CTeam _Team, Boolean _Display) {
	if (_Team == Null) return;
	
	declare netwrite Net_Royal_CanDisplayMarkers for _Team = False;
	Net_Royal_CanDisplayMarkers = _Display;
}

// ---------------------------------- //
/** Check if the markers are enabled or disabled
 *
 *	@param	_Team											The declare for support
 *
 *	@return														The markers visibility
 */
Boolean GetMarkersVisibility(CTeam _Team) {
	if (_Team == Null) return False;
	
  declare netread Net_Royal_CanDisplayMarkers for _Team = False;
  return Net_Royal_CanDisplayMarkers;
}

// ---------------------------------- //
/** Enable or disable the round info display
 *
 *	@param	_Team											The declare for support
 *	@param	_Display									True to enable, False to disable
 */
Void SetRoundInfoVisibility(CTeam _Team, Boolean _Display) {
	if (_Team == Null) return;
	
	declare netwrite Net_Royal_CanDisplayRoundInfo for _Team = False;
	Net_Royal_CanDisplayRoundInfo = _Display;
}

// ---------------------------------- //
/** Check if the round info are enabled or disabled
 *
 *	@param	_Team											The declare for support
 *
 *	@return														The round info visibility
 */
Boolean GetRoundInfoVisibility(CTeam _Team) {
	if (_Team == Null) return False;
	
  declare netread Net_Royal_CanDisplayRoundInfo for _Team = False;
  return Net_Royal_CanDisplayRoundInfo;
}

// ---------------------------------- //
/// Get the modules constants
Integer RoundInfoModule_Eliminator() { return RoundInfoModule_Eliminator; }
Integer RoundInfoModule_Mode() { return RoundInfoModule_Mode; }
Integer RoundInfoModule_Remaining() { return RoundInfoModule_Remaining; }
Integer RoundInfoModule_Power() { return RoundInfoModule_Power; }

// ---------------------------------- //
/** Select the modules to display
 *	in the round info UI
 *
 *	@param	_Team											The declare for support
 *	@param	_Modules									The modules to display
 */
Void SetRoundInfoModules(CTeam _Team, Integer[] _Modules) {
	if (_Team == Null) return;
	
	declare netwrite Net_Royal_RoundInfoModulesUpdate for _Team = Now;
	declare netwrite Net_Royal_RoundInfoModules for _Team = Integer[];
	Net_Royal_RoundInfoModulesUpdate = Now;
	Net_Royal_RoundInfoModules = _Modules;
}

// ---------------------------------- //
/** Save the name of the player that
 *	eliminated the given player
 *
 *	@param	_Player										The eliminated player
 *	@param	_Name											The name of the eliminator
 */
Void SetEliminator(CSmPlayer _Player, Text _Name) {
	if (_Player == Null) return;
	
	declare netwrite Net_Royal_Eliminator for _Player = "";
	Net_Royal_Eliminator = _Name;
}

// ---------------------------------- //
/** Set the number of players remaining in the round
 *
 *	@param	_Team											The declare for support
 *	@param	_Nb												The number of players
 */
Void SetRemainingPlayersNb(CTeam _Team, Integer _Nb) {
	if (_Team == Null) return;
	
	declare netwrite Net_Royal_RemainingPlayersNb for _Team = 0;
	Net_Royal_RemainingPlayersNb = _Nb;
}

// ---------------------------------- //
/** Set the royal mode 
 *
 *	@param	_Team											The declare for support
 *	@param	_Mode											The mode (teams or free for all)
 */
Void SetMode(CTeam _Team, Text _Mode) {
	if (_Team == Null) return;
	
	declare netwrite Net_Royal_Mode for _Team = "";
	Net_Royal_Mode = _Mode;
}

// ---------------------------------- //
/** Set player power level and action variant
 *
 *	@param	_UI												The declare for support
 *	@param	_PowerLevel								The power level ( 0. <= power level <= 1.)
 *	@param	_ActionVariant						The action variant
 */
Void SetPower(CSmPlayer _Player, Real _PowerLevel, Integer _ActionVariant) {
	if (_Player == Null) return;
	
	declare netwrite Net_Royal_PowerLevel for _Player = 0.;
	declare netwrite Net_Royal_ActionVariant for _Player = 0;
	Net_Royal_PowerLevel = _PowerLevel;
	Net_Royal_ActionVariant = _ActionVariant;
}

// ---------------------------------- //
/** Show or hide the small scores table
 *	displaying the session and games scores
 *
 *	@param	_Visible									True to show, False to hide
 */
Void SetSideScoresTableVisibility(CTeam _Team, Boolean _Visible) {
	if (_Team == Null) return;
	
	declare netwrite Net_RoyalExpState_IsVisible for _Team = True;
	Net_RoyalExpState_IsVisible = _Visible;
}

// ---------------------------------- //
/// Unload the library
Void Unload() {
  
}

// ---------------------------------- //
/// Load the library
Void Load() {
  Unload();
}