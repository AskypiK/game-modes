/**
 * RoyalSquad team UI
 */
#Const Version    "2018-06-25"
#Const ScriptName "ManiaApps/Nadeo/TeamSelection_Client2.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "ManiaApps/Nadeo/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/ShootMania/Royal/Constants2.Script.txt" as Const

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Layer_TeamSelection "MultiPlayer_TeamSelection"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Private
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the manialink of the RoyalSquad UI
 *
 *  @return                           RoyalSquad UI manialink
 */
Text Private_GetTeamSelectionML() {
	///For Localisation
	//L16N [Royal] Used to tell the players that they can capture the pole
	declare RoyalSquad_PressHToShowHelp_Text = _("Press H to show help");
	//L16N [Royal] Used to tell the players that they can press ready to play
	declare RoyalSquad_Ready_Text = _("READY");
	//L16N [Royal] Used to tell the players that they can press cancel to cancel the ready button
	declare RoyalSquad_Cancel_Text = _("CANCEL");
	//L16N [Royal] Used for a button to hide the menu
	declare RoyalSquad_HideMenu_Text = _("Hide Menu");
	//L16N [Royal] Used for a button to show the menu
	declare RoyalSquad_ShowMenu_Text = _("Show Menu");
	//L16N [Royal] Used to tell the players that the system is searching a team to send him in
	declare RoyalSquad_SearchingForTeam_Text = _("Searching for Squad");
	//L16N [Royal] Used to tell the players that they are waiting for the team to be completed
	declare RoyalSquad_WaitingForTeamToComplete_Text = _("Waiting for Squad to complete");
	//L16N [Royal] Used to tell the players that they are waiting for other players to create a team
	declare RoyalSquad_SearchingForPlayers_Text = _("Searching for Players");
	//L16N [Royal] Used to tell the players that there team is now complete
	declare RoyalSquad_TeamIsComplete_Text = _("Squad is complete");
	//L16N [Royal] Used to tell the players that they have to wait until the next round to play
	declare RoyalSquad_WaitForNextRound_Text = _("Wait for next round");
	//L16N [Royal] Used to tell the players that they can click on the button to create a Squad
	declare RoyalSquad_CreateTeam_Text = _("CREATE SQUAD");
	//L16N [Royal] Used to tell the players that they can click on the button to leave their team
	declare RoyalSquad_LeaveTeam_Text = _("Leave Squad");
	//L16N [Royal] Used in a menu with the list of players to invite them in your team
	declare RoyalSquad_Invite_Text = _("Invite");
	//L16N [Royal] Used in a menu for the Friends list on the server
	declare RoyalSquad_Friends_Text = _("Friends");
	//L16N [Royal] Tell the players that they have no friends on the server
	declare RoyalSquad_NoFriends_Text = _("No Friends");
	//L16N [Royal] Used in a menu for the list of all players in the server
	declare RoyalSquad_Players_Text = _("Players");
	//L16N [Royal] Used in a menu for the list of the invitations received by the player
	declare RoyalSquad_Invitations_Text = _("Invitations");
	//L16N [Royal] Used in a menu for the list of invitations is empty
	declare RoyalSquad_NoInvitation_Text = _("No Invitation");
	//L16N [Royal] Tell the players that they can click on the invitation to accept it
	declare RoyalSquad_ClickToAccept_Text = _("click to accept");
	//L16N [Royal] Tell the players that their team is below this text
	declare RoyalSquad_YourTeam_Text = _("Your Squad");
	//L16N [Royal] Tell the players that a player is already in a team
	declare RoyalSquad_InATeam_Text = _("In a Squad");
	//L16N [Royal] Tell the players that a player is already in a team
	declare RoyalSquad_InYourTeam_Text = _("In your Squad");
	//L16N [Royal] Tell the players that they can click on a player name to invite
	declare RoyalSquad_ClickToInvite_Text = _("click to invite");
	//L16N [Royal] Tell the players that a mate is recquired in the block
	declare RoyalSquad_EmptySlot_Text = _("Empty Slot");
	//// IMAGES FOR MANIALINK
	declare Img_LeavePorte = "file://Media/Manialinks/Nadeo/TeamSelectionModule/ASSETS_UI_ICONES_Leave_Porte.dds";
	declare Img_LeaveArrow = "file://Media/Manialinks/Nadeo/TeamSelectionModule/ASSETS_UI_ICONES_Leave_fleche.dds";
	declare Img_CadreReady = "file://Media/ManiaLinks/Nadeo/TeamSelectionModule/ASSET_UI_SquadRoyal_Frame_Ready.dds";
	declare Img_CadreValidate = "file://Media/ManiaLinks/Nadeo/TeamSelectionModule/ASSETS_512x512_SquadRoyal_Tuto_CadreValidate.dds";
	declare Img_CadreTuto_Score = "file://Media/ManiaLinks/Nadeo/TeamSelectionModule/ASSETS_512x512_SquadRoyal_Tuto_CadreScore.dds";
	declare Img_CadreReady_V2 = "file://Media/ManiaLinks/Nadeo/TeamSelectionModule/ASSETS_512x512_SquadRoyal_Tuto_CadreReady.dds";
	
	
	declare Color_HasTeam = TL::ToColor("d30000");
	declare Color_InvitationReceived = TL::ToColor("ff7f00");
	declare Color_InvitationSent = TL::ToColor("3fc2ff");
	declare Vec3 White = TL::ToColor("FFFFFF");
	declare Vec3 Black = TL::ToColor("111111");

	declare PlayersSquadML = "";
	declare PlayersListML = "";
	declare InvitationListML ="";
	declare LeadersListML = "";
	declare RequestsWhenLeaderListML = "";
	declare BuddiesListML				= "";
	declare PlayersPerList = 9;

	declare HorizontalArrayNumber = 0;
	
	//Squad list
	for (I, 0, 3) {
		declare PosY = (I * -9.) + 30.;
		if(I > 1){
			PosY = (I * -9.) + 30.;
		}
		if (I==0){
			PosY = 30.;
		}
			PlayersSquadML ^= """<frameinstance pos="60 {{{PosY}}}" modelid="framemodel-playersquad" />""";
	}
	//Players List
	for (Array_HorizontalIndex, 0, HorizontalArrayNumber){
		declare PosXList = (Array_HorizontalIndex * 67.) - 90;
		for (Array_VerticalIndex, 0, PlayersPerList) {
			declare PosY = (Array_VerticalIndex * -6.5);
		PlayersListML ^= """<frameinstance pos="-32 {{{PosY}}}" modelid="framemodel-playerslist" />""";
		}
	}
	//Buddies List
	for (Array_HorizontalIndex, 0, HorizontalArrayNumber){
		declare PosXList = (Array_HorizontalIndex * 67.) - 90;
		for (Array_VerticalIndex, 0, PlayersPerList) {
			declare PosY = (Array_VerticalIndex * -6.5);
		BuddiesListML ^= """<frameinstance pos="-32 {{{PosY}}}" modelid="framemodel-buddieslist" />""";
		}
	}
	//Invitation List
	for (Array_HorizontalIndex, 0, HorizontalArrayNumber){
		declare PosXList = (Array_HorizontalIndex * 67.) - 90;
		for (Array_VerticalIndex, 0, 5) {
			declare PosY = (Array_VerticalIndex * -6.5);
		InvitationListML ^= """<frameinstance pos="-32 {{{PosY}}}" modelid="framemodel-invitation" />""";
		}
	}

	declare NameTextColor = <0.5, 0.5, 0.5>;
	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="{{{C_Layer_TeamSelection}}}">
		<frame z-index="-1" id="background">
			<quad z-index="-148" size="330 181" valign="center" bgcolor="000000FF" opacity="0.6" id="blurscreen" pos="-161 -0.266"/>
			<quad z-index="-149" size="330 181" valign="center" bgcolor="6F6F6FFF" substyle="BgDialogBlur" bluramount="0.95" opacity="0.3" id="blurscreen" pos="-161 -0.266"/>
			<label pos="0 70" z-index="0" size="70 30" text="Royal Squad" halign="center" id="label-modename" autonewline="1" valign="center" textsize="6" textcolor="FFF" textfont="OswaldMono"/>
			<quad size="5 .5" valign="center" halign="right" bgcolor="FFF" id="ligne-title-sub" pos="23 65.5"/>
			<quad size="46 .5" valign="center" halign="center" bgcolor="FFF" id="ligne-title" pos="0 65"/>
			<label pos="0 62" z-index="0" size="70 30" text="{{{RoyalSquad_PressHToShowHelp_Text}}}" halign="center" id="label-modename" autonewline="1" valign="center" textsize="1" textcolor="FFF" textfont="OswaldMono"/>
		</frame>
		<frame id="frame-leaveteam" hidden="1">
			<quad pos="153 80" z-index="15" size="10 10" bgcolor="FFFFFFFF" opacity="1." halign="center" valign="center" colorize="1A1A1AFF" image="file://Media/ManiaLinks/Nadeo/TeamSelectionModule/Exit.dds" scriptevents="1" id="icon-topleaveteam"/>
			<quad pos="153 80" z-index="1" size="11 11" halign="center" valign="center" opacity="0.8" scriptevents="1" style="Bgs1" substyle="BgColorContour" id="leave-topsquad-contour"/>
			<quad pos="153 80" z-index="16" size="10 10" bgcolor="FFFFFFFF" opacity="0." halign="center" valign="center" scriptevents="1" id="button-leaveteam-icon"/>
		</frame>
		<frame id="frame-hidemenu">
			<label pos="-145 80" z-index="1" size="30 10" text="{{{RoyalSquad_HideMenu_Text}}}" textsize="2" valign="center2" halign="center" id="label-SwitchMenuDisplay" textfont="OswaldMono" textcolor="FFFFFFFF"/>
			<quad pos="-145 80" z-index="0" size="20 36" scale="1." bgcolor="FFFA" style="Bgs1" substyle="BgColorContour" hidden="0" opacity="1.0" id="quad-contourMenuDisplay" image="{{{Img_CadreReady_V2}}}" halign="center" valign="center"/>
			<quad pos="-145 80" z-index="0" size="20 7.5" scale="1." bgcolor="1A1A1AFF" halign="center" valign="center" scriptevents="1" id="button-SwitchMenuDisplay" opacity="0.5"/>
			<label pos="-145 73" z-index="1" size="30 10" text="" textsize="1" valign="center2" halign="center" hidden="1" id="label-SwitchMenuDisplay-TeamState" textfont="OswaldMono" textcolor="FFFFFFFF"/>
		</frame> 
		<frame z-index="0" id="frame-globale">
			<frame id="frame-Menu">
				<frame id="frame-notification" pos="0 -30" hidden="1">
					<label pos="0 0" z-index="0" size="70 30" text="NOTIFICATION" halign="center" id="label-notification" textcolor="FFFFFFFF" autonewline="1" valign="center" textsize="7" textfont="OswaldMono"/>
					<label pos="0 0" z-index="0" size="80 30" text="NOTIFICATION" halign="center" id="label-waitfornextround" textcolor="FFFFFFFF" autonewline="1" valign="center" textsize="7" textfont="OswaldMono"/>
					<label pos="0 0" z-index="0" size="25 25" text="ïƒ¢" halign="center" valign="center2" textsize="3" textemboss="1" id="label-loadingnotif" textfont="OswaldMono" textcolor="FFFFFFFF"/>
					<quad pos="0 1" z-index="-1" size="105 35" halign="center" valign="center" bgcolor="1A1A1AFF" opacity="1."  id="quad-backgroundnotification"/>
				</frame>
				<frame id="frame-tophome">
					<label pos="0 -81" z-index="0" size="108 10" text="" halign="center" id="label-playersavailable" valign="center" textsize="2" textemboss="1" textfont="OswaldMono" textcolor="FFFFFFFF"/>
				</frame>
				<frame id="frame-autojointeam">
					<quad pos="0 10" z-index="0" size="99 106" scale="1." bgcolor="FFFA" style="Bgs1" substyle="BgColorContour" hidden="0" opacity="1.0" id="quad-contour" image="{{{Img_CadreReady_V2}}}" halign="center" valign="center"/>
					<quad pos="0 10" z-index="0" size="99 22" scale="1." bgcolor="1A1A1AFF" halign="center" valign="center" scriptevents="1" id="button-autojoin" opacity="0.5"/>
					<label pos="0 9" z-index="1" size="80 30" scale="2." text="{{{RoyalSquad_Ready_Text}}}" textcolor="FFFFFFFF" opacity="1.0" halign="center" id="label-autojoin" valign="center2" textsize="6" textemboss="1" textfont="OswaldMono"/>
					<quad pos="0 10" z-index="0" size="103 130" scale="1." bgcolor="FFFA" hidden="1" opacity="1." id="quad-CallToAction" image="file://Media/ManiaLinks/Nadeo/TeamSelectionModule/ASSETS_512x512_SquadRoyal_Tuto_Ready_CallToAction.dds" halign="center" valign="center"/>
				</frame>
					<frame pos="-48 -40" id="frame-pager" hidden="1" opacity="0.5">
						<quad pos="0 0" z-index="0" size="10 10" scale="0.8" halign="right" valign="center" style="Icons64x64_1" substyle="ArrowDown" scriptevents="1" id="button-page-prev"/>
						<label pos="5 0" size="20 10" scale="0.8" halign="center" valign="center2" text="0/0" class="text-default" id="label-page" textfont="OswaldMono" textcolor="FFFFFFFF"/>
						<quad pos="10 0" size="10 10" scale="0.8" valign="center" style="Icons64x64_1" substyle="ArrowNext" scriptevents="1" id="button-page-next" />
					</frame>
					<frame pos="-48 -40" id="frame-buddiespager" hidden="1" opacity="0.5">
						<quad pos="0 0" z-index="0" size="10 10" scale="0.8" halign="right" valign="center" style="Icons64x64_1" substyle="BuddiesArrowDown" scriptevents="1" id="button-Buddiespage-prev"/>
						<label pos="5 0" size="20 10" scale="0.8" halign="center" valign="center2" text="0/0" class="text-default" id="label-Buddiespage" textfont="OswaldMono" textcolor="FFFFFFFF"/>
						<quad pos="10 0" size="10 10" scale="0.8" valign="center" style="Icons64x64_1" substyle="ArrowNext" scriptevents="1" id="button-Buddiespage-next" />
					</frame>
					<frame id="frame-teaminautofill" pos="0 10" hidden="1">
						<quad pos="0 -75" z-index="0" size="45 50" scale="2" bgcolor="FFFA" opacity="0." id="quad-autofillteamcontour" image="{{{Img_CadreReady_V2}}}" halign="center" valign="center"/>
						<quad pos="0 -75" z-index="0" size="44.5 9.6" scale="2" bgcolor="000F" halign="center" valign="center" scriptevents="1" id="button-autofillteam" opacity="0.5"/>
						<label pos="0 -76" z-index="25" size="25 15" scale="2" text="{{{RoyalSquad_Ready_Text}}}" textcolor="FFFFFFFF" opacity="1.0" halign="center" id="label-autofill" valign="center2" textsize="4" textfont="OswaldMono"/>
						<label pos="0 -60" z-index="25" size="35 15" scale="1.2" text="" opacity="1.0" halign="center" id="label-alert-needmates" valign="center" textsize="2" textfont="OswaldMono" textcolor="FFFFFFFF"/>
					</frame>
					<frame id="frame-leavesquad" pos="72 -59" hidden="0">
						<label pos="0 0" z-index="1" size="30 10" text="{{{RoyalSquad_LeaveTeam_Text}}}" textsize="2"  valign="center2" halign="center" id="label-leaveteam" textfont="OswaldMono" textcolor="FFFFFFFF"/>
						<quad pos="0 0" z-index="1" size="25 22"  halign="center" valign="center" opacity="1."  id="leave-squad-contour" image="{{{Img_CadreReady}}}" />
						<quad pos="0 0" z-index="1" size="24 7.5"  halign="center" valign="center" opacity="0.3" scriptevents="1" bgcolor="1A1A1AFF" id="leave-squad-button" />
					</frame>
					<frame id="frame-menu-playerslist">
						<frame id="frame-menu-buttonaddplayer">
							<quad pos="0 -70" z-index="0" size="52 51" scale="0.8" bgcolor="FFFA" style="Bgs1" substyle="BgColorContour" image="{{{Img_CadreReady}}}" hidden="0" opacity="1.0" id="quad-contourCreateTeam" halign="center" valign="center"/>
							<quad pos="0 -70" z-index="0" size="50 16" scale="0.8" bgcolor="1A1A1AFF" halign="center" valign="center" scriptevents="1" id="button-playerlist" opacity="0.5"/>
							<label pos="0 -70.5" z-index="1" size="40 10"  text="{{{RoyalSquad_CreateTeam_Text}}}" textsize="4" textemboss="1" valign="center2" halign="center" id="label-Addplayer" textfont="OswaldMono"/>
							<quad pos="5 -18" z-index="2" size="23 0.5" scale="0.8" bgcolor="FFFFFFFF" valign="center" halign="center" hidden="1" id="quad-addplayerlist" opacity="0." scriptevents="1"/>
						</frame>
						<frame id="Menu-PlayerList-HeaderFooter" pos="-40 -2" hidden="1">
							<label pos="-31 40" z-index="0" size="30 10" text="{{{RoyalSquad_Invite_Text}}}" textsize="2"  valign="center2" halign="left" id="label-playerlistmenu" textfont="OswaldMono"/>
							<quad pos="-32 37" z-index="0" size="61.5 0.8" scale="0.8" valign="center2" halign="left" bgcolor="FFFF" id="QuadPlayerListTop-Small"/>
							<quad pos="-32 37" z-index="0" size="80 0.8" scale="0.8" valign="center2" halign="left" bgcolor="FFFF" opacity="0.7" id="QuadPlayerListTop-Big"/>
							<quad pos="32 37.5" z-index="0" size="4 0.8" scale="0.8" valign="center2" halign="right" bgcolor="FFFF" id="QuadPlayerListTop-sub-Players" />
							<quad pos="15.5 37.5" z-index="0" size="4 0.8" scale="0.8" valign="center2" halign="center" bgcolor="FFFF" id="QuadPlayerListTop-sub-Friends" />
							<frame id="frame-sortavailablefirst">
								<quad pos="-37 40" z-index="5" size="8 8" valign="center2" halign="center" opacity="1." image="file://Media/ManiaLinks/Nadeo/TeamSelectionModule/SortInvites.dds" id="button-sortplayerslist-img"/>
								<quad pos="-37 40" z-index="5" size="9 9" bgcolor="1A1A1AFF" valign="center2" halign="center" scriptevents="1" opacity=".3" id="button-sortplayerslist"/>
							</frame>
							<frame id="frame-ongletplayerlist">
									<quad pos="9 40" z-index="-15" size="15 5" valign="center2" halign="center"  bgcolor="6F6F6FFF" scriptevents="1" opacity="0." id="quad-buddieslist"/>
									<quad pos="9 40" z-index="-14" size="12 11" valign="center2" halign="center"  bgcolor="6F6F6FFF" id="quad-buddieslist-cadre"  opacity="0."  image="{{{Img_CadreReady}}}"/>
									<quad pos="9 40" z-index="0" size="15 5" valign="center2" halign="center"  bgcolor="ff5b00" opacity="0." scriptevents="1" id="button-buddieslist" />
									<label pos="9 40" z-index="1" size="15 5" text="{{{RoyalSquad_Friends_Text}}}" valign="center2" textsize="1" halign="center"  bgcolor="FFFA" textemboss="1" id="label-buddieslist" textfont="OswaldMono"/>
									<label pos="9 45" z-index="1" size="30 5" text="" valign="center2" textsize="2" halign="center" hidden="1"  bgcolor="FFFA" id="label-nobuddies" textfont="OswaldMono"/>
									<quad pos="24 40" z-index="0" size="15 5" valign="center2" halign="center"  bgcolor="6F6F6FFF" scriptevents="1" opacity="0." id="button-playerslist" />
									<quad pos="24 40" z-index="-15" size="15 5" valign="center2" halign="center"  bgcolor="6F6F6FFF" scriptevents="1" id="quadonglet-playerslist" />
									<quad pos="24 40" z-index="-14" size="12 11" valign="center2" halign="center" bgcolor="6F6F6FFF" id="quadonglet-playerslist-cadre" image="{{{Img_CadreReady}}}"/>
									<label pos="24 40" z-index="1" size="15 5" text="{{{RoyalSquad_Players_Text}}}" valign="center2" textsize="1" halign="center"  bgcolor="FFFA" textemboss="1" id="label-playerslist" textfont="OswaldMono"/>
							</frame>
							<frame id="Menu-PlayerList-Footer">
								<quad pos="0 -32" z-index="0" size="80 0.8" valign="center2" halign="center" scale="0.8" bgcolor="FFFF" id="QuadPlayerListBottom"/>
								<quad pos="99 -5" z-index="-10" size="52 6"  bgcolor="FFFA" style="Bgs1" substyle="BgColorContour" id="Quad-entrycontour" hidden="1"/>
								<entry pos="100 -6.25" z-index="0" size="50 5" textsize="2" default="Type player name..." id="playerlogin-entry" hidden="1"/>
							</frame>
						</frame>
					</frame>
					<frame id="frame-menu-invitationlist">
						<frame id="Menu-InvitationList-HeaderFooter">
							<label pos="0 -15" z-index="0" size="30 10" text="{{{RoyalSquad_Invitations_Text}}}" textsize="3" valign="center2" halign="center" id="label-invitationmenu" textfont="OswaldMono"/>
							<quad pos="0 -18" z-index="-10" size="80 0.8" scale="0.8" valign="center2" halign="center" bgcolor="FFFF" id="QuadInvitationListTop"/>
							<quad pos="32 -17.5" z-index="-10" size="11 0.8" scale="0.8" valign="center2" halign="right" bgcolor="FFFF" id="QuadInvitationListTop-sub"/>
							<frame id="Menu-InvitationList-Footer">
								<quad pos="0 -58.5" z-index="-10" size="80 0.8" valign="center2" halign="center" scale="0.8" bgcolor="FFFF" id="QuadInvitationListBottom"/>
							</frame>
						</frame>
					</frame>
			</frame>
			<framemodel id="framemodel-playersquad">
				<frame id="SquadMember">
					<label pos="0 1.5" z-index="1" size="45 8" halign="center" valign="center" text="" textsize="1.5" id="label-membername" textfont="OswaldMono"/>
					<label pos="0 -2" z-index="1" size="30 5" halign="center" valign="center" textsize="1" text="Squad Member" hidden="0" id="squadmember-hierarchy" textcolor="7E7E7EAA" textfont="OswaldMono"/>
					<quad  pos="0 0" z-index="4" size="50 20" halign="center" valign="center" bgcolor="11111100" opacity="1." id="quad-squadbackground" />
					<quad  pos="0 0" z-index="0" size="50 8" valign="center" halign="center" bgcolor="111111FF" style="Bgs1" substyle="BgDialogBlur" opacity="0.5" bluramount="0.7" id="blur-SquadBlur"/>			
				</frame>
			</framemodel>
			
			<framemodel id="framemodel-invitation">
				<frame pos="0">
					<quad z-index="0" size="64 6" valign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1"  pos="0 0"/>
					<quad z-index="1" size="64 6" valign="center" bgcolor="000F" opacity="1." hidden="1" id="quad-RequesterOver" />
					<quad z-index="1" size="64 6" valign="center" bgcolor="111111FF" bgcolorfocus="1A1A1AFF" opacity="0.3" id="button-requester" scriptevents="1"  pos="0 0"/>
					<quad pos="3 0" z-index="6" size="4 4" halign="center" valign="center" bgcolor="FFFA" opacity=".5" image="file://Media/Manialinks/Nadeo/TeamSelectionModule/InvitationReceived.dds" hidden="1" id="quad-requestimg"/>
					<label pos="8 0" z-index="3" size="37 6" textsize="1.5" valign="center2" class="text-default" id="label-requester" textcolor="7E7E7EFF" halign="left" textfont="OswaldMono"/>
					<label pos="55 0" z-index="7" size="15 6" halign="center" valign="center2" textemboss="0" textcolor="FFFF" hidden="1" text="{{{RoyalSquad_ClickToAccept_Text}}}" textsize="1.3" id="label-clicktoaccept" textfont="OswaldMono"/>
					<quad pos="4 -2" z-index="5" size="80 0.5" id="quad-underline" />
				</frame>
			</framemodel>
			<frame id="frame-squadmembers" pos="0 -2" hidden="1">
				{{{PlayersSquadML}}}
			</frame>
			<frame id="headerfooter-mainsquad">
				<quad pos="60 35" z-index="-10" size="60 0.8" valign="center2" halign="center" scale="0.8" bgcolor="FFFF" id="QuadMateListTop"/>
				<quad pos="84 35.5" z-index="-10" size="5 0.8" valign="center2" halign="right" scale="0.8" bgcolor="FFFF" id="QuadMateListTop-sub"/>
				<quad pos="60 -32.5" z-index="-10" size="60 0.8" valign="center2" halign="center" scale="0.8" bgcolor="FFFF" id="QuadMateListBottom"/>
				<quad pos="84 -32" z-index="-10" size="5 0.8" valign="center2" halign="right" scale="0.8" bgcolor="FFFF" id="QuadMateListBottom-sub"/>
				<label pos="37 39" z-index="3" size="60 6" textsize="1.5" text="{{{RoyalSquad_YourTeam_Text}}}" valign="center" halign="left" class="text-default" id="label-yourteamheader" textfont="OswaldMono"/>
			</frame>
			
			<frame id="frame-list-players" pos="-40 30" hidden="1">
				{{{PlayersListML}}}
			</frame>			
			<frame id="frame-buddies-list" pos="-40 30" hidden="1">
				{{{BuddiesListML}}}
			</frame>
			<frame id="frame-list-invitation" pos="0 -22" hidden="1">
				{{{InvitationListML}}}
			</frame>
			<framemodel id="framemodel-playerslist">
				<quad z-index="0" size="64 6" valign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0." bluramount="0.7" id="blur-OnOver"/>
				<quad z-index="1" size="64 6" valign="center" bgcolor="000F" opacity="0.2" hidden="1" id="quad-OnOver"/>
				<quad z-index="4" size="64 6" hidden="1" valign="center" bgcolor="d7a5a5" opacity="0.3" scriptevents="1" id="quad-playerinteam" />
				<label pos="55 0" z-index="4" size="15 6" halign="center" valign="center2" textemboss="0" textcolor="7E7E7EFF" text="{{{RoyalSquad_InATeam_Text}}}" textsize="1" id="label-inateam" textfont="OswaldMono"/>
				<label pos="55 0" z-index="7" size="15 6" halign="center" valign="center2" textemboss="0" textcolor="FFFF" hidden="1" text="{{{RoyalSquad_ClickToInvite_Text}}}" textsize="1.3" id="label-clicktoinvite" textfont="OswaldMono"/>
				<quad z-index="5" size="64 6" valign="center" bgcolor="111111FF" opacity="0.3" scriptevents="1" id="button-player" />
				<label pos="4 0" z-index="6" size="40 6" valign="center2"  textsize="2" id="label-name" opacity="0.5" textcolor="FFFFFFFFFF"  textfont="OswaldMono"/>
				<quad pos="-5 0" z-index="6" halign="center" valign="center" size="6 6" opacity="1." image="file://Media/Manialinks/Nadeo/TeamSelectionModule/ASSET_UI_SquadRoyal_Frame_Invite.dds" scriptevents="1" id="quad-invitecontour" />
				<quad pos="-5 0" z-index="6" halign="center" valign="center" size="4 4" bgcolor="FFFA" opacity="1." image="file://Media/Manialinks/Nadeo/TeamSelectionModule/InvitationSent.dds" hidden="1" id="quad-playerselected"/>
			</framemodel>
			<framemodel id="framemodel-buddieslist">
				<quad z-index="0" size="64 6" valign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0." bluramount="0.7" id="blur-buddyOnOver"/>
				<quad z-index="1" size="64 6" valign="center" bgcolor="000F" opacity="0.2" hidden="1" id="quad-buddyOnOver"/>
				<quad z-index="4" size="64 6" hidden="1" valign="center" bgcolor="d7a5a5" opacity="0.3" id="quad-buddyplayerinteam" />
				<quad z-index="7" size="64 6" valign="center" bgcolor="111111FF" opacity="0.3" scriptevents="1" id="button-buddies" />
				<label pos="4 0" z-index="8" size="40 6" valign="center2"  textsize="2" id="label-buddyname" opacity="0.5" textcolor="FFFFFFFFFF"  textfont="OswaldMono"/>
				<quad pos="-5 0" z-index="6" halign="center" valign="center" size="6 6" opacity="1." image="file://Media/Manialinks/Nadeo/TeamSelectionModule/ASSET_UI_SquadRoyal_Frame_Invite.dds" scriptevents="1" id="quad-buddyinvitecontour" />
				<quad pos="-5 0" z-index="6" halign="center" valign="center" size="4 4" bgcolor="FFFA" opacity="1." image="file://Media/Manialinks/Nadeo/TeamSelectionModule/InvitationSent.dds" hidden="1" id="quad-buddyplayerselected"/>
			</framemodel>
		</frame>
		
		<script><!--

#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "AnimLib" as AL

declare Integer G_RefreshUITime;
declare Integer G_PlayersAvailable;
declare Boolean G_IsMouseOver_AutoJoin;
declare Boolean G_IsMouseOver_CreateTeam;
declare Boolean G_IsMouseOver_TeamReady;
declare Boolean G_IsMouseOver_LeaveTeam;
declare Boolean G_SortInTeamPlayersLast;
declare Real G_X;
declare Real G_OpacitySentQuad;
declare Boolean IsSwitchDisplayOn;
declare CMlFrame G_PrevLastOngletVisible;
declare Boolean G_LastState_Member;
CPlayer GetOwner() {
	if (GUIPlayer != Null) return GUIPlayer;
	return InputPlayer;
}

// Return the CPlayer associate to the Id
CPlayer GetPlayerFromId (Ident _PlayerId) {
	foreach (Player in Players){
		if (Player.Id == _PlayerId) {
			return Player;
		}
	}
	return Null;
}

CPlayer GetPlayerFromLogin (Text _PlayerName) {
	foreach(Player in Players){
		if (Player.User.Login == _PlayerName) {
			return Player;
		}
	}
	return Null;
}

Ident GetIdFromName(Text _Login){
	foreach(Player in Players){
		if (Player.User.Name == _Login){
			return Player.Id;
		}
	}
	return NullId;
}

Ident GetIdFromLogin(Text _Login){
	foreach(Player in Players){
		if (Player.User.Login == _Login){
			return Player.Id;
		}
	}
	return NullId;
}

Text GetLoginFromId(Ident _Id){
	foreach(Player in Players){
		if(Player.Id == _Id){
			return Player.User.Login;
		}
	}
	return "";
}

Text GetNameFromLogin(Text _Login){
	foreach(Player in Players){
		if(Player.User.Login == _Login){
			return Player.User.Name;
		}
	}
	return "";
}

Text GetLoginFromName(Text _Name){
	foreach(Player in Players){
		if(Player.User.Name == _Name){
			return Player.User.Login;
		}
	}
	return "";
}
// Return the CPlayer associate to the name
CPlayer GetPlayerFromName (Text _PlayerName) {
	foreach(Player in Players){
		if (Player.User.Login == _PlayerName) {
			
			return Player;
		}
	}
	return Null;
}

CPlayer GetPlayerFromUserName(Text _PlayerName){
	foreach(Player in Players){
		if(Player.User.Name == _PlayerName){
			return Player;
		}
	}
	return Null;
}

Integer UpdatePager(CMlFrame _Frame_Pager, Integer _ItemsPerPage, Integer _ItemsCount, Integer _CurrentPage, Boolean _IsClicked, Boolean _Frame_PlayersList_Visible) {
	if (_ItemsPerPage <= 0) return 1;

	// Find page max
	declare PageMax = _ItemsCount / _ItemsPerPage;
	if (_ItemsCount % _ItemsPerPage != 0) PageMax += 1;
	declare CurrentPage = _CurrentPage;
	if (CurrentPage < 1) CurrentPage = 1;
	if (CurrentPage > PageMax) CurrentPage = PageMax;

	// Update pager UI
	if (_Frame_Pager != Null) {
		if (PageMax <= 1 || _Frame_PlayersList_Visible == False) {
			_Frame_Pager.Visible = False;
		}
		else {
			declare Label_Page <=> (_Frame_Pager.GetFirstChild("label-page") as CMlLabel);
			declare Button_PagePrev <=> (_Frame_Pager.GetFirstChild("button-page-prev") as CMlQuad);
			declare Button_PageNext <=> (_Frame_Pager.GetFirstChild("button-page-next") as CMlQuad);
			Label_Page.Value = CurrentPage^"/"^PageMax;
			if (CurrentPage <= 1) {
				Button_PagePrev.Substyle = "ArrowDisabled";
			} else {
				Button_PagePrev.Substyle = "ArrowPrev";
			}
		if (CurrentPage >= PageMax) {
				Button_PageNext.Substyle = "ArrowDisabled";
			}
			else {
				Button_PageNext.Substyle = "ArrowNext";
			}
			
		}
	}

	return CurrentPage;
}

Integer UpdateBuddiesPager(CMlFrame _Frame_Pager, Integer _ItemsPerPage, Integer _ItemsCount, Integer _CurrentPage, Boolean _IsClicked) {
	if (_ItemsPerPage <= 0) return 1;
	// Find page max
	declare PageMax = _ItemsCount / _ItemsPerPage;
	if (_ItemsCount % _ItemsPerPage != 0) PageMax += 1;
	declare CurrentPage = _CurrentPage;
	if (CurrentPage < 1) CurrentPage = 1;
	if (CurrentPage > PageMax) CurrentPage = PageMax;
	// Update pager UI
	if (_Frame_Pager != Null) {
		if (PageMax <= 1) {
			_Frame_Pager.Visible = False;
		}
		else {
			declare Label_Page <=> (_Frame_Pager.GetFirstChild("label-Buddiespage") as CMlLabel);
			declare Button_PagePrev <=> (_Frame_Pager.GetFirstChild("button-Buddiespage-prev") as CMlQuad);
			declare Button_PageNext <=> (_Frame_Pager.GetFirstChild("button-Buddiespage-next") as CMlQuad);
			Label_Page.Value = CurrentPage^"/"^PageMax;
			if (CurrentPage <= 1) {
				Button_PagePrev.Substyle = "ArrowDisabled";
			} else {
				Button_PagePrev.Substyle = "ArrowPrev";
			}
		if (CurrentPage >= PageMax) {
				Button_PageNext.Substyle = "ArrowDisabled";
			}
			else {
				Button_PageNext.Substyle = "ArrowNext";
			}
		}
	}
	return CurrentPage;
}

Void SetLabelSizeToTextWidth(CMlLabel _LabelToResize){
	_LabelToResize.Size.X = _LabelToResize.ComputeWidth(_LabelToResize.Value);	

}

Void UpdateSquadMembers(
	CMlFrame _Frame_SquadMembers,
	Text[] _SquadMembers,
	Boolean _IsPlayersUpdated,
	Boolean _IsMouseOver,
	Integer _Net_S_PlayersPerTeam,
	Text	_LocalUserLogin
) {
	foreach(FrameIndex => Control in _Frame_SquadMembers.Controls) {
		declare Frame_Member <=> (Control as CMlFrame);
		declare Label_MemberName <=> (Frame_Member.GetFirstChild("label-membername") as CMlLabel);
		declare Label_Hierarchy <=> (Frame_Member.GetFirstChild("squadmember-hierarchy") as CMlLabel);
		declare Quad_ProfilePicture <=> (Frame_Member.GetFirstChild("squadmember-picture") as CMlQuad);
		declare Quad_ProfilePictureContour <=> (Frame_Member.GetFirstChild("squadmember-picturecontour") as CMlQuad);
		Label_MemberName.Value = "";
		if (_Net_S_PlayersPerTeam > 0) {
			if (_Frame_SquadMembers.Controls.count > _Net_S_PlayersPerTeam - 1){
				//Si la frameindex est supÃ©rieure Ã  Net_S
				if(FrameIndex > _Net_S_PlayersPerTeam - 1){
					Frame_Member.Visible = False;
				} else Frame_Member.Visible = True;
				
			}
			if(_SquadMembers.count == 0 || _SquadMembers.count == 1){
				if (FrameIndex == 0) {
					Label_Hierarchy.Value = "ï‚£";
					Label_MemberName.TextSizeReal = 3.;	
					declare MemberName = LocalUser.Name;
					if (MemberName != "") {
						Label_MemberName.Value = MemberName;
					}			
				} else {
					Label_MemberName.Value = "";
					Label_Hierarchy.TextColor = <0.8, 0.8, 0.8>;
					Label_Hierarchy.Value = "";
					Label_Hierarchy.Value ="";
				}
			}
			if (_SquadMembers.existskey(FrameIndex) && FrameIndex < _Net_S_PlayersPerTeam && _SquadMembers.count > 1) {
				if (FrameIndex == 0) {
					Label_Hierarchy.Value = "ï‚£";
					Label_MemberName.TextSizeReal = 3.;				
				} 
				else {
					Label_Hierarchy.Value = "";
					Label_Hierarchy.TextColor = <0.8, 0.8, 0.8>;
					Label_MemberName.TextColor = <1., 1., 1.>;
					Label_MemberName.TextSizeReal = 2.2;
				}
				declare NewMember = _SquadMembers[FrameIndex];
				declare MemberName = GetNameFromLogin(NewMember);
				if (NewMember != "") {
					Label_MemberName.Value = MemberName;
				}
			}
			else {
				if(Label_MemberName.Value == ""){
					Label_MemberName.Value = "{{{RoyalSquad_EmptySlot_Text}}}";
					Label_MemberName.TextSizeReal = 1.2;	
					Label_Hierarchy.TextColor = <0.8, 0.8, 0.8>;
					Label_Hierarchy.Value = "";
					Label_Hierarchy.Value ="";
				}
				
			}
		}
			//Check si il y'a plus de Frame apparu que de Frame possible par team
	}
}
CSmPlayer GetCSmPlayerFromLogin(Text _PlayerName){
	foreach(Player in Players){
		if (Player.User.Login == _PlayerName) {
			
			return Player;
		}
	}
	return Null;
}

Void UpdateInvitationList (
	CMlFrame _Frame_ListInvitation,
	Text[] _RequesterNames) {
	declare Text[] NewRequesterNames;	
	NewRequesterNames = _RequesterNames;
	foreach(FrameIndex => Control in _Frame_ListInvitation.Controls) {
		declare Frame_Requester <=> (Control as CMlFrame);
		declare Label_RequesterName <=> (Frame_Requester.GetFirstChild("label-requester") as CMlLabel);
		declare Image_RequestImg <=> (Frame_Requester.GetFirstChild("quad-requestimg") as CMlQuad);
		
		if (NewRequesterNames.existskey(FrameIndex)) {
			declare NewRequester = NewRequesterNames[FrameIndex];
			declare NewRequesterName = GetNameFromLogin(NewRequester);
			Frame_Requester.Visible = True;
			Image_RequestImg.Visible = True;
			Label_RequesterName.Value = NewRequesterName;
		}
		else if(!NewRequesterNames.existskey(FrameIndex)) {
			Frame_Requester.Visible = False;
			Label_RequesterName.Value = "";
			Image_RequestImg.Visible = False;
		}	
	}
}
Void PlayersAvailable(Integer _PlayersInGame, Integer _PlayersInTeam){
	G_PlayersAvailable = _PlayersInGame - _PlayersInTeam;
	if(G_PlayersAvailable < 0){
		G_PlayersAvailable = 0;
	}
}
declare CMlFrame	G_Frame_Globale;
declare CMlFrame	G_Frame_Pager;
declare CMlFrame	G_Frame_ListPlayers;
declare CMlFrame	G_Frame_ListInvitation;
declare CMlFrame	G_Frame_SquadMembers;
declare CMlQuad		G_Quad_LeaveSquad;
declare CMlQuad		G_Quad_LeaveTeamContour;
declare CMlLabel	G_Label_InvitationMenu;
declare CMlFrame	G_Frame_Menu;
declare CMlLabel  G_Label_SwitchDisplay;
declare CMlLabel	G_Label_SwitchDisplay_TeamState;

declare CMlFrame	G_Frame_Menu_Invitation;
declare CMlFrame	G_Frame_Menu_PlayerListButton;
declare CMlFrame	G_Frame_Menu_PlayerListHeaderFooter;
declare CMlLabel 	G_Label_PlayersAvailable;
declare CMlQuad		G_Quad_ContourCreateTeam;


declare CMlFrame	G_Frame_AutoFillTeam;
declare CMlQuad		G_Button_AutoFillTeam;
declare CMlFrame	G_Frame_HomeMenu;
declare CMlFrame	G_Frame_LeaveTeam;
declare CMlFrame	G_Frame_HideMenu;
declare CMlFrame	G_Frame_Autojoin;
declare CMlLabel	G_Label_HomeMenu;
declare CMlLabel	G_Label_AutoJoin;
declare CMlQuad		G_Button_AutoJoin;
declare CMlFrame 	G_MenuBackGround;
declare CMlQuad 	G_Quad_ContourAutoJoin;
declare CMlEntry 	G_Label_MateSearched;
declare CMlLabel 	G_Label_AutoFill;
declare CMlLabel 	G_Label_AlertNeedMates;
declare CMlQuad		G_Quad_ContourAutoFill;
declare CMlFrame	G_Frame_MenuTop;
declare CMlFrame	G_HeaderMainSquad;

declare CMlFrame G_Frame_LeaveSquadButton;
declare CMlFrame G_Frame_Notification;
declare CMlLabel G_Label_Notification;
declare CMlLabel G_Label_Notif_WaitForNextRound;

declare CMlFrame G_Frame_BuddiesList;
declare CMlFrame G_Frame_BuddiesPager;

declare CMlQuad G_Button_BuddiesList;
declare CMlQuad G_Quad_BuddiesList;
declare CMlQuad G_Quad_BuddiesListCadre;
declare CMlQuad G_Quad_Onglet_PlayersList;
declare CMlQuad G_Quad_Onglet_PlayersListCadre;
declare CMlLabel G_Label_BuddiesOnglet;
declare CMlLabel G_Label_PlayersOnglet;
declare CMlLabel G_Label_NoBuddies_Notif;

declare CMlQuad G_Quad_Notifiation;
declare CMlLabel G_Label_LoadingNotification;
declare CMlQuad G_Quad_InvitationBottom;

declare CMlQuad G_Button_SortPlayersList;
declare CMlQuad G_Quad_TopLineInvitationList_Big;
declare CMlQuad G_Quad_TopLineInvitationList_SubFriends;
declare CMlQuad G_Quad_TopLineInvitationList_SubPlayers;
declare CMlQuad G_Quad_Ready_CallToAction;

declare Text[] BuddiesInServer;
declare Ident[] PlayerList;
Void UpdateBuddiesList(CMlFrame _Frame_ListBuddies, Text[] _BuddiesList, Ident[] _PlayersList, Integer _Page, Text[] _BuddiesSelected, Ident[] _AllPlayersInTeam, Text[] _TeamMates){
	declare netread Text[] Net_PlayersWithNoTeam for Teams[0];
	BuddiesInServer = _BuddiesList;
	foreach(Buddy in BuddiesInServer){
		declare IdOfBuddy = GetIdFromLogin(Buddy);
		if(!_PlayersList.exists(IdOfBuddy)){
			BuddiesInServer.remove(Buddy);
		}
	}
	declare KeyShift = (_Page - 1) * _Frame_ListBuddies.Controls.count;
	foreach(FrameIndex => Control in _Frame_ListBuddies.Controls){
		declare Frame_Buddy <=> (Control as CMlFrame);
		declare Label_BuddyName <=> (Frame_Buddy.GetFirstChild("label-buddyname") as CMlLabel);
		declare Button_Buddy <=> (Frame_Buddy.GetFirstChild("button-buddies") as CMlQuad); 
		declare Quad_BuddyUnderline <=> (Frame_Buddy.GetFirstChild("quad-buddyplayerselected") as CMlQuad);
		declare Quad_OnOver <=> (Frame_Buddy.GetFirstChild("quad-buddyOnOver") as CMlQuad);
		declare Quad_PlayerInTeam <=> (Frame_Buddy.GetFirstChild("quad-buddyplayerinteam") as CMlQuad);
		declare Quad_BuddyInviteContour <=> (Frame_Buddy.GetFirstChild("quad-buddyinvitecontour") as CMlQuad);
		declare Ident[] IdsOfPlayersInTeam;
		foreach(PlayerInTeam in _AllPlayersInTeam){
			if(!IdsOfPlayersInTeam.exists(PlayerInTeam)){
				IdsOfPlayersInTeam.add(PlayerInTeam);
			}
		}
		if (BuddiesInServer.existskey(FrameIndex + KeyShift)){
			declare BuddyPlayer <=> GetPlayerFromLogin(BuddiesInServer[KeyShift + FrameIndex]);
			declare netwrite Net_SelectedPlayer for UI = "";
			declare Text LoginOfPlayer;
			
			Frame_Buddy.Visible = True;
			Quad_PlayerInTeam.Show();
			if(!_AllPlayersInTeam.exists(BuddyPlayer.Id)){
				Frame_Buddy.Visible = True;
				Button_Buddy.Show();
				Quad_PlayerInTeam.Hide();
				if (BuddyPlayer.User.Login != "") {
					Label_BuddyName.Value = BuddyPlayer.User.Name;
					Quad_BuddyInviteContour.Show();
				}	
				//Feedback of invited players
				if(_BuddiesSelected.exists(BuddyPlayer.User.Login)){
					Quad_BuddyUnderline.Visible = True;
				}
				else if (!_BuddiesSelected.exists(BuddyPlayer.User.Login)){
					Quad_BuddyUnderline.Visible = False;
				} 
				if(Quad_BuddyUnderline.Visible == True){
					G_OpacitySentQuad = Now * 0.003;
					Quad_BuddyUnderline.Opacity = ML::Abs(ML::Sin(G_OpacitySentQuad))/1.5 + 0.3;
				}
				declare TeamSelection_Login for Button_Buddy = "";
				TeamSelection_Login = BuddyPlayer.User.Login;
				Net_SelectedPlayer = TeamSelection_Login;
			}
			else if(_AllPlayersInTeam.exists(BuddyPlayer.Id)) {
				
				if(_TeamMates.exists(BuddyPlayer.User.Login)){
				Quad_PlayerInTeam.BgColor =	<0., 0., 0.8>;
				} else Quad_PlayerInTeam.BgColor =	<0.8, 0., 0.>;
				Label_BuddyName.Value = BuddyPlayer.User.Name;
				Button_Buddy.Hide();
				Quad_OnOver.Hide();
				Quad_BuddyInviteContour.Hide();
				Quad_PlayerInTeam.Show();
				Quad_BuddyUnderline.Visible = False;
				Quad_BuddyUnderline.Visible = False;
			}
				
		} else {
			Frame_Buddy.Visible = False;
		}
	}
}
Void UpdatePlayerList(
CMlFrame _Frame_ListPlayers,
Ident[] _PlayerIds,
Integer _Page,
Text[] _PlayerSelected,
Ident[] _AllPlayersInTeam,
Text _PlayerSearched,
Boolean _G_SortInTeamPlayersLast,
Text[] _TeamMates) {
	declare netread Text[] Net_PlayersWithNoTeam for Teams[0];
	declare KeyShift = (_Page - 1) * _Frame_ListPlayers.Controls.count;
	foreach (FrameIndex => Control in _Frame_ListPlayers.Controls) {
		declare Frame_Player <=> (Control as CMlFrame);
		declare Label_Name <=> (Frame_Player.GetFirstChild("label-name") as CMlLabel);
		declare Button_Player <=> (Frame_Player.GetFirstChild("button-player") as CMlQuad); 
		declare Quad_Underline <=> (Frame_Player.GetFirstChild("quad-playerselected") as CMlQuad);
		declare Quad_OnOver <=> (Frame_Player.GetFirstChild("quad-OnOver") as CMlQuad);
		declare Quad_PlayerInTeam <=> (Frame_Player.GetFirstChild("quad-playerinteam") as CMlQuad);
		declare Label_InATeam <=> (Frame_Player.GetFirstChild("label-inateam") as CMlLabel);
		declare Quad_InviteContour <=> (Frame_Player.GetFirstChild("quad-invitecontour") as CMlQuad);
		declare Ident[] IdsOfPlayersInTeam;
		PlayersAvailable(_PlayerIds.count, _AllPlayersInTeam.count);
		foreach(PlayerInTeam in _AllPlayersInTeam){
			if(!IdsOfPlayersInTeam.exists(PlayerInTeam)){
				if(_G_SortInTeamPlayersLast){
					PlayerList.remove(PlayerInTeam);
				}
				IdsOfPlayersInTeam.add(PlayerInTeam);
			}
		}
		if(_G_SortInTeamPlayersLast){
			foreach(IdInTeam in IdsOfPlayersInTeam){
				declare PlayerOfId <=> GetPlayerFromId(IdInTeam);
				if(PlayerOfId != Null){
					if(!PlayerList.exists(IdInTeam) && PlayerOfId.User.Login != LocalUser.Login ){
						PlayerList.add(IdInTeam);
					}
				}
			}
		}
		if (PlayerList.existskey(FrameIndex + KeyShift) && Players.existskey(PlayerList[FrameIndex + KeyShift])){
			declare PlayerFromId <=> GetPlayerFromId(PlayerList[FrameIndex + KeyShift]);
			declare Text LoginOfPlayer;
			if(PlayerFromId != Null){
				LoginOfPlayer = PlayerFromId.User.Login;
			}
			declare netwrite Net_SelectedPlayer for UI = "";
			
			Frame_Player.Visible = True;
		
			if(PlayerFromId != Null){
				if(!_AllPlayersInTeam.exists(PlayerFromId.Id)){
					Button_Player.Show();
					Quad_PlayerInTeam.Hide();
					Label_InATeam.Hide();
					Quad_InviteContour.Show();
					if (PlayerFromId != Null) {
						Label_Name.Value = PlayerFromId.User.Name;
					}	
					//Feedback of invited players
						if(_PlayerSelected.exists(LoginOfPlayer)){
							Quad_Underline.Visible = True;
						}
						else if (!_PlayerSelected.exists(LoginOfPlayer)){
							Quad_Underline.Visible = False;
						}
					declare TeamSelection_Login for Button_Player = "";
					TeamSelection_Login = PlayerFromId.User.Login;
					Net_SelectedPlayer = TeamSelection_Login;
				}
				else if(IdsOfPlayersInTeam.exists(PlayerList[FrameIndex + KeyShift])) {
					Label_Name.Value = PlayerFromId.User.Name;
					Quad_InviteContour.Hide();
					Button_Player.Hide();
					Quad_OnOver.Hide();
					Quad_PlayerInTeam.Show();
					Label_InATeam.Value = "{{{RoyalSquad_InATeam_Text}}}";
					if(_TeamMates.exists(PlayerFromId.User.Login)){
						Quad_PlayerInTeam.BgColor = <0., 0., 0.8>;
						Label_InATeam.Value = "{{{RoyalSquad_InYourTeam_Text}}}";
					} else Quad_PlayerInTeam.BgColor = <0.8, 0., 0.>;
					Label_InATeam.Show();
					Quad_Underline.Visible = False;
				}
			}
			
			
		}
		else {
			Frame_Player.Visible = False;
		}
	}
	//The player search a name
	G_SortInTeamPlayersLast = False;
}
Void InitTeamUI() {
	G_Frame_Globale <=> (Page.GetFirstChild("frame-globale") as CMlFrame);
	G_Frame_Pager <=> (G_Frame_Globale.GetFirstChild("frame-pager") as CMlFrame);
	G_Frame_BuddiesPager <=> (G_Frame_Globale.GetFirstChild("frame-buddiespager") as CMlFrame);
	G_Frame_ListPlayers <=> (G_Frame_Globale.GetFirstChild("frame-list-players") as CMlFrame);
	G_Frame_BuddiesList <=> (G_Frame_Globale.GetFirstChild("frame-buddies-list") as CMlFrame);
	G_Frame_ListInvitation <=> (G_Frame_Globale.GetFirstChild("frame-list-invitation") as CMlFrame);
	G_Frame_SquadMembers <=> (G_Frame_Globale.GetFirstChild("frame-squadmembers") as CMlFrame);
	G_Label_PlayersAvailable <=> (G_Frame_Globale.GetFirstChild("label-playersavailable") as CMlLabel);
	G_Quad_ContourAutoJoin <=> (G_Frame_Globale.GetFirstChild("quad-contour") as CMlQuad);
	G_Quad_ContourCreateTeam <=> (G_Frame_Globale.GetFirstChild("quad-contourCreateTeam") as CMlQuad);
	G_Label_MateSearched <=> (G_Frame_Globale.GetFirstChild("playerlogin-entry") as CMlEntry);
	G_Label_AutoFill <=> (G_Frame_Globale.GetFirstChild("label-autofill") as CMlLabel);
	G_Label_AlertNeedMates <=> (G_Frame_Globale.GetFirstChild("label-alert-needmates") as CMlLabel);
	G_Quad_ContourAutoFill <=> (G_Frame_Globale.GetFirstChild("quad-autofillteamcontour") as CMlQuad);
	G_HeaderMainSquad <=> (G_Frame_Globale.GetFirstChild("headerfooter-mainsquad") as CMlFrame);
	G_Button_BuddiesList <=> (G_Frame_Globale.GetFirstChild("button-buddieslist") as CMlQuad);
	G_Quad_BuddiesList <=> (G_Frame_Globale.GetFirstChild("quad-buddieslist") as CMlQuad);
	G_Quad_BuddiesListCadre <=> (G_Frame_Globale.GetFirstChild("quad-buddieslist-cadre") as CMlQuad);
	G_Quad_Onglet_PlayersList <=> (G_Frame_Globale.GetFirstChild("quadonglet-playerslist") as CMlQuad);
	G_Quad_Onglet_PlayersListCadre <=> (G_Frame_Globale.GetFirstChild("quadonglet-playerslist-cadre") as CMlQuad);
	G_Label_BuddiesOnglet <=> (G_Frame_Globale.GetFirstChild("label-buddieslist") as CMlLabel);
	G_Label_PlayersOnglet <=> (G_Frame_Globale.GetFirstChild("label-playerslist") as CMlLabel);
	G_Label_NoBuddies_Notif <=> (G_Frame_Globale.GetFirstChild("label-nobuddies") as CMlLabel);
	G_Quad_InvitationBottom <=> (G_Frame_Globale.GetFirstChild("QuadInvitationListBottom") as CMlQuad);
	G_Label_InvitationMenu <=> (G_Frame_Globale.GetFirstChild("label-invitationmenu") as CMlLabel);
	G_Frame_Menu <=> (G_Frame_Globale.GetFirstChild("frame-Menu") as CMlFrame);
	G_Frame_Notification <=> (G_Frame_Globale.GetFirstChild("frame-notification") as CMlFrame);
	G_Label_Notification <=> (G_Frame_Globale.GetFirstChild("label-notification") as CMlLabel);
	G_Label_Notif_WaitForNextRound <=> (G_Frame_Globale.GetFirstChild("label-waitfornextround") as CMlLabel);
	G_Quad_Notifiation <=> (G_Frame_Globale.GetFirstChild("quad-backgroundnotification") as CMlQuad);
	G_Label_LoadingNotification <=> (G_Frame_Globale.GetFirstChild("label-loadingnotif") as CMlLabel);
	G_Quad_LeaveSquad <=> (G_Frame_Globale.GetFirstChild("leave-squad-button") as CMlQuad);
	G_Quad_LeaveTeamContour <=> (G_Frame_Globale.GetFirstChild("leave-squad-contour") as CMlQuad);
	G_Frame_LeaveSquadButton <=> (G_Frame_Globale.GetFirstChild("frame-leavesquad") as CMlFrame);
	G_Frame_HideMenu <=> (Page.GetFirstChild("frame-hidemenu") as CMlFrame);
	G_Label_SwitchDisplay <=> (G_Frame_HideMenu.GetFirstChild("label-SwitchMenuDisplay") as CMlLabel);
	G_Label_SwitchDisplay_TeamState <=> (G_Frame_HideMenu.GetFirstChild("label-SwitchMenuDisplay-TeamState") as CMlLabel);
	G_Frame_Menu_Invitation <=> (G_Frame_Menu.GetFirstChild("frame-menu-invitationlist") as CMlFrame);
	G_Frame_Menu_PlayerListButton <=> (G_Frame_Menu.GetFirstChild("frame-menu-playerslist") as CMlFrame);
	G_Frame_Menu_PlayerListHeaderFooter <=> (G_Frame_Menu_PlayerListButton.GetFirstChild("Menu-PlayerList-HeaderFooter") as CMlFrame);
	G_Frame_MenuTop <=> (G_Frame_Globale.GetFirstChild("frame-tophome") as CMlFrame);
	G_Frame_AutoFillTeam <=> (G_Frame_Globale.GetFirstChild("frame-teaminautofill") as CMlFrame);
	G_Button_AutoFillTeam <=> (G_Frame_AutoFillTeam.GetFirstChild("button-autofillteam") as CMlQuad);
	G_Frame_HomeMenu <=> (G_Frame_Globale.GetFirstChild("frame-menu-buttonaddplayer") as CMlFrame);
	G_Frame_LeaveTeam <=> (Page.GetFirstChild("frame-leaveteam") as CMlFrame);
	G_Frame_Autojoin <=> (G_Frame_Globale.GetFirstChild("frame-autojointeam") as CMlFrame);
	G_Label_HomeMenu <=> (G_Frame_Globale.GetFirstChild("label-Addplayer") as CMlLabel);
	G_Label_AutoJoin <=> (G_Frame_Globale.GetFirstChild("label-autojoin") as CMlLabel);
	G_Button_AutoJoin <=> (G_Frame_Globale.GetFirstChild("button-autojoin") as CMlQuad);
	G_MenuBackGround <=> (Page.GetFirstChild("background") as CMlFrame);
	G_Button_SortPlayersList <=> (G_Frame_Globale.GetFirstChild("button-sortplayerslist") as CMlQuad);
	G_Quad_TopLineInvitationList_Big <=> (G_Frame_Globale.GetFirstChild("QuadPlayerListTop-Big") as CMlQuad);
	G_Quad_TopLineInvitationList_SubFriends <=> (G_Frame_Globale.GetFirstChild("QuadPlayerListTop-sub-Friends") as CMlQuad);
	G_Quad_TopLineInvitationList_SubPlayers <=> (G_Frame_Globale.GetFirstChild("QuadPlayerListTop-sub-Players") as CMlQuad);
	G_Quad_Ready_CallToAction <=> (G_Frame_Globale.GetFirstChild("quad-CallToAction") as CMlQuad);
	
}

Void HandleUI_SelectionOnBuddies(Boolean _IsBuddiesList, Text[] _BuddiesInServer) {
	if(_IsBuddiesList) {
		G_Quad_BuddiesList.Opacity	= 1.;
		G_Quad_BuddiesList.Size.Y = 6.;
		G_Quad_BuddiesList.Size.X = 16.;
		G_Quad_Onglet_PlayersList.Size.Y = 3.5;
		G_Quad_Onglet_PlayersList.Size.X = 11.5;
		G_Label_BuddiesOnglet.TextSizeReal = 2.;
		G_Label_PlayersOnglet.TextSizeReal = 1.;
		G_Quad_BuddiesListCadre.Opacity = 0.;
		G_Quad_Onglet_PlayersList.Opacity = 0.3;	
		G_Quad_TopLineInvitationList_Big.Opacity = 0.7;
		G_Quad_TopLineInvitationList_SubPlayers.Opacity  = 0.;
		G_Quad_TopLineInvitationList_SubFriends.Opacity = 1.;
		
	} else {
		G_Quad_BuddiesList.Opacity	= 0.3;
		G_Quad_BuddiesList.Size.Y = 3.5;
		G_Quad_BuddiesList.Size.X = 11.5;
		G_Quad_Onglet_PlayersList.Opacity = 1.;
		G_Quad_Onglet_PlayersList.Size.Y = 6.;
		G_Quad_Onglet_PlayersList.Size.X = 16.;
		G_Label_BuddiesOnglet.TextSizeReal = 1.;
		G_Label_PlayersOnglet.TextSizeReal = 2.;
		if(_BuddiesInServer.count > 0){
			G_Quad_BuddiesList.Opacity = 0.3;
			G_Quad_BuddiesListCadre.Opacity = 1.;
		} else {
			G_Quad_BuddiesList.Opacity = 0.;
			G_Quad_BuddiesListCadre.Opacity = 0.;
		}
		G_Quad_Onglet_PlayersListCadre.Opacity = 0.;
		G_Quad_TopLineInvitationList_Big.Opacity = 1.;
		G_Quad_TopLineInvitationList_SubPlayers.Opacity  = 1.;
		G_Quad_TopLineInvitationList_SubFriends.Opacity = 0.;
	}
}

Boolean HasJustArrived(Boolean _IsMember, Boolean _IsLeader, Boolean _IsInAutoJoin, Boolean _IsSpawned, Boolean _IsPlayerSpectate) {
	return !_IsMember && !_IsLeader && !_IsInAutoJoin && !_IsSpawned && !_IsPlayerSpectate;
}

Void LoadHomeMenu() {
	G_Frame_Menu.Visible = True;
	if(!IsSwitchDisplayOn){
		G_MenuBackGround.Visible 					= False;
		G_Frame_Globale.Visible 					= False;
	} else {
		G_MenuBackGround.Visible 					= True;
		G_Frame_Globale.Visible 					= True;
	}
	G_Frame_Menu_PlayerListButton.Visible 			= True;
	G_Frame_SquadMembers.Visible 								= False;
	G_Frame_ListInvitation.Visible 							= True;
	G_Frame_HomeMenu.Visible 										= True;
	G_Frame_LeaveTeam.Visible 									= False;
	G_Frame_Autojoin.Visible 										= True;
	G_Frame_AutoFillTeam.Visible 								= False;
	G_Frame_ListPlayers.Visible 								= False;
	G_Frame_BuddiesList.Visible									= False;
	G_Label_AutoJoin.Visible 										= True;
	G_Label_AlertNeedMates.Visible 							= False;
	G_Label_HomeMenu.Value 											= "{{{RoyalSquad_CreateTeam_Text}}}";
	G_Label_AutoJoin.Value 											= "{{{RoyalSquad_Ready_Text}}}";
	G_Frame_Menu_Invitation.Visible 						= True;
	G_Frame_Menu_PlayerListHeaderFooter.Visible = False;
	G_Button_AutoJoin.Visible 									= True;
	G_Label_PlayersAvailable.Visible						= True;
	G_Frame_LeaveSquadButton.Visible						= False;
	G_Frame_MenuTop.Visible											= True;
	G_HeaderMainSquad.Visible										= False;
	G_Quad_ContourAutoJoin.Visible							= True;
	G_Frame_Notification.Visible								= False;
	G_Frame_Pager.Visible												=	False;
	G_Frame_HideMenu.Visible										= True;
	G_Label_SwitchDisplay.Value									= "{{{RoyalSquad_HideMenu_Text}}}";
	G_Label_SwitchDisplay_TeamState.Value 			= "No Squad";
	G_Label_SwitchDisplay_TeamState.Visible			= False;
	IsSwitchDisplayOn 													= True;
	G_LastState_Member 													= False;
	G_RefreshUITime = Now;
}

Boolean IsInAutoJoin(Boolean _IsInAutoJoin, Boolean _IsSpectating, Boolean _IsMember) {
	return _IsInAutoJoin && !_IsSpectating && !_IsMember;
}

Void LoadAutoJoinMenu() {
	if(!IsSwitchDisplayOn){
		G_MenuBackGround.Visible 					= False;
		G_Frame_Globale.Visible 					= False;
	} else {
		G_MenuBackGround.Visible 					= True;
		G_Frame_Globale.Visible 					= True;
	}
	G_LastState_Member 													= True;
	G_Frame_LeaveSquadButton.Visible						= False;
	G_Frame_HideMenu.Visible										= True;	
	G_Frame_Globale.Visible 										= True;
	G_Frame_Autojoin.Visible										= True;
	G_Frame_HomeMenu.Visible 										= False;
	G_Frame_ListInvitation.Visible 							= False;
	G_Frame_SquadMembers.Visible 								= False;
	G_Frame_ListPlayers.Visible 								= False;
	G_Frame_BuddiesList.Visible									= False;
	G_Frame_Menu_PlayerListButton.Visible				= False;
	G_Frame_Menu_PlayerListHeaderFooter.Visible = False;
	G_Frame_Menu_Invitation.Visible 						= False;
	G_Frame_AutoFillTeam.Visible 								= False;
	G_Frame_Pager.Visible												= False;
	G_Frame_BuddiesPager.Visible								= False;
	G_Label_PlayersAvailable.Visible						= True;
	G_Frame_MenuTop.Visible											= True;
	G_HeaderMainSquad.Visible										= False;
	G_HeaderMainSquad.Visible										= False;
	G_Frame_Notification.Visible								= True;
	G_Frame_Notification.RelativePosition_V3.Y	= -25.;
	G_Frame_Notification.RelativePosition_V3.X	= 0.;
	G_Quad_Notifiation.Size.X									= 101.;
	G_Quad_Notifiation.Size.Y									= 23.;
	G_Label_LoadingNotification.Visible				= True;
	G_Label_Notification.Value									= "{{{RoyalSquad_SearchingForTeam_Text}}}";
	G_Label_SwitchDisplay_TeamState.Value			= "{{{RoyalSquad_SearchingForPlayers_Text}}}";
	G_Label_Notification.TextSizeReal			= 9.;
	G_Label_Notification.RelativePosition_V3.Y	= 0.;
	G_Label_Notification.RelativePosition_V3.X	= -7.;
	G_Label_Notif_WaitForNextRound.Value			= "";
	G_Label_Notif_WaitForNextRound.RelativePosition_V3.Y = -32.;
	G_Label_LoadingNotification.RelativePosition_V3.X	= 40.;
	G_Label_LoadingNotification.RelativePosition_V3.Y	= 0.5;
	G_Label_LoadingNotification.TextSizeReal = 9.;
	G_Label_AutoJoin.Value 											= "{{{RoyalSquad_Cancel_Text}}}";
	G_RefreshUITime = Now;
}

Boolean IsANonLeaderWaiting(Boolean _IsMember, Boolean _IsLeader, Boolean _IsSpawned, Boolean _IsInAutoJoin, Boolean _IsSpectating, Boolean _InATeamForMode) {
	return _IsMember && !_IsLeader && !_IsSpawned && !_IsInAutoJoin && !_IsSpectating && !_InATeamForMode;
}

Void LoadWaitingTeamOnly() {
	if(!IsSwitchDisplayOn){
		G_MenuBackGround.Visible 					= False;
		G_Frame_Globale.Visible 					= False;
	} else {
		G_MenuBackGround.Visible 					= True;
		G_Frame_Globale.Visible 					= True;
	}
	G_LastState_Member 								= True;
	G_Frame_Pager.Visible		 					= False;
	G_Frame_BuddiesPager.Visible			= False;
	G_Frame_ListPlayers.Visible		 		= False;
	G_Frame_BuddiesList.Visible				= False;
	G_Frame_Autojoin.Visible 			  	= False;
	G_Frame_Menu_Invitation.Visible 	= False;
	G_Frame_HomeMenu.Visible 			 	  = False;
	G_Frame_ListInvitation.Visible 		= False;
	G_Label_PlayersAvailable.Visible	= True;
	G_Frame_LeaveSquadButton.Visible 	= True;
	G_Frame_MenuTop.Visible						= False;
	G_Frame_Notification.Visible			= True;
	G_Label_Notif_WaitForNextRound.Value			= "";
	G_Label_Notif_WaitForNextRound.RelativePosition_V3.Y = -30.;
	G_Label_Notification.Value				= "{{{RoyalSquad_WaitingForTeamToComplete_Text}}}";
	G_Label_SwitchDisplay_TeamState.Value			= "{{{RoyalSquad_SearchingForPlayers_Text}}}";
	G_Label_Notification.TextSizeReal			= 11.;
	G_Label_Notification.RelativePosition_V3.Y	= 10.;
	G_Label_Notification.RelativePosition_V3.X	= 0.;
	G_Label_AlertNeedMates.Visible 							= False;
	G_Frame_HideMenu.Visible										= True;
	G_Frame_Menu_PlayerListButton.Visible				= False;
	G_Frame_Notification.RelativePosition_V3.Y	= 0.;
	G_Frame_Notification.RelativePosition_V3.X	= -45.;
	G_Quad_Notifiation.Size.X									= 80.;
	G_Quad_Notifiation.Size.Y									= 70.;
	G_Label_LoadingNotification.Visible = True;
	G_Label_LoadingNotification.RelativePosition_V3.Y	= -16.;
	G_Label_LoadingNotification.RelativePosition_V3.X	= 0.;
	G_Label_LoadingNotification.TextSizeReal = 15.;
	G_Label_LoadingNotification.RelativeRotation -= 0.1;

	G_Frame_SquadMembers.Visible 	 		= True;
	G_Frame_LeaveTeam.Visible 	 	  	= False;
	G_HeaderMainSquad.Visible					= True;
	G_Frame_Menu.Visible 							= True;
	G_RefreshUITime 									= Now;
}

Boolean IsALeaderWaiting(Boolean _IsMember, Boolean _IsLeader, Boolean _InATeamForMode, Boolean _IsSpawned, Boolean _IsInAutoJoin, Boolean _IsSpectating) {
	return _IsMember && _IsLeader && !_InATeamForMode && !_IsSpawned && !_IsInAutoJoin && !_IsSpectating;
}

Void DebugLog(
	Boolean _IsMember,
	Boolean _IsLeader, 
	Boolean _InATeamForMode, 
	Boolean _IsSpawned, 
	Boolean _AskForMenu, 
	Boolean _IsInAutoJoin,
	Boolean _IsSpectating,
	Boolean _IsInAutoFill) {
	//log(_IsMember^", "^_IsLeader^", "^_InATeamForMode^", "^_IsSpawned^", "^_AskForMenu^", "^_IsInAutoJoin^", "^_IsSpectating^", "^_IsInAutoFill);	
}

Void LoadTeamUI(Boolean _IsMember, Boolean _IsLeader, Boolean _InATeamForMode, Boolean _IsSpawned, Boolean _AskForMenu, Boolean _IsInAutoJoin,	Boolean _IsSpectating,	Boolean _IsInAutoFill,	Boolean _TeamIsFull){
	DebugLog(_IsMember, _IsLeader, _InATeamForMode, _IsSpawned, _AskForMenu, _IsInAutoJoin, _IsSpectating, _IsInAutoFill);
	if(HasJustArrived(_IsMember, _IsLeader, _IsInAutoJoin, _IsSpawned, _IsSpectating)){
		LoadHomeMenu();
	} else if (IsInAutoJoin(_IsInAutoJoin, _IsSpectating, _IsMember)) {
		LoadAutoJoinMenu();
	} else if (IsANonLeaderWaiting(_IsMember, _IsLeader, _IsSpawned, _IsInAutoJoin, _IsSpectating, _TeamIsFull)) {
		LoadWaitingTeamOnly();
	} else if (_IsLeader && _IsInAutoFill && !_IsSpawned && !_IsSpectating && !_TeamIsFull){
		if(!IsSwitchDisplayOn){
			G_MenuBackGround.Visible 					= False;
			G_Frame_Globale.Visible 					= False;
		} else {
			G_MenuBackGround.Visible 					= True;
			G_Frame_Globale.Visible 					= True;
		}
		G_LastState_Member 								= False;
		G_Frame_HideMenu.Visible = True;
		G_Frame_Pager.Visible		 					= False;
		G_Frame_Menu_PlayerListHeaderFooter.Visible = False;
		G_Frame_BuddiesPager.Visible			= False;
		G_Frame_ListPlayers.Visible		 		= False;
		G_Frame_BuddiesList.Visible				= False;
		G_Frame_Autojoin.Visible 			  	= False;
		G_Frame_Menu_Invitation.Visible 	= False;
		G_Frame_HomeMenu.Visible 			 	  = False;
		G_Frame_ListInvitation.Visible 		= False;
		G_Label_AlertNeedMates.Visible 		= False;
		G_Label_PlayersAvailable.Visible	= True;
		G_Frame_LeaveSquadButton.Visible 	= True;
		G_Frame_MenuTop.Visible						= False;
		G_Frame_Notification.Visible			= True;
		G_Label_Notification.Value				= "{{{RoyalSquad_WaitingForTeamToComplete_Text}}}";
		G_Label_SwitchDisplay_TeamState.Value			= "{{{RoyalSquad_SearchingForPlayers_Text}}}";
		G_Label_Notification.TextSizeReal			= 11.;
		G_Label_Notification.RelativePosition_V3.Y	= 10.;
		G_Label_Notification.RelativePosition_V3.X	= 0.;
		G_Label_Notif_WaitForNextRound.Value			= "";
		G_Label_Notif_WaitForNextRound.RelativePosition_V3.Y = -30.;
		G_Frame_Menu_PlayerListButton.Visible				= False;
		G_Frame_Notification.RelativePosition_V3.X	= -45.;
		G_Frame_Notification.RelativePosition_V3.Y = 0.;
		G_Quad_Notifiation.Size.X									= 80.;
		G_Quad_Notifiation.Size.Y									= 70.;
		G_Label_LoadingNotification.Visible = True;
		G_Label_LoadingNotification.RelativePosition_V3.Y	= -16.;
		G_Label_LoadingNotification.RelativePosition_V3.X	= 0.;
		G_Label_LoadingNotification.TextSizeReal = 15.;
		G_Label_LoadingNotification.RelativeRotation -= 0.1;
		G_Frame_LeaveTeam.Visible 	 	  	= False;
		G_Frame_SquadMembers.Visible 	 		= True;
		G_MenuBackGround.Visible 					= True;
		G_HeaderMainSquad.Visible					= True;
		G_Frame_Menu.Visible 							= True;
		G_RefreshUITime 									= Now;
	} else if(_IsMember && _IsInAutoJoin && !_IsSpawned && !_IsSpectating){
		if(!IsSwitchDisplayOn){
			G_MenuBackGround.Visible 					= False;
			G_Frame_Globale.Visible 					= False;
		} else {
			G_MenuBackGround.Visible 					= True;
			G_Frame_Globale.Visible 					= True;
		}
		G_LastState_Member 								= True;
		G_Frame_HideMenu.Visible = True;
		G_Frame_Pager.Visible		 					= False;
		G_Frame_Menu_PlayerListHeaderFooter.Visible = False;
		G_Frame_BuddiesPager.Visible			= False;
		G_Frame_ListPlayers.Visible		 		= False;
		G_Frame_BuddiesList.Visible				= False;
		G_Frame_Autojoin.Visible 			  	= False;
		G_Frame_Menu_Invitation.Visible 	= False;
		G_Frame_HomeMenu.Visible 			 	  = False;
		G_Frame_ListInvitation.Visible 		= False;
		G_Label_AlertNeedMates.Visible 		= False;
		G_Label_PlayersAvailable.Visible	= True;
		G_Frame_LeaveSquadButton.Visible 	= True;
		G_Frame_MenuTop.Visible						= False;
		G_Frame_Notification.Visible			= True;
		G_Label_Notification.Value				= "{{{RoyalSquad_WaitingForTeamToComplete_Text}}}";
		G_Label_SwitchDisplay_TeamState.Value			= "{{{RoyalSquad_SearchingForPlayers_Text}}}";
		G_Frame_Notification.RelativePosition_V3.Y = 0.;
		G_Label_Notification.TextSizeReal			= 10.;
		G_Label_Notification.RelativePosition_V3.Y	= 10.;
		G_Label_Notification.RelativePosition_V3.X	= 0.;
		G_Label_Notif_WaitForNextRound.Value			= "";
		G_Label_Notif_WaitForNextRound.RelativePosition_V3.Y = -30.;
		G_Frame_Menu_PlayerListButton.Visible				= False;
		G_Frame_Notification.RelativePosition_V3.X	= -45.;
		G_Quad_Notifiation.Size.X									= 80.;
		G_Quad_Notifiation.Size.Y									= 70.;
		G_Label_LoadingNotification.RelativePosition_V3.Y	= -16.;
		G_Label_LoadingNotification.RelativePosition_V3.X	= 0.;
		G_Label_LoadingNotification.TextSizeReal = 15.;
		G_Label_LoadingNotification.RelativeRotation -= 0.1;
		G_Label_LoadingNotification.Visible = True;
		G_Frame_LeaveTeam.Visible 	 	  	= False;
		G_Frame_SquadMembers.Visible 	 		= True;
		G_MenuBackGround.Visible 					= True;
		G_HeaderMainSquad.Visible					= True;
		G_Frame_Menu.Visible 							= True;
		G_RefreshUITime 									= Now;
	}
	else if (IsALeaderWaiting(_IsMember, _IsLeader, _TeamIsFull, _IsSpawned, _IsInAutoJoin, _IsSpectating)){
		G_Frame_HideMenu.Visible										= True;
		G_Button_AutoFillTeam.Visible 							= True;
		G_Frame_AutoFillTeam.Visible 								= True;	
		G_Frame_Menu_PlayerListHeaderFooter.Visible = True;
		G_Frame_LeaveTeam.Visible 									= False;
		G_Frame_SquadMembers.Visible								= True;
		G_Frame_Menu_PlayerListButton.Visible				= True;
		G_Frame_HomeMenu.Visible 										= False;
		G_Frame_Autojoin.Visible 										= False;
		G_Frame_ListInvitation.Visible 							= False;
		G_Frame_Menu_Invitation.Visible							= False;
		G_Label_PlayersAvailable.Visible						= True;
		G_Frame_LeaveSquadButton.Visible						= True;
		G_Frame_MenuTop.Visible											= False;
		G_HeaderMainSquad.Visible										= True;
		G_Frame_Menu.Visible 												= True;
		G_Frame_Notification.Visible								= False;
		G_Label_AlertNeedMates.Visible 							= False;
		G_Label_SwitchDisplay_TeamState.Value 			= "Unfull Squad";
		if(G_PrevLastOngletVisible == G_Frame_BuddiesList){
			if(BuddiesInServer.count > 0){
				HandleUI_SelectionOnBuddies(True, BuddiesInServer);
				G_Frame_ListPlayers.Visible								= False;
				G_Frame_BuddiesList.Visible								= True;
				G_Frame_Pager.Visible											= False;
			} else if (BuddiesInServer.count == 0){
				HandleUI_SelectionOnBuddies(False, BuddiesInServer);
				G_Frame_ListPlayers.Visible								= True;
				G_Frame_BuddiesList.Visible								= False;
				G_Frame_Pager.Visible											= True;
			}
		} else if (G_PrevLastOngletVisible == G_Frame_ListPlayers){
				if(BuddiesInServer.count > 0 && G_Frame_BuddiesList.Visible == True || G_LastState_Member){
				HandleUI_SelectionOnBuddies(True, BuddiesInServer);
				G_Frame_ListPlayers.Visible								= False;
				G_Frame_BuddiesList.Visible								= True;
				G_Frame_Pager.Visible											= False;
			} else if(BuddiesInServer.count > 0 && G_Frame_BuddiesList.Visible == False && G_Frame_ListPlayers.Visible == False){
				HandleUI_SelectionOnBuddies(False, BuddiesInServer);
				G_Frame_ListPlayers.Visible								= True;
				G_Frame_BuddiesList.Visible								= False;
				G_Frame_Pager.Visible											= True;
			} else if (BuddiesInServer.count == 0){
				HandleUI_SelectionOnBuddies(False, BuddiesInServer);
				G_Frame_ListPlayers.Visible								= True;
				G_Frame_BuddiesList.Visible								= False;
				G_Frame_Pager.Visible											= True;
			}
		}
		if(!IsSwitchDisplayOn){
			G_MenuBackGround.Visible 					= False;
			G_Frame_Globale.Visible 					= False;
		} else {
			G_MenuBackGround.Visible 					= True;
			G_Frame_Globale.Visible 					= True;
		}
		G_LastState_Member 								= False;
		G_RefreshUITime = Now;
	} else if (_IsMember && _IsLeader && _TeamIsFull && !_IsInAutoJoin && !_IsSpawned && !_IsSpectating){
		if(!IsSwitchDisplayOn){
			G_MenuBackGround.Visible 					= False;
		} else {
			G_MenuBackGround.Visible 					= True;
		}
		G_LastState_Member 												= False;
		G_Frame_HideMenu.Visible									= True;
		G_Frame_Pager.Hide();
		G_Frame_ListPlayers.Visible		 						= False;
		G_Frame_BuddiesList.Visible								= False;
		G_Frame_AutoFillTeam.Visible	 						= False;
		G_Frame_HomeMenu.Visible 			 						= False;
		G_Frame_Autojoin.Visible 			 						= False;
		G_Frame_ListInvitation.Visible 						= False;
		G_Label_PlayersAvailable.Visible					= True;
		G_Frame_LeaveSquadButton.Visible					= True;
		G_Frame_Menu_PlayerListButton.Visible			= False;
		G_Frame_Menu.Visible 											= True;
		G_Frame_LeaveTeam.Visible 		  					= False;
		G_Frame_MenuTop.Visible										= False;
		G_HeaderMainSquad.Visible									= True;
		G_Frame_SquadMembers.Visible							= True;
		G_Frame_Notification.Visible							= True;
		G_Label_Notification.Value								= "{{{RoyalSquad_TeamIsComplete_Text}}}";
		G_Label_SwitchDisplay_TeamState.Value			= "{{{RoyalSquad_TeamIsComplete_Text}}}";
		G_Frame_Notification.RelativePosition_V3.Y = 0.;
		G_Label_Notification.TextSizeReal			= 10.;
		G_Label_Notification.RelativePosition_V3.Y	= 8.;
		G_Label_Notification.RelativePosition_V3.X	= 0.;
		G_Frame_Notification.RelativePosition_V3.X	= -45.;
		G_Label_Notif_WaitForNextRound.Value			= "{{{RoyalSquad_WaitForNextRound_Text}}}";
		G_Label_Notif_WaitForNextRound.TextSizeReal			= 7.;
		G_Label_Notif_WaitForNextRound.RelativePosition_V3.Y = -7.;
		G_Frame_Notification.RelativePosition_V3.X	= -45.;
		G_Quad_Notifiation.Size.X									= 80.;
		G_Quad_Notifiation.Size.Y									= 70.;
		G_Label_LoadingNotification.Visible				= False;
		G_Label_LoadingNotification.RelativePosition_V3.Y	= 15.;
		G_Label_LoadingNotification.RelativePosition_V3.X	= 0.;
		G_Label_LoadingNotification.TextSizeReal = 15.;
		G_Label_LoadingNotification.RelativeRotation -= 0.1;
		G_Frame_Menu_Invitation.Visible 						= False;
		G_Label_AlertNeedMates.Visible 							= False;
		G_Button_AutoFillTeam.Hide();
		G_RefreshUITime = Now;
	} else if (_IsMember && !_IsLeader && _TeamIsFull && !_IsInAutoJoin && !_IsSpawned && !_IsSpectating){
		if(!IsSwitchDisplayOn){
			G_MenuBackGround.Visible 					= False;
		} else {
			G_MenuBackGround.Visible 					= True;
		}
		G_LastState_Member 												= True;
		G_Frame_HideMenu.Visible									= True;
		G_Frame_Pager.Hide();
		G_Frame_LeaveTeam.Visible 		  					= False;
		G_Frame_ListPlayers.Visible		 						= False;
		G_Frame_BuddiesList.Visible								= False;
		G_Frame_AutoFillTeam.Visible	 						= False;
		G_Frame_HomeMenu.Visible 			 						= False;
		G_Frame_Autojoin.Visible 			 						= False;
		G_Frame_ListInvitation.Visible 						= False;
		G_Label_PlayersAvailable.Visible					= True;
		G_Frame_Menu_PlayerListButton.Visible			= False;
		G_Frame_Menu.Visible 											= True;
		G_Frame_MenuTop.Visible										= False;
		G_HeaderMainSquad.Visible									= True;
		G_Frame_LeaveSquadButton.Visible 					= True;
		G_Frame_SquadMembers.Visible							= True;
		G_Frame_Notification.Visible							= True;
		G_Label_Notification.Value								= "{{{RoyalSquad_TeamIsComplete_Text}}}";
		G_Label_SwitchDisplay_TeamState.Value			= "{{{RoyalSquad_TeamIsComplete_Text}}}";
		G_Frame_Notification.RelativePosition_V3.Y = 0.;
		G_Label_Notification.TextSizeReal							= 10.;
		G_Label_Notification.RelativePosition_V3.Y	= 8.;
		G_Label_Notification.RelativePosition_V3.X	= 0.;
		G_Frame_Notification.RelativePosition_V3.X	= -45.;
		G_Quad_Notifiation.Size.X									= 80.;
		G_Quad_Notifiation.Size.Y									= 70.;
		G_Label_LoadingNotification.Visible 				= False;
		G_Label_LoadingNotification.RelativePosition_V3.Y	= 15.;
		G_Label_LoadingNotification.RelativePosition_V3.X	= 0.;
		G_Label_LoadingNotification.TextSizeReal = 17.;
		G_Label_LoadingNotification.RelativeRotation -= 0.1;
		G_Frame_Menu_Invitation.Visible 						= False;
		G_Label_AlertNeedMates.Visible 							= False;
		G_Label_Notif_WaitForNextRound.Value			= "{{{RoyalSquad_WaitForNextRound_Text}}}";
		G_Label_Notif_WaitForNextRound.TextSizeReal			= 7.;
		G_Label_Notif_WaitForNextRound.RelativePosition_V3.Y = -7.;
		G_Button_AutoFillTeam.Hide();
		G_RefreshUITime = Now;
	} else if(_IsSpawned && _IsLeader && !_IsInAutoJoin && !_IsSpectating){
		G_Frame_HideMenu.Visible					= False;
		G_Frame_LeaveSquadButton.Visible  = False;
		G_Frame_Menu.Visible							= False;
		G_Frame_LeaveTeam.Visible 		  	= True;
		G_Frame_Autojoin.Visible 					= False;
		G_MenuBackGround.Visible 			 		= False;
		G_Frame_HomeMenu.Visible  		 		= False;
		G_Frame_ListInvitation.Visible 		= False;
		G_Frame_SquadMembers.Visible			= False;
		G_Frame_AutoFillTeam.Visible			= False;
		G_Frame_Menu_PlayerListHeaderFooter.Visible = False;
		G_Frame_Menu_Invitation.Visible = False;
		G_RefreshUITime = Now;
		G_Frame_Pager.Visible					 			= False;
		G_Frame_BuddiesPager.Visible								= False;
		G_Label_PlayersAvailable.Visible		= False;
		G_Frame_ListPlayers.Visible		 			= False;
		G_Frame_BuddiesList.Visible					= False;
		G_Frame_MenuTop.Visible							= False;
		G_HeaderMainSquad.Visible						= False;
		G_Label_AlertNeedMates.Visible 			= False;
		G_LastState_Member 									= False;
	}else if(_IsSpawned && _IsMember && !_IsLeader && !_IsInAutoJoin && !_IsSpectating){
		G_Frame_HideMenu.Visible					= False;
		G_Frame_LeaveSquadButton.Visible	= False;
		G_Frame_LeaveTeam.Visible 		 		= True;
		G_Frame_Autojoin.Visible 			 		= False;
		G_MenuBackGround.Visible			 		= False;
		G_Frame_HomeMenu.Visible			 		= False;
		G_Frame_ListInvitation.Visible 		= False;
		G_Frame_Pager.Visible					 		= False;
		G_Frame_BuddiesPager.Visible			= False;
		G_Frame_SquadMembers.Visible			= False;
		G_Frame_Menu_PlayerListHeaderFooter.Visible = False;
		G_Frame_Menu_Invitation.Visible 	= False;
		G_Frame_AutoFillTeam.Visible			= False;
		G_Frame_ListPlayers.Visible		 		= False;
		G_Frame_BuddiesList.Visible				= False;
		G_Frame_Menu.Visible							= False;
		G_Frame_MenuTop.Visible						= False;
		G_HeaderMainSquad.Visible					= False;
		G_Label_AlertNeedMates.Visible 		= False;
		G_Label_PlayersAvailable.Visible	= False;
		G_LastState_Member 								= True;
		G_RefreshUITime = Now;
	} else {
		DebugLog(_IsMember, _IsLeader, _InATeamForMode, _IsSpawned, _AskForMenu, _IsInAutoJoin, _IsSpectating, _IsInAutoFill);
	}
}

Boolean PlayerHasLeft(Text _PlayerLogin) {
	declare PlayerOfLogin <=> GetPlayerFromLogin(_PlayerLogin);
	return (PlayerOfLogin == Null || PlayerOfLogin.RequestsSpectate);
}

declare Integer G_AnimEnd;
declare Text G_LastAnimCalled;
declare Boolean G_IsAnimRunning;

Void SetFakeRank (){
	declare netwrite Integer Net_FakeRank for UI;
	if(LocalUser.Login == "nadeo_hervedafflon"){
		Net_FakeRank = 5;
	} else
	Net_FakeRank = ML::Rand(0, 50);
}
Void AdaptInvitationPosition(Text[] _InvitationList){
	if(_InvitationList.count == 0){
		G_Quad_InvitationBottom.RelativePosition_V3.Y = -20.;
	} else if (_InvitationList.count == 1){
		G_Quad_InvitationBottom.RelativePosition_V3.Y = -26.;
	} else if (_InvitationList.count == 2){
		G_Quad_InvitationBottom.RelativePosition_V3.Y = -32.5;
	} else if (_InvitationList.count == 3){
		G_Quad_InvitationBottom.RelativePosition_V3.Y = -39.;
	} else if (_InvitationList.count == 4){
		G_Quad_InvitationBottom.RelativePosition_V3.Y = -45.5;
	} else if (_InvitationList.count == 5){
		G_Quad_InvitationBottom.RelativePosition_V3.Y = -53.;
	} else if (_InvitationList.count == 6){
		G_Quad_InvitationBottom.RelativePosition_V3.Y = -59.5;
	}
}

main() {
	InitTeamUI();
	SetFakeRank();
	declare Frame_ListInvitation 		<=> (G_Frame_Globale.GetFirstChild("frame-list-invitation") as CMlFrame);
	declare Frame_SquadMembers 			<=> (G_Frame_Globale.GetFirstChild("frame-squadmembers") as CMlFrame);
	declare BuddiesOnServer											 = False;
	declare PlayerListUpdate 		 			           = False;
	declare InvitationListUpdate 			           = True;
	declare LeaderListUpdate 		 			           = True;
	declare IsLeader 						 			           = False;
	declare IsClicked 					 			           = False;
	declare IsUILoaded 					 			           = False;
	declare LeaderInFullTeamEventSend 					 = False;
	declare IsInAutoJoin												 = False;
	declare PrevIsInAutoJoin					           = False;
	declare CanClickReady 						           = False;
	declare PlayerInTeamEventSend 		           = False;
	declare AllPlayerInTeamSend 			           = False;
	declare IsMouseOver								           = False;
	declare IsPlayerSpectating				           = False;
	declare IsInAutoFill							           = False;
	declare Boolean PrevTeamIsFull;
	declare Integer TeamIsFullTimer;
	declare Boolean TeamIsFull;
	declare Boolean PrevPutInAutoJoin;	
	declare Boolean AskForMenu;
	declare Boolean PrevIsLeader;
	declare Integer PrevPlayersCount;
	declare netread Boolean IsInTeam  for UI;
	declare netread Boolean PutInAutoJoin for UI;
	declare Text[] PlayerLoginList;
	declare Text[] PlayerLoginToRemove;
	declare Ident[] PlayerIdsToRemove;
	declare Text[] InvitationList;
	declare Text[] RequesterToLeaderList;
	declare Text[] PlayerInvited;
	declare Text[] BuddiesList;
	declare Page = UpdatePager(G_Frame_Pager, G_Frame_ListPlayers.Controls.count, PlayerList.count, 1, IsClicked, G_Frame_Menu_PlayerListHeaderFooter.Visible);
	declare BuddiesPage = UpdateBuddiesPager(G_Frame_BuddiesPager, G_Frame_BuddiesList.Controls.count, BuddiesList.count, 1, IsClicked);
	declare netwrite Text[] Client_PlayersInTeamList for UI;
	declare Text[] Client_InvitersToDelete;
	declare Ident[] Client_AllPlayersInTeamList;
	declare Integer PrevIsInTeamTimer;
	declare Integer PrevIsInAutoJoinTimer;
	declare Integer PrevInATeamForModeTimer;
	declare Integer PrevIsPlayerSpawnedTimer;
	declare Integer PrevAskForMenuTimer;
	declare Integer AskForMenuTimer;
	declare Integer IsInAutoJoinTimer;
	declare Integer IsPlayerSpectatingTimer;
	declare Boolean SpectatorUpdated;
	declare Integer PrevIsPlayerSpectatingTimer;
	declare Integer PrevIsLeaderChangeTimer;
	declare Integer IsLeaderChangeTimer;
	declare Integer PrevHasBeenInvited;
	declare Integer IsInAutoFillTimer;
	declare Integer PrevIsInAutoFillTimer;
	declare Integer PrevRestartTime;
	declare netread Integer Net_S_PlayersPerTeam for UI;
	declare netread Boolean IsPlayersUpdated for UI;
	declare Integer PrevPlayersPerTeam = 0;
	declare netread Integer ServerRestartTime for Teams[0];
	declare netread Text LoginOfRequester for UI;
	declare netread Text LoginOfInviter for UI;
	declare netread Text Net_LoginOfLeader for Teams[0];
	declare netread Text[] Net_LeadersToDisplay for Teams[0];
	declare netread Text[] SquadForClient for UI;
	declare netread Text[] PlayersInTeamList for Teams[0];
	declare netread Text[] Net_AllPlayersInTeam for Teams[0];
	declare netread Integer Net_AllPlayersInTeamTimer for Teams[0];
	declare Integer PrevNet_AllPlayersInTeamTimer;
	declare Integer PrevAllPlayersInTeam;
	declare netread Boolean IsPlayerSpawned for UI;
	declare netwrite Boolean InATeamForMode for UI;
	declare Boolean PrevInATeamForMode;
	declare netread Text[] Net_InvitersToDelete for Teams[0];
	declare netread Integer IsInTeamTimer for UI;
	declare netread Integer IsPlayerSpawnedTimer for UI;
	declare netread Text[] Net_LeaderSpawnedList for Teams[0];
	declare netread Text[][Text] Net_AllTeamsMembersInServer for Teams[0];
	declare netread Text[] Net_PlayersSpectating for Teams[0];
	declare netread Boolean Net_S_IsTeamNeedToBeFullToSpawn for Teams[0];
	declare netread Integer InvitersUpdatedTime for Teams[0];
	declare netread Text[] Net_PlayersInATeam for Teams[0];
	declare netread Text[] Net_PlayersInAutoJoin for Teams[0];
	declare Integer PrevPlayersInAutoJoin;
	declare Integer PrevInvitersUpdatedTime;
	declare netread Integer UpdateClientSquad for UI;
	declare netread Text[] Net_PlayersNeedHelp for UI;
	declare netread Text[] MatesHealed for UI;
	declare Integer PrevMatesHealedCount;
	declare Integer PrevUpdateClientSquad;
	declare Ident[] Spectators;
	declare Text[] PlayersJoined;
	declare Text[] Membersunspawned;
	declare Integer UnSpawnedPlayerTime;
	declare Integer PrevUnSpawnedPlayerTime;
	declare Integer PrevMemberGetHurtTime;
	declare Integer MemberGetHurtTime;
	declare Integer PrevPlayerMemberArmor;
	declare Integer StartTime;
	declare Integer TimeDuration = 10000;
	declare Integer EndTime;
	declare Boolean IsBlinking = False;
	declare Boolean HasSetTimer = False;
	declare netread Boolean HideMenu for Teams[0];
	declare netread Integer	TeamRefresh								for Teams[0];
	declare Integer PrevTeamRefresh;
	declare Boolean ScoreTableVisible for UI;
	declare netread Integer HasBeenInvitedTime for UI;
	declare Integer InATeamForModeTimer;
	declare netread Vec3 Net_TeamColor for UI;
	declare Boolean IsTutoFrameVisible for UI;
	declare netread Boolean HidePlayerUI for UI;
	declare Boolean PrevHidePlayerUI;
	declare Integer PrevBuddiesInServercount;
	declare Ident[] IdsOfAllPlayersInTeam;
	declare netread Integer Net_TS2_PlayersPerTeam for Teams[0];
	IsSwitchDisplayOn = True;
	while (True) {
		yield;
		declare Owner <=> GetOwner();
		if(Net_TS2_PlayersPerTeam != PrevPlayersPerTeam){
			UpdateSquadMembers(G_Frame_SquadMembers, SquadForClient, IsPlayersUpdated, IsMouseOver, Net_S_PlayersPerTeam, LocalUser.Login);
			PrevPlayersPerTeam = Net_TS2_PlayersPerTeam;
		}
		AdaptInvitationPosition(InvitationList);
		if(PrevBuddiesInServercount != BuddiesInServer.count){
			PrevBuddiesInServercount = BuddiesInServer.count;
			if(BuddiesInServer.count < 1){
				BuddiesOnServer = False;
				if(G_Frame_BuddiesList.Visible){
					G_Frame_ListPlayers.Visible	 = True;
					G_Label_BuddiesOnglet.Opacity = 1.;
					HandleUI_SelectionOnBuddies(False, BuddiesInServer);
				}
				G_Frame_BuddiesPager.Visible         = False;
				G_Button_BuddiesList.Visible 				 = False;
				G_Frame_BuddiesList.Visible					 = False;
				G_Quad_BuddiesList.Opacity = 0.;
				G_Quad_BuddiesListCadre.Opacity = 0.;
				G_Quad_TopLineInvitationList_Big.Opacity = 1.;
				G_Quad_Onglet_PlayersList.Opacity = 1.;
				G_Quad_Onglet_PlayersListCadre.Opacity = 0.;
				G_Label_BuddiesOnglet.Opacity = 0.5;
				Page = UpdatePager(G_Frame_Pager, G_Frame_ListPlayers.Controls.count, PlayerList.count, 1, IsClicked, G_Frame_Menu_PlayerListHeaderFooter.Visible);
				BuddiesPage = UpdateBuddiesPager(G_Frame_BuddiesPager, G_Frame_BuddiesList.Controls.count, BuddiesInServer.count, 1, IsClicked);
				UpdatePlayerList(G_Frame_ListPlayers, PlayerList, Page, PlayerInvited, Client_AllPlayersInTeamList, G_Label_MateSearched.Value, G_SortInTeamPlayersLast, SquadForClient);
				UpdateBuddiesList(G_Frame_BuddiesList, BuddiesList, PlayerList, BuddiesPage, PlayerInvited, Client_AllPlayersInTeamList, SquadForClient);
			} else {
				BuddiesOnServer = True;
				if(G_Frame_ListPlayers.Visible){
					G_Button_BuddiesList.Visible = True;
					G_Quad_BuddiesList.Opacity = 0.3;
					G_Quad_BuddiesListCadre.Opacity = 1.;
					G_Label_BuddiesOnglet.Opacity = 1.;
					G_Quad_Onglet_PlayersListCadre.Opacity = 0.;
				}
			} 
		}
		if(BuddiesInServer.count < 1){
			G_Frame_BuddiesList.Visible = False;
			G_Label_BuddiesOnglet.Value = "{{{RoyalSquad_NoFriends_Text}}}";
		} else G_Label_BuddiesOnglet.Value = "{{{RoyalSquad_Friends_Text}}}";
		if(IsPlayerSpawned){
			IsInAutoJoin = False;
			if(PrevIsInAutoJoin != IsInAutoJoin){
				IsInAutoJoinTimer = Now;
				PrevIsInAutoJoin = IsInAutoJoin;
			}
		}
		if(InvitationList.count == 0){
			G_Label_InvitationMenu.Value = "{{{RoyalSquad_NoInvitation_Text}}}";
		} else G_Label_InvitationMenu.Value = "{{{RoyalSquad_Invitations_Text}}}";
		//add the buddy of the players in the BuddiesList
		if (ManiaPlanet != Null && ManiaPlanet.ChatManager != Null) {
			foreach(Buddy in ManiaPlanet.ChatManager.Buddies){
				declare Text BuddyLogin;
				BuddyLogin = Buddy.Login;
				if(!BuddiesList.exists(BuddyLogin) && Buddy.IsOnline){
					BuddiesList.add(BuddyLogin);
				}
			}
		}
		if(PutInAutoJoin != PrevPutInAutoJoin && PutInAutoJoin){
			IsInAutoJoin = True;
			PrevPutInAutoJoin = PutInAutoJoin;
			if(PrevIsInAutoJoin != IsInAutoJoin){
				IsInAutoJoinTimer = Now;
				PrevIsInAutoJoin = IsInAutoJoin;
			}
		} 
		if(TeamRefresh > PrevTeamRefresh){
			PlayerListUpdate = True;
		}
		if(PrevIsInAutoJoin != IsInAutoJoin){
			IsInAutoJoinTimer = Now;
			PrevIsInAutoJoin = IsInAutoJoin;
		}
	
		//Manage Page UI Visibility
		if(Net_PlayersSpectating.exists(LocalUser.Login) || HideMenu){
			G_Frame_Globale.Visible = False;
			G_MenuBackGround.Visible = False;
			G_Frame_HideMenu.Visible = False;
			if(Net_PlayersSpectating.exists(LocalUser.Login)){
				IsPlayerSpectating = True;
				IsPlayerSpectatingTimer = Now;
				IsInAutoJoin = False;
				SpectatorUpdated = False;
				if(PrevIsInAutoJoin != IsInAutoJoin){
					IsInAutoJoinTimer = Now;
					PrevIsInAutoJoin = IsInAutoJoin;
				}
			}
		} else if(!Net_PlayersSpectating.exists(LocalUser.Login) && !IsPlayerSpawned && !HideMenu && !ScoreTableVisible && IsSwitchDisplayOn) {
			G_MenuBackGround.Visible = True;
			G_Frame_Globale.Visible = True;
			
			if(!Net_PlayersSpectating.exists(LocalUser.Login) && !SpectatorUpdated){
				IsPlayerSpectating = False;
				IsPlayerSpectatingTimer = Now;
				SpectatorUpdated = True;
			}
		}
		if(!Net_PlayersSpectating.exists(LocalUser.Login) && !IsPlayerSpawned && !HideMenu && !ScoreTableVisible){
			G_Frame_HideMenu.Visible = True;
		}
		else if (ScoreTableVisible){
			G_Frame_Globale.Visible = False;
		} else if (!ScoreTableVisible && IsPlayerSpawned && !Net_PlayersSpectating.exists(LocalUser.Login) && !HideMenu && IsSwitchDisplayOn){
			G_Frame_Globale.Visible = True;
		}
		if(IsTutoFrameVisible) {
			G_Frame_Globale.Hide();
			G_MenuBackGround.Hide();
		} else {
			if(!IsPlayerSpawned && !ScoreTableVisible && !Net_PlayersSpectating.exists(LocalUser.Login) && !HideMenu && IsSwitchDisplayOn){
				G_MenuBackGround.Show();
				G_Frame_Globale.Show();
			}
		}
	
		if(ServerRestartTime > PrevRestartTime){
			IsSwitchDisplayOn = True;
			UpdateSquadMembers(G_Frame_SquadMembers, SquadForClient, IsPlayersUpdated, IsMouseOver, Net_S_PlayersPerTeam, LocalUser.Login);
			InvitationList = [];
			PlayerLoginToRemove = [];
			RequesterToLeaderList = [];
			PlayerInvited = [];
			Client_PlayersInTeamList = [];
			PlayerIdsToRemove = [];
			InATeamForMode = False;
			if(PrevInATeamForMode != InATeamForMode){
				InATeamForModeTimer = Now;
				PrevInATeamForMode = InATeamForMode;
			}
			PrevIsInAutoJoin = False;
			InvitationListUpdate = True;
			IsInAutoFill = False;
			IsClicked = False;
			PrevPutInAutoJoin = False;
			LeaderInFullTeamEventSend = False;
			AskForMenu = False;
			CanClickReady = False;
			AllPlayerInTeamSend = False;
			PlayerInTeamEventSend = True;
			IsUILoaded = False;
			IsLeader = False;
			if(PrevIsLeader != IsLeader){
				IsLeaderChangeTimer = Now;
				PrevIsLeader = IsLeader;
			}
			IsInAutoJoin = False;
			PrevRestartTime = ServerRestartTime;
			
			LoadTeamUI(IsInTeam, IsLeader, InATeamForMode, IsPlayerSpawned, AskForMenu, IsInAutoJoin, IsPlayerSpectating, IsInAutoFill, TeamIsFull);
			InvitationListUpdate = True;
		}	
		Client_PlayersInTeamList = Net_PlayersInATeam;
		if(Net_AllPlayersInTeamTimer > PrevNet_AllPlayersInTeamTimer){
			PrevNet_AllPlayersInTeamTimer = Net_AllPlayersInTeamTimer;
			PrevAllPlayersInTeam = Net_AllPlayersInTeam.count;
			foreach(LoginOfPlayerInTeam in Net_AllPlayersInTeam){
				declare IdOfPlayerInTeam = GetIdFromLogin(LoginOfPlayerInTeam);
				if(!IdsOfAllPlayersInTeam.exists(IdOfPlayerInTeam)){
					IdsOfAllPlayersInTeam.add(IdOfPlayerInTeam);
				}
			}
			foreach(IdOfPlayerInTeam in IdsOfAllPlayersInTeam){
				declare LoginOfPlayerInTeam = GetLoginFromId(IdOfPlayerInTeam);
				if(!Net_AllPlayersInTeam.exists(LoginOfPlayerInTeam)){
					IdsOfAllPlayersInTeam.remove(IdOfPlayerInTeam);
				}
			}
		}
		Client_AllPlayersInTeamList = IdsOfAllPlayersInTeam;
		if(Net_PlayersInAutoJoin.count != PrevPlayersInAutoJoin){
			PrevPlayersInAutoJoin = Net_PlayersInAutoJoin.count; 
		}
		foreach(PlayerWaiting in Net_PlayersInAutoJoin){
			declare PlayerOfPlayerWaiting <=> GetPlayerFromLogin(PlayerWaiting);
			if(PlayerOfPlayerWaiting != Null){
				if(Client_AllPlayersInTeamList.exists(PlayerOfPlayerWaiting.Id)){
					Client_AllPlayersInTeamList.remove(PlayerOfPlayerWaiting.Id);
					IdsOfAllPlayersInTeam.remove(PlayerOfPlayerWaiting.Id);
				}
			}
		}
		//Remove Invitation from players that are in team
		if(Client_PlayersInTeamList.count > 0 && InvitationList.count > 0){
			foreach (PlayerInTeam in Client_PlayersInTeamList){
				foreach (Inviter in InvitationList){
					declare InviterInTeamToDelete = GetNameFromLogin(Inviter);
					if (PlayerInTeam == InviterInTeamToDelete){
						Client_PlayersInTeamList.remove(PlayerInTeam);
						InvitationList.remove(Inviter);
						UpdateInvitationList(Frame_ListInvitation, InvitationList);
					}
				}
			}
		}
		//Remove invitation from other players when they leave the Team Creation Menu
		if(InvitersUpdatedTime > PrevInvitersUpdatedTime){
			foreach(InviterToDelete in Net_InvitersToDelete){
				if(InvitationList.exists(InviterToDelete)){
					InvitationList.remove(InviterToDelete);
					InvitationListUpdate = True;
				}
			}
			PrevInvitersUpdatedTime = InvitersUpdatedTime;
		}
		//Reset player state when the player isn't in team
		if(!SquadForClient.exists(LocalUser.Login)){
			IsLeader = False;
			LeaderInFullTeamEventSend = False;
			PlayerInTeamEventSend = True;
			IsUILoaded = False;
			AllPlayerInTeamSend = False;
			AskForMenu = False;
			if(PrevIsLeader != IsLeader){
				IsLeaderChangeTimer = Now;
				PrevIsLeader = IsLeader;
			}
		}
		if(IsInTeam && !AllPlayerInTeamSend){
			SendCustomEvent("{{{Const::C_UIEvent_TeamSelection_AllPlayersInTeam}}}", [LocalUser.Login]);
			AllPlayerInTeamSend = True;
		}
		foreach (PlayerIndex => Member in SquadForClient) {
			if(PlayerInvited.exists(Member)){
				PlayerInvited.remove(Member);
			}
			//Check si je suis le leader (le leader est toujours etre le premier champ du tableau)
			if (LocalUser.Login == SquadForClient[0] && SquadForClient.exists(LocalUser.Login)) {
				IsLeader = True;
				if(PrevIsLeader != IsLeader){
					IsLeaderChangeTimer = Now;
					PrevIsLeader = IsLeader;
				}
				if (IsLeader){
					//Faire une fonction Load Team Leader UI
					if(!IsUILoaded){
						IsUILoaded = !IsUILoaded;
					}
				}
			}
		}
		if (SquadForClient.count >= Net_S_PlayersPerTeam && SquadForClient.count != 0){//La squad du client depasse ou est egal au nombre de player requis pour jouer
			InATeamForMode = True;
			if(PrevInATeamForMode != InATeamForMode){
				InATeamForModeTimer = Now;
				PrevInATeamForMode = InATeamForMode;
			}
			if(IsLeader && !LeaderInFullTeamEventSend || !PlayerInTeamEventSend){
				SendCustomEvent("{{{Const::C_UIEvent_TeamSelection_LeaderInFullTeam}}}", [LocalUser.Login]);//Use it to delete leader from leaders available to join
				SendCustomEvent("{{{Const::C_UIEvent_TeamSelection_MemberInTeam}}}", [LocalUser.Login]);//Use it to delete invite from leader
				LeaderInFullTeamEventSend = True;
				PlayerInTeamEventSend = True;
			}
		}
		if(SquadForClient.count < Net_S_PlayersPerTeam){
			if(TeamIsFull){
				TeamIsFull = False;
				
			}
		} else if (SquadForClient.count >= Net_S_PlayersPerTeam){
			TeamIsFull		 = True;
		}
		if(TeamIsFull != PrevTeamIsFull){
			InATeamForModeTimer = Now;
			PrevTeamIsFull = TeamIsFull;
		}
		if(!Net_S_IsTeamNeedToBeFullToSpawn){
			if(SquadForClient.existskey(0)){//The player has spawned and is at least the last member of his team
				if(Net_LeaderSpawnedList.exists(SquadForClient[0])){
					InATeamForMode = True;
					if(PrevInATeamForMode != InATeamForMode){
						InATeamForModeTimer = Now;
						PrevInATeamForMode = InATeamForMode;
					}
				}
			} else InATeamForMode = False;//No player in his team
		}
		else if(Net_S_IsTeamNeedToBeFullToSpawn){
			if(SquadForClient.count < Net_S_PlayersPerTeam){
				InATeamForMode = False;
				if(PrevInATeamForMode != InATeamForMode){
					InATeamForModeTimer = Now;
					PrevInATeamForMode = InATeamForMode;
				}
			}
		}
		//Manage Animation
		if(G_IsMouseOver_AutoJoin){
			G_X = Now * 0.003;
			G_Quad_ContourAutoJoin.Opacity = ML::Abs(ML::Sin(G_X))/1.5 + 0.3;
		}
		else if(G_IsMouseOver_CreateTeam){
			G_X = Now * 0.003;
			G_Quad_ContourCreateTeam.Opacity = ML::Abs(ML::Sin(G_X))/1.5 + 0.3;
		}
		else if(G_IsMouseOver_TeamReady){
			G_X = Now * 0.003;
			G_Quad_ContourAutoFill.Opacity = ML::Abs(ML::Sin(G_X))/1.5 + 0.3;
		} else if (G_IsMouseOver_LeaveTeam){
			G_X = Now * 0.003;
			G_Quad_LeaveTeamContour.Opacity = ML::Abs(ML::Sin(G_X))/1.5 + 0.3;
		} else {
			G_Quad_ContourAutoJoin.Opacity = 1.;
			G_Quad_ContourCreateTeam.Opacity = 1.;
			G_Quad_LeaveTeamContour.Opacity = 1.;
		}
		
		if(G_Frame_ListPlayers.Visible){
			foreach(Control in G_Frame_ListPlayers.Controls){
				declare Frame_Player <=> (Control as CMlFrame);
				declare Quad_Underline <=> (Frame_Player.GetFirstChild("quad-playerselected") as CMlQuad);
				if(Quad_Underline.Visible == True){
					G_OpacitySentQuad = Now * 0.003;
					Quad_Underline.Opacity = ML::Abs(ML::Sin(G_OpacitySentQuad))/1.5 + 0.3;
				}
			}
		}
		if(G_Frame_BuddiesList.Visible){
			foreach(Control in G_Frame_BuddiesList.Controls){
				declare Frame_Player <=> (Control as CMlFrame);
				declare Quad_Underline <=> (Frame_Player.GetFirstChild("quad-buddyplayerselected") as CMlQuad);
				if(Quad_Underline.Visible == True){
					G_OpacitySentQuad = Now * 0.003;
					Quad_Underline.Opacity = ML::Abs(ML::Sin(G_OpacitySentQuad))/1.5 + 0.3;
				}
			}
		}
		if(G_Label_LoadingNotification.Visible){
			G_Label_LoadingNotification.RelativeRotation -= 2.;
		}
		//Manage UI when the player is in a Team but not the leader
		if(IsInTeam && !IsLeader){
			//Send to the server that the player is a team member
			if(!PlayerInTeamEventSend){
				SendCustomEvent("{{{Const::C_UIEvent_TeamSelection_MemberInTeam}}}", [LocalUser.Login]);
				PlayerInTeamEventSend = True;
			}
		}
		//Display Squad
		if(UpdateClientSquad > PrevUpdateClientSquad || MatesHealed.count != PrevMatesHealedCount){
			UpdateSquadMembers(Frame_SquadMembers, SquadForClient, IsPlayersUpdated, IsMouseOver, Net_S_PlayersPerTeam, LocalUser.Login);
			PrevUpdateClientSquad = UpdateClientSquad;
			PrevMatesHealedCount = MatesHealed.count;
		}
		// Manage all players in the player list
		foreach (Player in Players) {		
			if (HasBeenInvitedTime > PrevHasBeenInvited) {
				if (!InvitationList.exists(LoginOfInviter) && LoginOfInviter != ""){
					InvitationList.add(LoginOfInviter);
					InvitationListUpdate = True;
				}
				PrevHasBeenInvited = HasBeenInvitedTime;
			}	
			if (!Player.RequestsSpectate &&!PlayerLoginList.exists(Player.User.Login)) {
				if(Player != Null){
					PlayerLoginList.add(Player.User.Login);
				}
				PlayerListUpdate = True;
				InvitationListUpdate = True;
			}
			foreach(Spectator in Spectators){
				if(!Net_PlayersSpectating.exists(Player.User.Login)){
					Spectators.remove(Spectator);
				}
			}
			if (!Player.RequestsSpectate && Player.User.Login != LocalUser.Login && !PlayerList.exists(Player.Id)) {
				PlayerList.add(Player.Id);
				PlayerListUpdate = True;
				InvitationListUpdate = True;
			}
		}
		if(Players.count != PrevPlayersCount){
			foreach (PlayerLogin in PlayerLoginList) {
				if (PlayerHasLeft(PlayerLogin)) {
					PlayerLoginToRemove.add(PlayerLogin);
				}
			}
			foreach (PlayerLogin in PlayerLoginToRemove) {
				declare RemovedFromPlayerList = PlayerLoginList.remove(PlayerLogin);
				PlayerListUpdate = True;
				InvitationListUpdate = True;
			}
			foreach(PlayerSpectating in Net_PlayersSpectating){
				declare IdOfPlayers = GetIdFromLogin(PlayerSpectating);
				if(!Spectators.exists(IdOfPlayers)){
					Spectators.add(IdOfPlayers);
				} 
			}
			if(Players.count != PrevPlayersCount){
				foreach (PlayerId in PlayerList) {
					if (!Players.existskey(PlayerId) || Players[PlayerId].RequestsSpectate || Spectators.exists(PlayerId)) {
						PlayerIdsToRemove.add(PlayerId);
					}
				}
				PrevPlayersCount = Players.count;
			}
		}
		foreach (PlayerId in PlayerIdsToRemove) {
			declare RemovedFromPlayerList = PlayerList.remove(PlayerId);
			PlayerIdsToRemove.remove(PlayerId);
			PlayerListUpdate = True;
			InvitationListUpdate = True;
		}
		if(SquadForClient.count == Net_S_PlayersPerTeam){
			IsInAutoJoin = False;
			if(PrevIsInAutoJoin != IsInAutoJoin){
				IsInAutoJoinTimer = Now;
				PrevIsInAutoJoin = IsInAutoJoin;
			}
		}
		if(PrevIsInAutoJoin != IsInAutoJoin){
			IsInAutoJoinTimer = Now;
			PrevIsInAutoJoin = IsInAutoJoin;
		}
		
		//Load UI
		if(IsInTeamTimer > PrevIsInTeamTimer ||
			AskForMenuTimer > PrevAskForMenuTimer ||
			InATeamForModeTimer > PrevInATeamForModeTimer || IsPlayerSpawnedTimer > PrevIsPlayerSpawnedTimer || IsInAutoJoinTimer > PrevIsInAutoJoinTimer || IsLeaderChangeTimer > PrevIsLeaderChangeTimer || IsInAutoFillTimer > PrevIsInAutoFillTimer || IsPlayerSpectatingTimer > PrevIsPlayerSpectatingTimer
			){
			if(G_Frame_ListPlayers.Visible){
				G_PrevLastOngletVisible = G_Frame_ListPlayers;
			}	else if (G_Frame_BuddiesList.Visible){
				G_PrevLastOngletVisible = G_Frame_BuddiesList;
			} else 	G_PrevLastOngletVisible = G_Frame_ListPlayers;
			
			LoadTeamUI(IsInTeam, IsLeader, InATeamForMode, IsPlayerSpawned, AskForMenu, IsInAutoJoin, IsPlayerSpectating, IsInAutoFill, TeamIsFull);
			PrevIsInTeamTimer = IsInTeamTimer;
			PrevIsPlayerSpectatingTimer = IsPlayerSpectatingTimer;
			PrevIsInAutoJoinTimer = IsInAutoJoinTimer;
			PrevInATeamForModeTimer = InATeamForModeTimer;
			PrevIsPlayerSpawnedTimer = IsPlayerSpawnedTimer;
			PrevIsLeaderChangeTimer = IsLeaderChangeTimer;
			PrevIsInAutoFillTimer = IsInAutoFillTimer;
		}
		G_Label_PlayersAvailable.Value = "Potential teammates  : "^TL::ToText(G_PlayersAvailable);
		
		if(PlayerListUpdate || TeamRefresh > PrevTeamRefresh ){
			Page = UpdatePager(G_Frame_Pager, G_Frame_ListPlayers.Controls.count, PlayerList.count, Page, IsClicked, G_Frame_Menu_PlayerListHeaderFooter.Visible);
			UpdatePlayerList(G_Frame_ListPlayers, PlayerList, Page, PlayerInvited, Client_AllPlayersInTeamList, G_Label_MateSearched.Value, G_SortInTeamPlayersLast, SquadForClient);
			BuddiesPage = UpdateBuddiesPager(G_Frame_BuddiesPager, G_Frame_BuddiesList.Controls.count, BuddiesList.count, BuddiesPage, IsClicked);
			UpdateBuddiesList(G_Frame_BuddiesList, BuddiesList, PlayerList, BuddiesPage, PlayerInvited, Client_AllPlayersInTeamList, SquadForClient);
			
			PlayerListUpdate = False;
			PrevTeamRefresh = TeamRefresh;
		}
		
		if (InvitationListUpdate) {
			UpdateInvitationList(Frame_ListInvitation, InvitationList);
		}
		
		if(G_Frame_Autojoin.Visible && G_Label_AutoJoin.Value == "{{{RoyalSquad_Ready_Text}}}" && InvitationList.count == 0) {
			if(!HasSetTimer) {
				StartTime = Now;
				EndTime = StartTime + TimeDuration;
				HasSetTimer = True;
			}
			if(Now>= EndTime && !IsBlinking) {
				IsBlinking = True;
			}
			if(IsBlinking) {
				if(!G_Quad_Ready_CallToAction.Visible) G_Quad_Ready_CallToAction.Show();
				G_X = Now * 0.003;
				G_Quad_Ready_CallToAction.Opacity = ML::Abs(ML::Sin(G_X))/1.5 + 0.3;
			}
		} else {
			G_Quad_Ready_CallToAction.Opacity = 0.;
			if(G_Quad_Ready_CallToAction.Visible) G_Quad_Ready_CallToAction.Hide();
			HasSetTimer = False;
			IsBlinking = False;
		}
	
		if(HidePlayerUI && PrevHidePlayerUI != HidePlayerUI){
			PrevHidePlayerUI = HidePlayerUI;
			G_Frame_Globale.Visible = False;
			G_MenuBackGround.Visible = False;
			G_Label_SwitchDisplay_TeamState.Visible = True;
			IsSwitchDisplayOn = False;
			G_Label_SwitchDisplay.Value = "{{{RoyalSquad_ShowMenu_Text}}}";
		} else if (!HidePlayerUI && PrevHidePlayerUI != HidePlayerUI){
			PrevHidePlayerUI = HidePlayerUI;
		}
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CMlScriptEvent::Type::MouseClick: {
					if(Event.ControlId == "button-buddieslist"){
						G_Frame_BuddiesList.Visible 	= True;
						G_Frame_ListPlayers.Visible		= False;
						G_Frame_Pager.Visible					= False;
						if(BuddiesList.count > 10){
							G_Frame_BuddiesPager.Visible	= True;
						}
						HandleUI_SelectionOnBuddies(True, BuddiesInServer);
					}
					else if(Event.ControlId == "button-SwitchMenuDisplay") {
						
						if(G_Label_SwitchDisplay.Value == "{{{RoyalSquad_HideMenu_Text}}}"){
							G_Frame_Globale.Visible = False;
							G_MenuBackGround.Visible = False;
							G_Label_SwitchDisplay_TeamState.Visible = True;
							IsSwitchDisplayOn = False;
							G_Label_SwitchDisplay.Value = "{{{RoyalSquad_ShowMenu_Text}}}";
							
						} else if (G_Label_SwitchDisplay.Value == "{{{RoyalSquad_ShowMenu_Text}}}"){
							G_Label_SwitchDisplay.Value = "{{{RoyalSquad_HideMenu_Text}}}";
							IsSwitchDisplayOn = True;
							G_Label_SwitchDisplay_TeamState.Visible = False;
						}

					}
					else if(Event.ControlId == "button-playerslist"){
						G_Frame_BuddiesList.Visible		= False;
						G_Frame_ListPlayers.Visible		= True;
						if(PlayerList.count > 10){
							G_Frame_Pager.Visible					= True;
							PlayerListUpdate = True;
						}
						G_Frame_BuddiesPager.Visible	= False;
						HandleUI_SelectionOnBuddies(False, BuddiesInServer);
					}
					else if(Event.ControlId == "button-sortplayerslist"){
						G_SortInTeamPlayersLast = True;
						PlayerListUpdate = True;
						G_Button_SortPlayersList.Opacity = .5;
						G_Button_SortPlayersList.BgColor = CL::HexToRgb("AAAF");
					}
					else if (Event.ControlId == "button-autojoin"){
						declare Label_AutoJoin <=>(G_Frame_Globale.GetFirstChild("label-autojoin") as CMlLabel);
						declare Frame_CancelAutoJoinTeam <=> (G_Frame_Globale.GetFirstChild("frame-cancelautojointeam") as CMlFrame);
						declare Button_AutoJoin <=> (G_Frame_Globale.GetFirstChild("button-autojoin") as CMlQuad);
						declare Quad_AutoJoinContour <=> (G_Frame_Globale.GetFirstChild("quad-contour") as CMlQuad);

						if(Label_AutoJoin.Value == "{{{RoyalSquad_Ready_Text}}}"){
							SendCustomEvent("{{{Const::C_UI_Event_TeamSelection_PlayerInAutoJoin}}}", [LocalUser.Login]);
							PlayerListUpdate = True;
							IsInAutoJoin = True;
							IsInAutoJoinTimer = Now;
							Label_AutoJoin.Value = "{{{RoyalSquad_Cancel_Text}}}";
						} else if (Label_AutoJoin.Value == "{{{RoyalSquad_Cancel_Text}}}"){
							declare Label_AutoJoin <=>(G_Frame_Globale.GetFirstChild("label-autojoin") as CMlLabel);
							declare Frame_CancelAutoJoinTeam <=> (G_Frame_Globale.GetFirstChild("frame-cancelautojointeam") as CMlFrame);
							declare Button_AutoJoin <=> (G_Frame_Globale.GetFirstChild("button-autojoin") as CMlQuad);
							declare Quad_AutoJoinContour <=> (G_Frame_Globale.GetFirstChild("quad-contour") as CMlQuad);
							SendCustomEvent("{{{Const::C_UI_Event_TeamSelection_PlayerCancelAutoJoin}}}", [LocalUser.Login]);
							IsMouseOver = False;
							IsInAutoJoin = False;
							IsInAutoJoinTimer = Now;
							Label_AutoJoin.Value = "{{{RoyalSquad_Ready_Text}}}";
							G_Label_AutoFill.Value = "{{{RoyalSquad_Ready_Text}}}";
						}
					}
					else if(Event.ControlId == "button-autofillteam"){
						declare Button_AutoFillTeam <=> (G_Frame_Globale.GetFirstChild("button-autofillteam") as CMlQuad);
						declare Button_AutoFillContour <=> (G_Frame_Globale.GetFirstChild("button-autofillteamcontour") as CMlQuad);
						declare Frame_AutoFillTeam <=> (G_Frame_Globale.GetFirstChild("frame-autofillteam") as CMlFrame);
						declare Label_AutoJoin <=>(G_Frame_Globale.GetFirstChild("label-autojoin") as CMlLabel);
						if(G_Label_AutoFill.Value == "{{{RoyalSquad_Ready_Text}}}" && SquadForClient.count > 0){
							G_Label_AutoFill.Value = "{{{RoyalSquad_Cancel_Text}}}";
							SendCustomEvent("{{{Const::C_UI_Event_TeamSelection_TeamInAutoFill}}}", [LocalUser.Login]);
							G_Frame_LeaveSquadButton.Visible						= False;
							IsInAutoFill = True;
							IsInAutoFillTimer = Now;
						}
						else if (G_Label_AutoFill.Value == "{{{RoyalSquad_Cancel_Text}}}"){
							SendCustomEvent("{{{Const::C_UI_Event_TeamSelection_CancelTeamInAutoFill}}}", [LocalUser.Login]);
							G_Label_AutoFill.Value = "{{{RoyalSquad_Ready_Text}}}";
							G_Frame_LeaveSquadButton.Visible						= True;
							IsInAutoFill = False;
							IsInAutoFillTimer = Now;
							PlayerListUpdate = True;
							G_Frame_BuddiesList.Visible		= False;
							G_Frame_ListPlayers.Visible		= True;
							if(PlayerList.count > 10 && !G_Frame_BuddiesList.Visible){
								G_Frame_Pager.Visible					= True;
								PlayerListUpdate = True;
							}
							G_Frame_BuddiesPager.Visible	= False;
							HandleUI_SelectionOnBuddies(False, BuddiesInServer);
						}
						else if(G_Label_AutoFill.Value == "{{{RoyalSquad_Ready_Text}}}" && SquadForClient.count == 0){
							SendCustomEvent("{{{Const::C_UI_Event_TeamSelection_PlayerInAutoJoin}}}", [LocalUser.Login]);
							PlayerListUpdate = True;
							IsInAutoJoin = True;
							IsInAutoJoinTimer = Now;
							Label_AutoJoin.Value = "{{{RoyalSquad_Cancel_Text}}}";
						}
					}
					else if (Event.ControlId == "button-leaveteam-icon" || Event.ControlId == "leave-squad-button"){
						SendCustomEvent("{{{Const::C_UI_Event_TeamSelection_LeaveTeam}}}", [LocalUser.Login]);
						declare Frame_SquadMember <=> Event.Control.Parent;
						G_Frame_LeaveSquadButton.Visible	= False;
						G_Frame_LeaveTeam.Visible 		 		= False;
						IsMouseOver = False;
						IsInAutoFill = False;
						IsInAutoFillTimer = Now;
						PlayerInvited.clear();
						IsLeader = False;
						InATeamForMode = False;
						IsInAutoJoin = False;
						InATeamForModeTimer = Now;
						IsInAutoJoinTimer = Now;
						G_Label_AutoFill.Value = "{{{RoyalSquad_Ready_Text}}}";
						Page = UpdatePager(G_Frame_Pager, G_Frame_ListPlayers.Controls.count, PlayerList.count, 1, IsClicked, G_Frame_Menu_PlayerListHeaderFooter.Visible);
						PlayerListUpdate = True;
						if(PrevIsLeader != IsLeader){
							IsLeaderChangeTimer = Now;
							PrevIsLeader = IsLeader;
						}
					}
					else if (Event.ControlId == "button-page-next") {
						Page = UpdatePager(G_Frame_Pager, G_Frame_ListPlayers.Controls.count, PlayerList.count, Page + 1, IsClicked, G_Frame_Menu_PlayerListHeaderFooter.Visible);
						BuddiesPage = UpdateBuddiesPager(G_Frame_BuddiesPager, G_Frame_BuddiesList.Controls.count, BuddiesList.count, 1, IsClicked);
						PlayerListUpdate = True;
					}
					else if (Event.ControlId == "button-page-prev") {
						Page = UpdatePager(G_Frame_Pager, G_Frame_ListPlayers.Controls.count, PlayerList.count, Page - 1, IsClicked, G_Frame_Menu_PlayerListHeaderFooter.Visible);
						PlayerListUpdate = True;
					} 
					else if(Event.ControlId == "button-Buddiespage-prev"){
						BuddiesPage = UpdateBuddiesPager(G_Frame_BuddiesPager, G_Frame_BuddiesList.Controls.count, BuddiesList.count, BuddiesPage - 1, IsClicked);
					}
					else if(Event.ControlId == "button-Buddiespage-next"){
						BuddiesPage = UpdateBuddiesPager(G_Frame_BuddiesPager, G_Frame_BuddiesList.Controls.count, BuddiesList.count, BuddiesPage + 1, IsClicked);
					}
					else if (Event.ControlId == "button-player" || Event.ControlId == "quad-invitecontour") {
						PlayerListUpdate = True;
						declare Frame_PlayerSelected <=> Event.Control.Parent;
						declare Text LoginOfSelected;
						
						declare TeamSelection_Login for Event.Control = "";
						declare Label_PlayerName <=> (Frame_PlayerSelected.GetFirstChild("label-name") as CMlLabel);
						
						if (LocalUser.Login != TeamSelection_Login) {
							LoginOfSelected	= GetLoginFromName(Label_PlayerName.Value);
							if(!PlayerInvited.exists(LoginOfSelected)){
								PlayerInvited.add(LoginOfSelected);
							}
							SendCustomEvent("{{{Const::C_UIEvent_TeamSelection_SelectPlayer}}}", [LoginOfSelected]);
						}
					}
					else if (Event.ControlId == "button-buddies" || Event.ControlId == "quad-buddyinvitecontour" ) {
						PlayerListUpdate = True;
						declare Frame_PlayerSelected <=> Event.Control.Parent;
						declare Text LoginOfSelected;
						
						declare TeamSelection_Login for Event.Control = "";
						declare Label_PlayerName <=> (Frame_PlayerSelected.GetFirstChild("label-buddyname") as CMlLabel);
						
						LoginOfSelected	= GetLoginFromName(Label_PlayerName.Value);
						if (LocalUser.Login != LoginOfSelected) {
							if(!PlayerInvited.exists(LoginOfSelected)){
								PlayerInvited.add(LoginOfSelected);
							}
							SendCustomEvent("{{{Const::C_UIEvent_TeamSelection_SelectPlayer}}}", [LoginOfSelected]);
						}
					}
					else if (Event.ControlId == "button-requester") {
						declare Frame_Requester <=> Event.Control.Parent;
						declare Quad_Requester_MouseOver <=> (Frame_Requester.GetFirstChild("quad-RequesterOver") as CMlQuad);
						declare Label_RequesterName <=> (Frame_Requester.GetFirstChild("label-requester") as CMlLabel);
						declare Quad_RequestImg <=> (Frame_Requester.GetFirstChild("quad-requestimg") as CMlQuad);

						declare RequesterLogin = GetLoginFromName(Label_RequesterName.Value);
						declare RequesterPlayer <=> GetPlayerFromName(RequesterLogin);
						if (RequesterPlayer != Null) {
							SendCustomEvent("{{{Const::C_UIEvent_TeamSelection_AcceptRequest}}}", [RequesterLogin]);
							if(PlayersJoined.exists(RequesterLogin)){
								PlayersJoined.add(RequesterLogin);
							}
						}
					}
					if (Event.ControlId == "button-playerlist") {
						declare Frame_MenuPlayerList <=> (G_Frame_Globale.GetFirstChild("frame-menu-playerslist") as CMlFrame);
						declare Header_InvitationList <=> (G_Frame_Globale.GetFirstChild("frame-menu-invitationlist") as CMlFrame);
						declare Frame_AddPlayer <=> (G_Frame_Globale.GetFirstChild("frame-menu-buttonaddplayer") as CMlFrame);
						declare Img_AddPlayerPng <=> (Frame_AddPlayer.GetFirstChild("button-playerlistpng") as CMlQuad);
						declare Frame_AutoJoin <=> (G_Frame_Globale.GetFirstChild("frame-autojointeam") as CMlFrame);
						G_SortInTeamPlayersLast = True;
						PlayerListUpdate = True;
						if(IsLeader){
							continue;
						}
						UpdateSquadMembers(G_Frame_SquadMembers, SquadForClient, IsPlayersUpdated, IsMouseOver, Net_S_PlayersPerTeam, LocalUser.Login);
						G_Frame_Menu_PlayerListHeaderFooter.Visible = !G_Frame_Menu_PlayerListHeaderFooter.Visible;
						IsClicked = !IsClicked;
						G_Frame_AutoFillTeam.Visible = True;						
						G_Label_AlertNeedMates.Visible = True;
						Frame_ListInvitation.Visible = !Frame_ListInvitation.Visible;
						Frame_SquadMembers.Visible = !Frame_SquadMembers.Visible;
						Frame_AutoJoin.Visible = !Frame_AutoJoin.Visible;
						Header_InvitationList.Visible = !Header_InvitationList.Visible;
						G_Frame_LeaveSquadButton.Visible 	= True;
						G_Button_AutoFillTeam.Visible 		= True;
						G_Quad_ContourAutoFill.Opacity = 0.3;
						if(BuddiesInServer.count == 0){
							G_Frame_BuddiesList.Visible = False;
							G_Button_BuddiesList.Visible = False;
							G_Label_BuddiesOnglet.Opacity = 0.5;
							G_Frame_ListPlayers.Visible = True;
							if(PlayerList.count > 10 && !G_Frame_BuddiesList.Visible){
								G_Frame_Pager.Visible					= True;
							} else G_Frame_Pager.Visible		= False;
							HandleUI_SelectionOnBuddies(False, BuddiesInServer);
						} else {
							G_Frame_BuddiesList.Visible = True;
							G_Frame_ListPlayers.Visible = False;
							G_Button_BuddiesList.Visible = True;
							G_Label_BuddiesOnglet.Opacity = 1.;
							HandleUI_SelectionOnBuddies(True, BuddiesInServer);
						}
						if(G_Label_HomeMenu.Value == "Leave team creation"){
							SendCustomEvent("{{{Const::C_UIEvent_TeamSelection_LeaveTeamCreation}}}", [LocalUser.Login]);
							
							PlayerInvited.clear();
							G_HeaderMainSquad.Visible					= False;
							UpdatePlayerList(G_Frame_ListPlayers, PlayerList, Page, PlayerInvited, Client_AllPlayersInTeamList, G_Label_MateSearched.Value, G_SortInTeamPlayersLast, SquadForClient);
						} else if (G_Label_HomeMenu.Value == "{{{RoyalSquad_CreateTeam_Text}}}"){
							G_HeaderMainSquad.Visible					= True;
							Frame_AddPlayer.Visible 					= False;
							G_Frame_LeaveSquadButton.Visible	= True;
							G_Frame_MenuTop.Visible						= False;
							SendCustomEvent("{{{Const::C_UIEvent_TeamSelection_OpenTeamCreation}}}", [LocalUser.Login]);
							
						}
						if(G_Frame_ListPlayers.Visible){
							G_Label_HomeMenu.Value = "Leave team creation";
						} else G_Label_HomeMenu.Value = "{{{RoyalSquad_CreateTeam_Text}}}";
					}
				}
				case CMlScriptEvent::Type::MouseOver: {
					if(Event.ControlId == "button-autofillteam"){
						declare Frame_AutoFillMenu <=> (G_Frame_Globale.GetFirstChild("frame-teaminautofill") as CMlFrame);
						declare Button_AutoFillContour <=> (Frame_AutoFillMenu.GetFirstChild("button-autofillteamcontour") as CMlQuad);
						
						G_Quad_ContourAutoFill.Visible = True;
						G_IsMouseOver_TeamReady = True;
						G_Button_AutoFillTeam.Opacity = 1.;
						G_Button_AutoFillTeam.BgColor = CL::HexToRgb("000F");
					}
					if(Event.ControlId == "leave-squad-button"){
						G_IsMouseOver_LeaveTeam = True;
						G_Quad_LeaveSquad.Opacity = 1.;
						G_Quad_LeaveSquad.BgColor = CL::HexToRgb("000F");
					}
					if(Event.ControlId == "quad-buddieslist"){
						if(!BuddiesOnServer){
							G_Label_NoBuddies_Notif.Visible = True;
							G_Label_NoBuddies_Notif.Opacity = 1.;
						}
					}
					if(Event.ControlId == "button-buddieslist"){
						if(!G_Frame_BuddiesList.Visible){
							G_Quad_BuddiesList.Opacity = 1.;
						}
					}
					if(Event.ControlId == "button-playerslist"){
						if(!G_Frame_ListPlayers.Visible){
							G_Quad_Onglet_PlayersList.Opacity = 1.;
						}
					}
					if(Event.ControlId == "button-cancelautojoin"){
						declare Quad_ContourCancelAutoJoin <=> (G_Frame_Globale.GetFirstChild("quad-contourcancelautojoin") as CMlQuad);
						Quad_ContourCancelAutoJoin.Visible = True;
					}
					if(Event.ControlId == "button-autojoin"){
						declare Quad_ButtonAutoJoin <=> (G_Frame_Globale.GetFirstChild("button-autojoin") as CMlQuad);
						declare Label_AutoJoin <=> (G_Frame_Globale.GetFirstChild("label-autojoin") as CMlLabel);
						G_IsMouseOver_AutoJoin = True;
						Quad_ButtonAutoJoin.Opacity = 1.;
						Quad_ButtonAutoJoin.BgColor = CL::HexToRgb("000000FF");
						Label_AutoJoin.Opacity = 1.0;
					}
					if(Event.ControlId == "button-playerlist"){
						declare Quad_ButtonCreateTeam <=> (G_Frame_Globale.GetFirstChild("button-playerlist") as CMlQuad);
						declare Label_AutoJoin <=> (G_Frame_Globale.GetFirstChild("label-autojoin") as CMlLabel);
						G_IsMouseOver_CreateTeam = True;
						G_Quad_ContourCreateTeam.Visible = True;
						Quad_ButtonCreateTeam.Opacity = 1.;
						Quad_ButtonCreateTeam.BgColor = CL::HexToRgb("000000FF");
					}
					if(Event.ControlId == "button-player"){
						declare Frame_Player <=> Event.Control.Parent;
						declare Quad_MouseOver <=> (Frame_Player.GetFirstChild("quad-OnOver") as CMlQuad);
						declare Label_PlayerName <=> (Frame_Player.GetFirstChild("label-name") as CMlLabel);
						declare Label_PlayerBracket <=> (Frame_Player.GetFirstChild("label-bracket") as CMlLabel);
						declare Label_ClickToInvite <=> (Frame_Player.GetFirstChild("label-clicktoinvite") as CMlLabel);
						Label_ClickToInvite.Visible = True;
						Label_PlayerName.Opacity = 1.;
						Quad_MouseOver.Visible = True;
					}
					if(Event.ControlId == "button-buddies"){
						declare Frame_Buddy <=> Event.Control.Parent;
						declare Quad_MouseOver <=> (Frame_Buddy.GetFirstChild("quad-buddyOnOver") as CMlQuad);
						declare Label_PlayerName <=> (Frame_Buddy.GetFirstChild("label-buddyname") as CMlLabel);
						declare Label_PlayerBracket <=> (Frame_Buddy.GetFirstChild("label-buddybracket") as CMlLabel);
						Label_PlayerName.Opacity = 1.;
						Quad_MouseOver.Visible = True;
					}
					if(Event.ControlId == "button-requester"){
						declare Frame_Requester <=> Event.Control.Parent;
						declare Quad_Requester_MouseOver <=> (Frame_Requester.GetFirstChild("quad-RequesterOver") as CMlQuad);
						declare Label_RequesterName <=> (Frame_Requester.GetFirstChild("label-requester") as CMlLabel);
						declare Quad_RequestImg <=> (Frame_Requester.GetFirstChild("quad-requestimg") as CMlQuad);
						declare Label_ClickToAccept <=> (Frame_Requester.GetFirstChild("label-clicktoaccept") as CMlLabel);
						Label_ClickToAccept.Visible = True;
						Label_RequesterName.TextColor = <1., 1., 1.>;
						Quad_RequestImg.Opacity = 1.;
						Quad_RequestImg.BgColor = CL::HexToRgb("000F");
						Quad_Requester_MouseOver.Visible = True;
					}
					if(Event.ControlId == "button-sortplayerslist"){
						G_Button_SortPlayersList.Opacity = 1.;
						G_Button_SortPlayersList.BgColor = CL::HexToRgb("000000FF");
					}
				}
				case CMlScriptEvent::Type::MouseOut: {
					if(Event.ControlId == "button-autofillteam"){
						declare Frame_AutoFillMenu <=> (G_Frame_Globale.GetFirstChild("frame-teaminautofill") as CMlFrame);
						declare Button_AutoFillContour <=> (Frame_AutoFillMenu.GetFirstChild("button-autofillteamcontour") as CMlQuad);
						G_IsMouseOver_TeamReady = False;
						G_X = 0.;
						G_Button_AutoFillTeam.Opacity = 0.3;
						G_Button_AutoFillTeam.BgColor = CL::HexToRgb("1A1A1AFF"); 
						G_Quad_ContourAutoFill.Opacity = 1.;
					}
					if(Event.ControlId == "leave-squad-button"){
						G_IsMouseOver_LeaveTeam = False;
						G_Quad_LeaveSquad.Opacity = 0.3;
						G_Quad_LeaveSquad.BgColor = CL::HexToRgb("1A1A1AFF"); 
					}
					if(Event.ControlId == "quad-buddieslist"){
						G_Label_NoBuddies_Notif.Opacity = 1.;
						G_Label_NoBuddies_Notif.Visible = False;
					}
					if(Event.ControlId == "button-cancelautojoin"){
						declare Quad_ContourCancelAutoJoin <=> (G_Frame_Globale.GetFirstChild("quad-contourcancelautojoin") as CMlQuad);
						Quad_ContourCancelAutoJoin.Visible = False;
					}
					if(Event.ControlId == "button-autojoin"){
						declare Quad_ButtonAutoJoin <=> (G_Frame_Globale.GetFirstChild("button-autojoin") as CMlQuad);
						declare Label_AutoJoin <=> (G_Frame_Globale.GetFirstChild("label-autojoin") as CMlLabel);
						G_IsMouseOver_AutoJoin = False;
						G_X = 0.;
						G_Quad_ContourAutoJoin.Opacity = 1.;
						Quad_ButtonAutoJoin.Opacity = 0.3;
						Quad_ButtonAutoJoin.BgColor = CL::HexToRgb("1A1A1AFF");
						Label_AutoJoin.Opacity = 1.0;
					}
					if(Event.ControlId == "button-playerlist"){
						declare Quad_ButtonCreateTeam <=> (G_Frame_Globale.GetFirstChild("button-playerlist") as CMlQuad);
						declare Label_AutoJoin <=> (G_Frame_Globale.GetFirstChild("label-autojoin") as CMlLabel);
						G_IsMouseOver_CreateTeam = False;
						G_X = 0.;
						G_Quad_ContourCreateTeam.Visible = True;
						G_Quad_ContourCreateTeam.Opacity = 1.;
						Quad_ButtonCreateTeam.Opacity = 0.3;
						Quad_ButtonCreateTeam.BgColor = CL::HexToRgb("1A1A1AFF");
					}
					if(Event.ControlId == "button-buddies"){
						declare Frame_Buddy <=> Event.Control.Parent;
						declare Quad_MouseOver <=> (Frame_Buddy.GetFirstChild("quad-buddyOnOver") as CMlQuad);
						declare Label_PlayerName <=> (Frame_Buddy.GetFirstChild("label-buddyname") as CMlLabel);
						declare Label_PlayerBracket <=> (Frame_Buddy.GetFirstChild("label-buddybracket") as CMlLabel);
						Label_PlayerName.Opacity = 0.5;
						Quad_MouseOver.Visible = False;	
					}
					if(Event.ControlId == "button-player"){
						declare Frame_Player <=> Event.Control.Parent;
						declare Quad_MouseOver <=> (Frame_Player.GetFirstChild("quad-OnOver") as CMlQuad);
						declare Label_PlayerName <=> (Frame_Player.GetFirstChild("label-name") as CMlLabel);
						declare Label_PlayerBracket <=> (Frame_Player.GetFirstChild("label-bracket") as CMlLabel);
						declare Label_ClickToInvite <=> (Frame_Player.GetFirstChild("label-clicktoinvite") as CMlLabel);
						Label_ClickToInvite.Visible = False;
						Label_PlayerName.Opacity = 0.5;
						Quad_MouseOver.Visible = False;	
					}
					if(Event.ControlId == "button-requester"){
						declare Frame_Requester <=> Event.Control.Parent;
						declare Quad_Requester_MouseOver <=> (Frame_Requester.GetFirstChild("quad-RequesterOver") as CMlQuad);
						declare Label_RequesterName <=> (Frame_Requester.GetFirstChild("label-requester") as CMlLabel);
						declare Quad_RequestImg <=> (Frame_Requester.GetFirstChild("quad-requestimg") as CMlQuad);
						declare Label_ClickToAccept <=> (Frame_Requester.GetFirstChild("label-clicktoaccept") as CMlLabel);
						Label_ClickToAccept.Visible = False;
						Label_RequesterName.TextColor = <0.5, 0.5, 0.5>;
						Quad_RequestImg.Opacity = .3;
						Quad_RequestImg.BgColor = CL::HexToRgb("1A1A1AFF");
						Quad_Requester_MouseOver.Visible = False;
					}
					if(Event.ControlId == "button-sortplayerslist"){
						G_Button_SortPlayersList.Opacity = 0.3;
						G_Button_SortPlayersList.BgColor = CL::HexToRgb("1A1A1AFF");
					}
					if(Event.ControlId == "button-buddieslist"){
						if(!G_Frame_BuddiesList.Visible){
							G_Quad_BuddiesList.Opacity = 0.3;
						}
					}
					if(Event.ControlId == "button-playerslist"){
						if(!G_Frame_ListPlayers.Visible){
							G_Quad_Onglet_PlayersList.Opacity = 0.3;
						}
					}
				}
			}		
		}
	}
}
		--></script>
	</manialink>
	""";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update library
Void Yield() {
	foreach (Event in PendingEvents) {
		if (Event.Type == CManiaAppPlaygroundEvent::Type::LayerCustomEvent) {
			if (
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_SelectPlayer ||
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_AcceptRequest||
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_MemberInTeam ||
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_AllPlayersInTeam ||
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_LeaderInFullTeam ||
				Event.CustomEventType == Const::C_UI_Event_TeamSelection_TeamInAutoFill	||
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_LeaveTeamCreation	||
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_InvitersToDestroyUpdated ||
				Event.CustomEventType == Const::C_UI_Event_TeamSelection_LeaveTeam ||
				Event.CustomEventType == Const::C_UI_Event_TeamSelection_PlayerInAutoJoin ||
				Event.CustomEventType == Const::C_UI_Event_TeamSelection_PlayerCancelAutoJoin ||
				Event.CustomEventType == Const::C_UI_Event_TeamSelection_CancelTeamInAutoFill	||
				Event.CustomEventType == Const::C_UIEvent_TeamSelection_OpenTeamCreation ||
				Event.CustomEventType == Const::C_UI_Event_TeamSelection_NeedHelp
			) {
				declare EventData = Text[];
				foreach (Value in Event.CustomEventData) EventData.add(Value);
				SendCustomEvent(Event.CustomEventType, EventData);
			}
		}
	}
}



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
	Layers::Create(C_Layer_TeamSelection, Private_GetTeamSelectionML());
}