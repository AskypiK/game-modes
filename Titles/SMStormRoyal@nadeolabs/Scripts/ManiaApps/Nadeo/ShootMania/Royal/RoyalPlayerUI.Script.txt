/**
 * 
 */
#Const Version    "2018-09-03"
#Const ScriptName "ManiaApps/RoyalPlayerUI.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ManiaApps/Nadeo/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/Shootmania/Royal/Constants2.Script.txt" as Const

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Layer_FakeScoreTableUI "RoyalSquad_UI"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Private
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the manialink of the Royal UI
 *
 *  @return                           Royal UI manialink
 */

Text RoyalSquadUI_ML(){
declare Text  Instrument_Distance_Axis_ImageUrl				= "file://Media/Manialinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_Axis.dds";
declare Text  Instrument_Distance_Repere_ImageUrl			= "file://Media/Manialinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_Repere.dds";
declare Text	Instrument_Distance_Tornado_ImageUrl		=	"file://Media/Manialinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_Tornado.dds";
declare Text	Instrument_Distance_Character_ImageUrl	=	"file://Media/Manialinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_Character.dds";
declare Text	Instrument_Distance_Pole_ImageUrl				=	"file://Media/Manialinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_Pole.dds";
declare Text PoleMarkerImg = "file://Media/Manialinks/Shootmania/Common/goal_cap.dds";
declare Real PoleImgSize = 10.;
declare Real PlayersImgSize = 6.;
declare Real WideScreenRatio = 9./16.;
declare PlayersSquadSmallML = "";

declare Img_CadreReady = "file://Media/ManiaLinks/Nadeo/TeamSelectionModule/ASSET_UI_SquadRoyal_Frame_Ready.dds";
declare Img_HitIcon = "file://Media/ManiaLinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_HitIcon_V2.dds";
declare Img_HealIcon = "file://Media/ManiaLinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_HealIcon_V2.dds";

//SmallSquadList
for (I, 0, 6) {
	declare PosY = (I * -15.) + 90.;
	if (I==0){
		PosY = 90.;
	}
		PlayersSquadSmallML ^= """<frameinstance pos="240 {{{PosY}}}" modelid="framemodel-playersquad-small" />""";
}

    return """	
		<manialink version="3" name="{{{C_Layer_FakeScoreTableUI}}}">
<stylesheet>
  <style class="text-default" textfont="Oswald" textcolor="ffffff" textsize="3" textemboss="1" />
  <style class="text-button" textfont="BiryaniDemiBold" textcolor="ffffff" textsize="3" textemboss="1" />
</stylesheet>
<frame id="frame-global" hidden="1">
	<framemodel id="framemodel-playersquad-small">
		<frame id="SquadMemberSmall">
			<quad pos="-120 -46.5" z-index="1" size="70 10" halign="left" valign="center" bgcolor="111111FF" opacity="0.8" id="squadmembersmall-background"/>
			<quad pos="-121.5 -46.5" z-index="2" size="72 30.5" halign="left" valign="center" opacity="1." image="{{{Img_CadreReady}}}" id="squadmembersmall-contourbackground"/>
			<label pos="-97 -46" z-index="10" size="25 10" halign="left" valign="center" text="" textsize="2" textprefix="$o" id="label-membernamesmall" textfont="OswaldMono"/>
			<quad pos="-112 -40.5" z-index="10" size="10 10" halign="left" bgcolor="FF5B00" valign="center" id="label-needhelp" image="file://Media/Manialinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_Alerte.dds" rot="90"/>
			<label pos="-110 -46.5" autoscale="false" size="10 10" text="➔" halign="center" rot="-90" valign="center" textsize="3"  hidden="1" id="label-ishealing-icon" textfont="OswaldMono"/>
			<quad pos="-115 -46.5" z-index="11" autoscale="false" size="8 8" text="" halign="center" valign="center" hidden="1" image="file://Media/Manialinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_BrokenArmor.dds" id="quad-heal-icon"/>
			<frame id="frame-statsmates">
				<quad pos="-80 -56" z-index="11" size="8 8" halign="center" valign="center" image="{{{Img_HitIcon}}}" id="squadmemberssmall-hiticon"/>
				<label pos="-85 -56" z-index="11" text="" size="8 8" halign="right" valign="center" id="label-hitvalue" />
				<quad pos="-95 -56" z-index="11" size="8 8" halign="center" valign="center" image="{{{Img_HealIcon}}}" id="squadmemberssmall-healicon"/>
				<label pos="-100 -56" z-index="11" text="" size="8 8" halign="right" valign="center" id="label-healvalue" />
			</frame>
		</frame>
	</framemodel>
	<frame id="UI_Distance_Moving" hidden="1" pos="0 -60" >
		<quad id="Distance_Axis"  pos="0 0" z-index="0" size="20 20" scale="2" bgcolor="FFFA" image="{{{Instrument_Distance_Axis_ImageUrl}}}" halign="center" valign="center" />
		<quad id="Distance_Repere"  pos="-15 0" z-index="0" scale="2" size="20 20"  bgcolor="FFFA" image="{{{Instrument_Distance_Repere_ImageUrl}}}" halign="center" valign="center" />
		<quad id="Distance_Icon_Perso"  pos="-15 5" scale=".25" z-index="0" size="20 20"  bgcolor="FFFA" image="{{{Instrument_Distance_Character_ImageUrl}}}" halign="center" valign="center" />
		<quad id="Distance_Icon_Pole"  pos="18.5 5"  scale=".25" z-index="0" size="20 20"  bgcolor="FFFA" image="{{{Instrument_Distance_Pole_ImageUrl}}}" halign="center" valign="center" />
		<quad id="Distance_Icon_Tornado"  pos="18.5 5"  scale=".25" z-index="0" size="20 20"  bgcolor="FFFA" image="{{{Instrument_Distance_Tornado_ImageUrl}}}" halign="center" valign="center" />
		<quad id="Distance_RepereTornado"  pos="-15 0" z-index="0" scale="2" size="20 20"  bgcolor="FFFA" image="{{{Instrument_Distance_Repere_ImageUrl}}}" halign="center" valign="center" />
	</frame>
	<frame id="frame_needhelpgauge" hidden="1">
		<label pos="-130 -78" id="label-score" textsize="3" text="stay still to ask for help" z-index="0" size="50 50" halign="center" valign="center" />
		<quad pos="-154 -85" id="quad-gaugeneedhelp" size="48 5" bgcolor="FFFF" opacity="1." halign="left" valign="center"  z-index="-1"/>
		<quad pos="-105 -85" z-index="1" size="50 15" halign="right" valign="center" opacity="1." id="needhelpgauge-contour" image="file://Media/ManiaLinks/Nadeo/TeamSelectionModule/ASSET_UI_SquadRoyal_Frame_Ready.dds" />
	</frame>
	<frame id="frame-Heal" hidden="1">
		<quad id="quad-vignetteheal" pos="-160 90" size="320 360" opacity="0.7" halign="left" valign="top" image="file://Media/ManiaLinks/Nadeo/ShootMania/Royal/ASSET_UI_SquadRoyal_VignetteHeal2.dds" />
	</frame>
</frame> 
<frame id="SquadMembers">
	<frame id="frame-squadmembers-small" z-index="-15" hidden="1">
		{{{PlayersSquadSmallML}}}
	</frame>
</frame>

<frame id="Score" hidden="1">
	<frame id="HitCombo" pos="-20 85">
		<label id="label-hitcombo" textsize="5" textprefix="$o" pos="0 0" z-index="0" size="31 5" halign="center" valign="center" text="10000"/>
		<label id="label-hitcombotitle" textsize="1" textprefix="$o" pos="-23 -3" z-index="0" size="31 5" halign="center" valign="center" text="Hit Combo"/>
		<quad pos="29 -5.5" z-index="-100" size="45 0.5" modulatecolor="000000FF" opacity="0.9" halign="left" valign="center" id="quad-HitCombobottomlineright"/>
		<quad pos="11 -5.5" z-index="-100" size="45 0.5" modulatecolor="000000FF" opacity="0.9" halign="right" valign="center" id="quad-HitCombobottomlineleft"/>
	</frame>
	<frame id="TeamScore" pos="20 85">
		<label id="label-teamscore" textsize="5" textprefix="$o" pos="0 0" z-index="0" size="31 5" halign="center" valign="center" text="10000"/>
		<label id="label-scoretitle" textsize="1" textprefix="$o" pos="23 -3" z-index="0" size="25 5" halign="center" valign="center" text="Team Score"/>
		<frame id="frame-teamnotification">
			<label id="label-teamnotif" textsize="2" size="15 10" pos="0 -12" opacity="1." halign="center" z-index="-1" valign="center"/>
			<label id="label-scoreadded" textsize="2" textprefix="$o" pos="0 -8" z-index="0" size="31 5" halign="center" valign="center" text="+12" />
		</frame>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "MathLib" as ML
declare CMlFrame Frame_NeedHelpGauge;
declare CMlQuad Quad_HelpTimerGauge;
declare Real G_X;

Void Private_MoveVehicleIconOnAxis(Real _Ratio, CMlQuad _TruckIcon, CMlQuad _Repere){
	_TruckIcon.RelativePosition_V3.X 	= 18.5 - 37 * _Ratio; // (POS X Max - 2*(Pos X Max) * Ratio) 
	_Repere.RelativePosition_V3.X 		= 18.5 - 37 * _Ratio;
}

Void Private_MoveTornadoIconOnAxis(Real _RatioTornado, CMlQuad _TornadoIcon, CMlQuad _RepereTornado){
	_TornadoIcon.RelativePosition_V3.X 	= 18.5 - 37 * _RatioTornado; // (POS X Max - 2*(Pos X Max) * Ratio) 
	_RepereTornado.RelativePosition_V3.X 		= 18.5 - 37 * _RatioTornado;
}

CSmPlayer GetOwner() {
	if (GUIPlayer != Null) return GUIPlayer;
	return InputPlayer;
}

CSmPlayer GetCSmPlayerFromLogin(Text _PlayerLogin){
	foreach(Player in Players){
		
		if (Player.User.Login == _PlayerLogin) {
			
			return Player;
		}
	}
	return Null;
}

Boolean IsAskForHelpTimerElapsed(Integer _AskForHelpTimer){
	
	if(Now > _AskForHelpTimer + 5000){
		return True;
	}
	return False;
}

Text GetNameFromLogin(Text _Login){
	foreach(Player in Players){
		if(Player.User.Login == _Login){
			return Player.User.Name;
		}
	}
	return "";
}

Void UpdateSmallSquadMembers(
	CMlFrame _Frame_Small_SquadMembers,
	Text[] _SquadMembers,
	Integer _Net_S_PlayersPerTeam,
	Text[] _UnSpawnedMates,
	Text[] _MatesNeedHelp,
	Vec3 _TeamColor,
	Text[] _PlayersHealed,
	Integer[Text] _Net_PlayersHitcount,
	Integer[Text] _Net_PlayersHealcount
){
	declare NewSquadMembers = _SquadMembers;
	foreach(FrameIndex => Control in _Frame_Small_SquadMembers.Controls) {
		declare Frame_Member <=> (Control as CMlFrame);
		declare Label_MemberName <=> (Frame_Member.GetFirstChild("label-membernamesmall") as CMlLabel);
		Frame_Member.Scale = 0.75;
		declare Quad_Background <=> (Frame_Member.GetFirstChild("squadmembersmall-background") as CMlQuad);
		declare Quad_ContourBackground <=> (Frame_Member.GetFirstChild("squadmembersmall-contourbackground") as CMlQuad);
		declare Label_NeedHeal <=> (Frame_Member.GetFirstChild("quad-heal-icon") as CMlQuad);
		declare NeedHelp_Label <=> (Frame_Member.GetFirstChild("label-needhelp") as CMlQuad);
		declare IsHealed_Icon <=> (Frame_Member.GetFirstChild("label-ishealing-icon") as CMlLabel);
		declare Frame_MatesStats <=> (Frame_Member.GetFirstChild("frame-statsmates") as CMlFrame);
		declare Label_HitValue <=> (Frame_Member.GetFirstChild("label-hitvalue") as CMlLabel);
		declare Label_HealValue <=> (Frame_Member.GetFirstChild("label-healvalue") as CMlLabel);
		Label_NeedHeal.Visible = False;
		Quad_ContourBackground.ModulateColor = _TeamColor;
		Label_HitValue.Visible = True;
		Label_HealValue.Visible = True;
		if (_Net_S_PlayersPerTeam > 0) {
			if (_Frame_Small_SquadMembers.Controls.count > _Net_S_PlayersPerTeam - 1){
			//Si la frameindex est supérieure à Net_S
				if(FrameIndex > _Net_S_PlayersPerTeam - 1){
					Frame_Member.Visible = False;
				} else Frame_Member.Visible = True;
			}
		if (NewSquadMembers.existskey(FrameIndex) && FrameIndex < _Net_S_PlayersPerTeam) {
			if (FrameIndex == 0) {
				Label_MemberName.TextColor = <1., 0.6, 0.2>;
			} 
			else {
				Label_MemberName.TextColor = <1., 1., 1.>;
			}
			declare NewMember = NewSquadMembers[FrameIndex];
			declare MatePlayer <=> GetCSmPlayerFromLogin(NewMember);
			declare MemberName = GetNameFromLogin(NewMember);
			NeedHelp_Label.Visible = False;
			if (NewMember != "") {
				Label_MemberName.Value = MemberName;
				Label_HitValue.Visible = True;
				Label_HealValue.Visible = True;
				if(!_UnSpawnedMates.exists(NewMember)){
					Frame_Member.RelativePosition_V3.X = 215.;
					Frame_MatesStats.RelativePosition_V3.X = 0.;
					IsHealed_Icon.Visible = False;
					Label_MemberName.Opacity = 1.;
					Quad_ContourBackground.Opacity = 1.;
					Quad_Background.Opacity = 0.5;
					Label_MemberName.RelativePosition_V3.X = -105.;
					if(_Net_PlayersHitcount.existskey(NewMember)){
						Label_HitValue.Value = TL::ToText(_Net_PlayersHitcount[NewMember]);
					}
					if(_Net_PlayersHealcount.existskey(NewMember)){
						Label_HealValue.Value = TL::ToText(_Net_PlayersHealcount[NewMember]);
					}
				}
				if(MatePlayer != Null){
					if(MatePlayer.Armor < MatePlayer.ArmorMax && !_UnSpawnedMates.exists(NewMember)){
						Label_NeedHeal.Visible = True;
						Frame_Member.RelativePosition_V3.X = 215.;
						Frame_MatesStats.RelativePosition_V3.X = 0.;
						if(_PlayersHealed.exists(MatePlayer.User.Login) && MatePlayer.Armor < MatePlayer.ArmorMax){
							IsHealed_Icon.Visible = True;
						} else {
							IsHealed_Icon.Visible = False;
						}
						if(IsHealed_Icon.Visible == True){
							G_X = Now * 0.003;
							IsHealed_Icon.Opacity = ML::Abs(ML::Sin(G_X))/1.5 + 0.3;
						}
					} else Label_NeedHeal.Visible = False;
					if(_MatesNeedHelp.exists(MatePlayer.User.Login) && !_UnSpawnedMates.exists(NewMember)){
						Label_NeedHeal.Visible = True;
						Frame_Member.RelativePosition_V3.X = 208.;
						Frame_MatesStats.RelativePosition_V3.X = 7.;
						NeedHelp_Label.Visible = True;
						if(_PlayersHealed.exists(MatePlayer.User.Login) && MatePlayer.Armor < MatePlayer.ArmorMax){
							IsHealed_Icon.Visible = True;
						} else {
							IsHealed_Icon.Visible = False;
						}
						if(IsHealed_Icon.Visible == True){
							G_X = Now * 0.003;
							IsHealed_Icon.Opacity = ML::Abs(ML::Sin(G_X))/1.5 + 0.3;
						}
					}
				}
				if(_UnSpawnedMates.exists(NewMember)){
					NeedHelp_Label.Visible					 = False;
					IsHealed_Icon.Visible 					 = False;
					Frame_Member.RelativePosition_V3.X = 225.;
					Frame_MatesStats.RelativePosition_V3.X = -12.;
					Label_MemberName.RelativePosition_V3.X = -118.;
					Quad_Background.Opacity = 0.1;
					Quad_ContourBackground.Opacity = 0.1;
					Label_MemberName.Opacity = 0.3;
				}
			}
		} else {
				Label_MemberName.Value = "";
				Label_NeedHeal.Visible = False;
				Frame_Member.Visible = False;
				NeedHelp_Label.Visible = False;
			}
		}
	}
}

Boolean IsMatesLooseArmor(Text[] _SquadForClient){
	foreach(Member in _SquadForClient){
		declare PlayerMember <=> GetCSmPlayerFromLogin(Member);
		if(PlayerMember != Null){
			if(PlayerMember.Armor < PlayerMember.ArmorMax){
				return True;
			}
		}
		
	}
	return False;
}

main() {
	declare G_Frame_Globale <=> (Page.GetFirstChild("frame-global") as CMlFrame);
	declare G_Frame_Score <=> (Page.GetFirstChild("Score") as CMlFrame);
	declare Frame_SmallSquadMembers <=> (Page.GetFirstChild("frame-squadmembers-small") as CMlFrame);

	declare Real G_X;
	declare G_Quad_Distance_Icon_CamionT <=> (G_Frame_Globale.GetFirstChild("Distance_Icon_Perso") as CMlQuad);
	declare G_Quad_Distance_Repere <=> (G_Frame_Globale.GetFirstChild("Distance_Repere") as CMlQuad);

	declare G_Quad_Distance_Icon_Tornado <=> (G_Frame_Globale.GetFirstChild("Distance_Icon_Tornado") as CMlQuad);
	declare G_Quad_Distance_RepereTornado <=> (G_Frame_Globale.GetFirstChild("Distance_RepereTornado") as CMlQuad);

	declare G_Label_TeamScore <=> (G_Frame_Score.GetFirstChild("label-teamscore") as CMlLabel);
	declare G_Frame_TeamEvent <=> (G_Frame_Score.GetFirstChild("frame-teamnotification") as CMlFrame);
	declare G_Label_TeamEvent <=> (G_Frame_Score.GetFirstChild("label-teamnotif") as CMlLabel);
	declare G_Frame_ScoreNotif <=> (G_Frame_Score.GetFirstChild("TeamScore") as CMlFrame);
	declare G_Frame_HitCombo <=> (G_Frame_Score.GetFirstChild("HitCombo") as CMlFrame);
	declare G_Label_HitCombo <=> (G_Frame_Score.GetFirstChild("label-hitcombo") as CMlLabel);
	declare G_Label_ScoreAdded <=> (G_Frame_Score.GetFirstChild("label-scoreadded") as CMlLabel);
	declare G_Quad_ContourScoreBottomR <=> (G_Frame_Score.GetFirstChild("quad-HitCombobottomlineright") as CMlQuad);
	declare G_Quad_ContourScoreBottomL <=> (G_Frame_Score.GetFirstChild("quad-HitCombobottomlineleft") as CMlQuad);

	Frame_NeedHelpGauge <=> (G_Frame_Globale.GetFirstChild("frame_needhelpgauge") as CMlFrame);
	Quad_HelpTimerGauge <=> (G_Frame_Globale.GetFirstChild("quad-gaugeneedhelp") as CMlQuad);

	declare G_Frame_HealReceived <=> (G_Frame_Globale.GetFirstChild("frame-Heal") as CMlFrame);
	declare G_Quad_HealReceived <=> (G_Frame_Globale.GetFirstChild("quad-vignetteheal") as CMlQuad);

	

	declare netread Boolean ScoreTableVisible for UI;
	declare netread Boolean IsPlayerSpawned for UI;
	declare netread Integer TeamScore for UI;
	declare netread Text TeamEventName for UI;
	declare netread Text[] SquadForClient for UI;
	declare netread Integer Net_TeamEventTimer for UI;
	declare netread Text[] Net_PlayersNeedHelp for UI;
	declare netread Real Net_OffZoneRadius for Teams[0];
	declare netread Real Net_MinOffZoneRadius for Teams[0];
	declare netread Vec3 Net_PolePosition for Teams[0];
	declare netread Text[] MatesHealed for UI;
	declare netread Integer TeamCombo for UI;
	declare Real Client_OffZoneRadius;
	
	declare Vec2 Pole2D_Position;
	declare Vec2 Player2D_Position;

	declare Real Player_PosX;
	declare Real Player_PosY;

	declare Real Pole_PosX;
	declare Real Pole_PosY;

	declare CSmPlayer PlayerOwner;
	declare Integer TeamEventTimer;
	declare Integer PrevTeamEventTimer;
	declare Text PrevTeamEventName;

	declare Integer NeedHelpTimerSent;
	declare Integer PrevNeedHelpTimerSent;
	declare Boolean HelpAsked;
	declare Boolean IsTimerElapsed;
	declare Boolean PlayerStoppedForHeal;
	declare Integer AudioIsPlayingTimer;
	declare Integer PrevPlayersNeedHelpCount;
	declare Boolean AudioIsPlaying;
	declare netread Vec3 Net_TeamColor for UI;
	declare netread Integer TeamEventScore for UI;
	declare netread Boolean StartPlaying for UI;
	declare netread Integer GetHitTimer for UI;
	declare netread Text TeamEventPlayer for UI;
	declare Integer PrevGetHitTimer;
	declare Boolean PlayerJustGetHit;
	declare Text[] Membersunspawned;
	declare netread Integer Net_TS2_PlayersPerTeam for Teams[0];
	declare netread Integer[Text] Net_PlayersHealCount for Teams[0];
	declare netread Integer[Text] Net_PlayersHitCount for Teams[0];
	declare Integer PrevPlayersPerTeam;
	declare netread Integer Net_S_PlayersPerTeam for UI;
	declare Integer PrevPlayerMemberArmor;
	declare Integer MemberGetHurtTime;
	declare Integer PrevMemberGetHurtTime;
	declare Integer UnSpawnedPlayerTime;
	declare Integer PrevUnSpawnedPlayerTime;
	declare netread Integer UpdateClientSquad for UI;
	declare Integer PrevUpdateClientSquad;
	declare Integer PrevMatesHealedCount;
	declare Boolean IsAMateLooseArmor;
	declare netread Integer HitPlayerTime for UI;
	declare Integer PrevHitPlayerTime;
	while (True) {
		yield;
		declare Owner <=> GetOwner();
		PlayerOwner <=> GetCSmPlayerFromLogin(LocalUser.Login);
		if(Net_TS2_PlayersPerTeam != PrevPlayersPerTeam){
			UpdateSmallSquadMembers(Frame_SmallSquadMembers, SquadForClient, Net_S_PlayersPerTeam, Membersunspawned, Net_PlayersNeedHelp, Net_TeamColor, MatesHealed, Net_PlayersHitCount, Net_PlayersHealCount);
			PrevPlayersPerTeam = Net_TS2_PlayersPerTeam;
		}
		foreach(Member in SquadForClient){
			declare PlayerMember <=> GetCSmPlayerFromLogin(Member);
			if(PlayerMember != Null){
				if(PlayerMember.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned){
					if(!Membersunspawned.exists(Member)){
						Membersunspawned.add(Member);
						UnSpawnedPlayerTime = Now;
					}
				} else if(PlayerMember.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned){
					if(Membersunspawned.exists(Member)){
						UnSpawnedPlayerTime = Now;
						Membersunspawned.remove(Member);
					}
				} 
			}
		}
		if(StartPlaying){
			Frame_SmallSquadMembers.Visible = True;
			IsAMateLooseArmor = IsMatesLooseArmor(SquadForClient);
		} else Frame_SmallSquadMembers.Visible = False;

		if(IsAMateLooseArmor){
			MemberGetHurtTime = Now;
			IsAMateLooseArmor = False;
		}
		if(UnSpawnedPlayerTime > PrevUnSpawnedPlayerTime ||
			MemberGetHurtTime > PrevMemberGetHurtTime){
			PrevUnSpawnedPlayerTime = UnSpawnedPlayerTime;
			UpdateSmallSquadMembers(Frame_SmallSquadMembers, SquadForClient, Net_S_PlayersPerTeam, Membersunspawned, Net_PlayersNeedHelp, Net_TeamColor, MatesHealed, Net_PlayersHitCount, Net_PlayersHealCount);
			PrevMemberGetHurtTime = MemberGetHurtTime;
		}
		if(HitPlayerTime > PrevHitPlayerTime){
			PrevHitPlayerTime = HitPlayerTime;
			UpdateSmallSquadMembers(Frame_SmallSquadMembers, SquadForClient, Net_S_PlayersPerTeam, Membersunspawned, Net_PlayersNeedHelp, Net_TeamColor, MatesHealed, Net_PlayersHitCount, Net_PlayersHealCount);
		}
		if(UpdateClientSquad > PrevUpdateClientSquad || MatesHealed.count != PrevMatesHealedCount){
			UpdateSmallSquadMembers(Frame_SmallSquadMembers, SquadForClient, Net_S_PlayersPerTeam, Membersunspawned, Net_PlayersNeedHelp, Net_TeamColor, MatesHealed, Net_PlayersHitCount, Net_PlayersHealCount);
			PrevUpdateClientSquad = UpdateClientSquad;
			PrevMatesHealedCount = MatesHealed.count;
		}

		if(Frame_SmallSquadMembers.Visible){
			foreach (Control in Frame_SmallSquadMembers.Controls){
				declare MateFrame <=> (Control as CMlFrame);
				declare NeedHelp_Label <=> (MateFrame.GetFirstChild("label-needhelp") as CMlQuad);
				declare IsHealed_Icon <=> (MateFrame.GetFirstChild("label-ishealing-icon") as CMlLabel);
				if(NeedHelp_Label.Visible){
					G_X = Now * 0.003;
					NeedHelp_Label.Opacity = ML::Abs(ML::Sin(G_X))/1.5 + 0.3;
				}
				if(IsHealed_Icon.Visible){
					G_X = Now * 0.003;
					IsHealed_Icon.Opacity = ML::Abs(ML::Sin(G_X))/1.5 + 0.3;
				}
			}
		}

		if(StartPlaying && SquadForClient.count > 0){
			G_Frame_Score.Visible = True;
			G_Quad_ContourScoreBottomR.BgColor = Net_TeamColor;
			G_Quad_ContourScoreBottomL.BgColor = Net_TeamColor;
		} else G_Frame_Score.Visible = False;
		if(TeamEventScore == 0){
			G_Label_ScoreAdded.Visible = False;
			G_Label_TeamEvent.Value = "";
		} else G_Label_ScoreAdded.Visible = True;
		if(PlayerOwner != Null){
			if(MatesHealed.exists(PlayerOwner.User.Login) && PlayerOwner.Armor < PlayerOwner.ArmorMax){
				G_Frame_HealReceived.Visible = True;
			} else G_Frame_HealReceived.Visible = False;
			if(G_Frame_HealReceived.Visible){
				G_X = Now * 0.003;
				G_Quad_HealReceived.Opacity = ML::Abs(ML::Sin(G_X))/1.5 + 0.3;
			}
			if(PlayerOwner.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned){
				G_Frame_Globale.Visible = True;
				if(Net_TeamEventTimer > PrevTeamEventTimer){
					PrevTeamEventTimer = Net_TeamEventTimer;
					TeamEventTimer = Now;
					G_Frame_TeamEvent.Visible = True;
					switch (TeamEventName){
						case "survival": {
							G_Label_TeamEvent.TextSize = 3;
							G_Label_TeamEvent.Size.X = 15.;
							G_Label_TeamEvent.Value = "Survival";
							declare MateAliveCount = 0;
							foreach(Member in SquadForClient){
								declare PlayerMember <=> GetCSmPlayerFromLogin(Member);
								if(PlayerMember != Null){
									if(PlayerMember.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned){
										MateAliveCount += 1;
									}
								}
							}
							G_Label_ScoreAdded.Value = "+"^TL::ToText(MateAliveCount);
						}
						case "pole": {
							G_Label_TeamEvent.TextSize = 3;
							G_Label_TeamEvent.Size.X = 15.;
							G_Label_TeamEvent.Value = "Pole";
							G_Label_ScoreAdded.Value = "+"^TL::ToText(TeamEventScore);
						}
						case "hit": {
							G_Label_TeamEvent.TextSize = 1;
							G_Label_TeamEvent.Size.X = 25.;
							G_Label_TeamEvent.Value = TeamEventPlayer;
							G_Label_ScoreAdded.Value = "+"^TL::ToText(TeamEventScore);
							
						}
					}
				}
			} else G_Frame_Globale.Visible = False;
		}
		G_Label_TeamScore.Value = TL::ToText(TeamScore);
		G_Label_HitCombo.Value = "x"^TL::ToText(TeamCombo);
		
		if(Net_PlayersNeedHelp.count != PrevPlayersNeedHelpCount && Net_PlayersNeedHelp.count > 0){
			PrevPlayersNeedHelpCount = Net_PlayersNeedHelp.count;
			if(!AudioIsPlaying){
				//Audio.PlaySoundEvent(CAudioManager::ELibSound::Alert, 0, 0.); 
				AudioIsPlaying = True;
				AudioIsPlayingTimer = Now;
			}
		} else PrevPlayersNeedHelpCount = Net_PlayersNeedHelp.count;
		if(AudioIsPlaying){
			if(Now > AudioIsPlayingTimer + 1000){
				AudioIsPlaying = False;
			}
		}

		if(Now > TeamEventTimer + 2000){
			G_Frame_TeamEvent.Visible = False;
		}
		
		Pole_PosY = Net_PolePosition.Z;
		Pole_PosX = Net_PolePosition.X;
		Pole2D_Position = <Pole_PosX, Pole_PosY>;
		Client_OffZoneRadius = Net_OffZoneRadius;
		if(Client_OffZoneRadius < 0){
			Client_OffZoneRadius = 300.;
			G_Quad_Distance_Icon_Tornado.Opacity = 0.5;
		} else G_Quad_Distance_Icon_Tornado.Opacity = 1.;
		
		if(PlayerOwner != Null){
			if(!PlayerJustGetHit && PlayerOwner.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && GetHitTimer > PrevGetHitTimer && !Net_PlayersNeedHelp.exists(LocalUser.Login) && PlayerOwner.Armor < PlayerOwner.ArmorMax){
				PlayerJustGetHit = True;	
				PrevGetHitTimer = GetHitTimer;
				NeedHelpTimerSent = Now;
				SendCustomEvent("{{{Const::C_UI_Event_TeamSelection_NeedHelp}}}", [LocalUser.Login]);
			} else if(PlayerOwner.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned && PlayerOwner.Armor >= PlayerOwner.ArmorMax){
				PlayerJustGetHit = False;
				PrevGetHitTimer = GetHitTimer;
			}
			if(NeedHelpTimerSent > PrevNeedHelpTimerSent){
				IsTimerElapsed = IsAskForHelpTimerElapsed(NeedHelpTimerSent);
			}
			if(IsTimerElapsed || PlayerOwner.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned){
				PrevNeedHelpTimerSent = NeedHelpTimerSent;
				SendCustomEvent("{{{Const::C_UIEvent_TeamSelection_PlayersNeedHelpReceived}}}", [LocalUser.Login]);
				IsTimerElapsed = False;
				PlayerJustGetHit = False;
			}
		}
	}
}
--></script>
</manialink>""";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update library
Void Yield() {

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
	Layers::Create(C_Layer_FakeScoreTableUI, RoyalSquadUI_ML());
}